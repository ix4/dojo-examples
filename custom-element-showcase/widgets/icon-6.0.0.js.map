{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@dojo/framework/shim/global.mjs","webpack:///./node_modules/@dojo/framework/core/vdom.mjs","webpack:///./node_modules/@dojo/framework/core/NodeHandler.mjs","webpack:///./node_modules/@dojo/framework/core/WidgetBase.mjs","webpack:///./node_modules/@dojo/framework/shim/support/util.mjs","webpack:///./node_modules/tslib/tslib.es6.js","webpack:///./node_modules/@dojo/cli-build-widget/template/custom-element.js?9796","webpack:///./node_modules/@dojo/framework/core/decorators/diffProperty.mjs","webpack:///./node_modules/@dojo/framework/shim/Promise.mjs","webpack:///./node_modules/@dojo/framework/core/RegistryHandler.mjs","webpack:///./src/common/util.ts","webpack:///./node_modules/@dojo/framework/shim/Set.mjs","webpack:///./node_modules/@dojo/framework/core/decorators/beforeProperties.mjs","webpack:///./node_modules/@dojo/framework/shim/array.mjs","webpack:///./node_modules/@dojo/framework/shim/Map.mjs","webpack:///./node_modules/@dojo/framework/core/Destroyable.mjs","webpack:///./node_modules/@dojo/framework/core/Injector.mjs","webpack:///./node_modules/@dojo/framework/core/decorators/inject.mjs","webpack:///./node_modules/@dojo/framework/core/decorators/alwaysRender.mjs","webpack:///./src/common/styles/base.m.css","webpack:///./src/theme/icon.m.css","webpack:///./node_modules/@dojo/framework/core/Registry.mjs","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/@dojo/framework/shim/object.mjs","webpack:///./node_modules/process/browser.js","webpack:///./node_modules/@dojo/framework/core/registerCustomElement.mjs","webpack:///./src/icon/index.ts","webpack:///./node_modules/@dojo/framework/core/has.mjs","webpack:///./node_modules/@dojo/framework/shim/WeakMap.mjs","webpack:///./node_modules/@dojo/framework/core/diff.mjs","webpack:///./node_modules/@dojo/framework/core/decorators/handleDecorator.mjs","webpack:///./node_modules/@dojo/framework/core/mixins/Themed.mjs","webpack:///./node_modules/@dojo/framework/core/Evented.mjs"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","global","globalObject","window","navigator","userAgent","indexOf","globalThis","self","__webpack_exports__","isTextNode","isWNode","isVNode","w","v","dom","tsx","widgetInstanceMap","renderer","_shim_global__WEBPACK_IMPORTED_MODULE_0__","_core_has__WEBPACK_IMPORTED_MODULE_1__","_shim_WeakMap__WEBPACK_IMPORTED_MODULE_2__","_shim_Set__WEBPACK_IMPORTED_MODULE_3__","_shim_Map__WEBPACK_IMPORTED_MODULE_4__","_Registry__WEBPACK_IMPORTED_MODULE_5__","_diff__WEBPACK_IMPORTED_MODULE_6__","_RegistryHandler__WEBPACK_IMPORTED_MODULE_7__","__rest","e","getOwnPropertySymbols","length","EMPTY_ARRAY","nodeOperations","NAMESPACE_SVG","NAMESPACE_W3","NAMESPACE_XLINK","WNODE","VNODE","DOMVNODE","item","nodeType","isWNodeWrapper","child","node","isVNodeWrapper","isVirtualWrapper","tag","isBodyWrapper","wrapper","Boolean","type","isDomVNode","isElementNode","tagName","widgetConstructorOrNode","properties","children","assign","widgetConstructor","propertiesOrChildren","deferredPropertiesCallback","Array","isArray","classes","styles","newProperties","_a","nodeClasses","nodeStyles","nodeProperties","attrs","props","on","diffType","onAttach","toLowerCase","attributes","events","domNode","text","undefined","data","REGISTRY_ITEM","FromRegistry","[object Object]","this","spreadChildren","reduce","__autoRegistryItem","buildPreviousProperties","current","deferredProperties","keys","forEach","propName","attrName","getAttribute","same","dnode1","dnode2","widgetConstructor1","registryItem","widgetConstructor2","instance","findIndexOfChild","sameAs","start","createClassPropValue","classNames","className","updateAttribute","attrValue","namespace","setAttributeNS","removeAttribute","setAttribute","arrayFrom","arr","slice","createFactory","callback","middlewares","factory","result","isWidget","isFactory","returns","widgetMetaMap","requestedDomNodes","wrapperId","metaId","addNodeToMap","id","widgetMeta","nodeMap","set","has","invalidator","delete","destroyHandles","destroyMap","destroy","clear","widgetId","split","add","propertyName","diff","customDiffMap","customDiffProperties","propertyDiffMap","destroyFunction","registryHandler","base","registry","isDeferred","deferRefs","_renderScheduled","parentInvalidate","_mountOptions","sync","merge","transition","document","body","_invalidationQueue","_processQueue","_deferredProcessQueue","_applicationQueue","_eventMap","_idToWrapperMap","_wrapperSiblingMap","_idToChildrenWrappers","_insertBeforeMap","_nodeToWrapperMap","_idleCallbacks","_deferredRenderCallbacks","_allMergedNodes","nodeOperation","propValue","previousValue","push","updateEvent","eventName","currentValue","previousEvent","removeEventListener","evt","target","addEventListener","removeOrphanedEvents","previousProperties","onlyEvents","isEvent","substr","eventCallback","resolveRegistryItem","owningNode","instanceData","registryLabel","label","isLazyDefine","define","renderedToWrapper","rendered","parent","currentParent","requiresInsertBefore","hasPreviousSiblings","depth","wrappedRendered","hasParentWNode","hasVirtualParentNode","hasCurrentParentChildren","insertBefore","previousItem","nodes","pop","mapNodeToInstance","renderedItem","order","parentId","exitAnimation","hasAnimations","nextParent","owningId","runDeferredProperties","next","processProperties","findInsertBefore","searchNode","nextSibling","childDomWrapperId","childWrapper","parentNode","setValue","domValue","onInputValue","onSelectValue","setProperties","currentProperties","nextWrapper","includesEventsAndAttributes","propNames","propCount","previousClassString","currentClassString","merged","domClasses","styleNames","styleCount","j","styleName","newStyleValue","style","lastIndexOf","previousAttributes","attrNames","attrCount","updateAttributes","event","_schedule","_runInvalidationQueue","requestAnimationFrame","getWNodeWrapper","invalidationQueue","previouslyRendered","sort","a","b","_runProcessQueue","sibling","_updateWidget","_runDomInstructionQueue","_cleanUpMergedNodes","_runCallbacks","mergedNode","removeChild","setDomNodeOnParentWrapper","meta","_process","reverse","parentDomNode","parentElement","enterAnimation","enterAnimationActive","enter","owningWrapper","nodeHandler","inserted","currentDomNode","replaceChild","exitAnimationActive","exit","attached","addRoot","onDetach","callbacks","run","shift","requestIdleCallback","setTimeout","runAfterRenderCallbacks","runDeferredRenderCallbacks","registerDistinguishableCallback","childNodes","index","parentWNodeWrapper","wrappers","wrapperToCheck","parentName","nodeIdentifier","console","warn","checkDistinguishable","createKeyMap","mergeNodes","oldIndex","newIndex","currentLength","nextLength","instructions","replace","currentKeys","nextKeys","currentWrapper","domElement","toUpperCase","mergeNodeIndex","splice","_processMergeNodes","_processOne","widget","currentNode","parentWrapper","findParentDomNode","isVirtual","isBody","createTextNode","createElementNS","createElement","_createDom","invalidate","Constructor","dirty","rendering","__setProperties__","__setChildren__","__render__","middleware","resolveMiddleware","results","uniqueId","payload","resolvedMiddleware","_createWidget","currentChildren","_updateDom","remove","bodyIds","wrapperChildren","_removeDom","processResult","_removeWidget","didRender","size","diffMap","runDiffs","ignoreProperties","propertyNames","changed","propertiesDiff","values","nextChildren","mount","mountOptions","renderResult","wrapNodes","siblingId","NodeEventType","core_NodeHandler","Evented","super","arguments","_nodeMap","Map","element","emit","Widget","Projector","WidgetBase_WidgetBase","decoratorMap","WeakMap","builtDecoratorMap","boundAuto","IGNORE_LIST","getOwnPropertyNames","getPrototypeOf","autoBindCache","_initialProperties","_changedPropertyKeys","_registry","RegistryHandler","_nodeHandler","_handles","_children","_decoratorCache","_properties","_boundRenderFunc","render","_boundInvalidate","own","vdom","inputProperties","_runAfterConstructors","MetaType","_metaMap","cached","changedPropertyKeys","originalProperties","_runBeforeProperties","registeredDiffPropertyNames","getDecorator","constructor","ownKeys","filter","k","boundFunc","configurable","autoBind","allProperties","checkedProperties","diffPropertyResults","runReactions","previousProperty","newProperty","diffFunctions","reactionFunctions","executedReactions","reaction","propertyChanged","reactionRun","_runBeforeRenders","_runAfterRenders","decoratorKey","decoratorList","specificDecoratorList","decorators","allDecorators","instanceMap","unshift","buildDecorators","decoratorCache","_buildDecoratorList","beforeProperties","beforePropertiesFunction","beforeRenders","beforeRenderFunction","updatedRender","dNode","afterRenders","afterRenderFunction","afterRender","isDomMeta","afterConstructors","afterConstructor","handle","_type","Registry","wrapNative","nativeFunction","args","apply","__decorate","__metadata","__awaiter","desc","getOwnPropertyDescriptor","Reflect","decorate","metadataKey","metadataValue","metadata","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","rejected","done","then","widgetFactory","registerCustomElement","default","defaultExport","diffProperty","_handleDecorator__WEBPACK_IMPORTED_MODULE_0__","_diff__WEBPACK_IMPORTED_MODULE_1__","diffFunction","reactionFunction","propertyKey","addDecorator","isThenable","_global__WEBPACK_IMPORTED_MODULE_0__","ShimPromise","finally","onFinally","reason","_shim_Map__WEBPACK_IMPORTED_MODULE_0__","_core_Evented__WEBPACK_IMPORTED_MODULE_1__","_Registry__WEBPACK_IMPORTED_MODULE_2__","_registryWidgetLabelMap","_registryInjectorLabelMap","baseRegistry","injector","defineInjector","hasInjector","globalPrecedence","_get","getFunctionName","labelMap","registries","registeredLabels","action","Keys","formatAriaProperties","aria","Set","method","from","find","findIndex","includes","_support_util__WEBPACK_IMPORTED_MODULE_1__","of","copyWithin","fill","Destroyable","_shim_Promise__WEBPACK_IMPORTED_MODULE_0__","noop","destroyed","Error","handles","Injector","_core_Evented__WEBPACK_IMPORTED_MODULE_0__","_payload","_invalidator","inject","_shim_WeakMap__WEBPACK_IMPORTED_MODULE_0__","_handleDecorator__WEBPACK_IMPORTED_MODULE_1__","_beforeProperties__WEBPACK_IMPORTED_MODULE_2__","registeredInjectorsMap","getProperties","injectorItem","getInjector","registeredInjectors","alwaysRender","_beforeProperties__WEBPACK_IMPORTED_MODULE_1__"," _key","visuallyHidden","focusable","hidden","root","icon","downIcon","leftIcon","rightIcon","closeIcon","plusIcon","minusIcon","checkIcon","upIcon","upAltIcon","downAltIcon","searchIcon","barsIcon","settingsIcon","alertIcon","helpIcon","infoIcon","phoneIcon","editIcon","dateIcon","linkIcon","locationIcon","secureIcon","mailIcon","WIDGET_BASE_TYPE","isWidgetBaseConstructor","isWidgetFunction","isWNodeFactory","_shim_Map__WEBPACK_IMPORTED_MODULE_1__","_core_Evented__WEBPACK_IMPORTED_MODULE_2__","widgetLabel","_widgetRegistry","toString","widgetCtor","emitLoadedEvent","error","injectorFactory","_injectorRegistry","promise","isWidgetConstructorDefaultExport","g","Function","eval","is","getOwnPropertyDescriptors","entries","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","defaultClearTimeout","runTimeout","fun","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","concat","drainQueue","timeout","len","marker","runClearTimeout","Item","array","nextTick","title","browser","env","argv","version","versions","addListener","once","off","removeListener","removeAllListeners","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","CustomElementChildType","DomToWidgetWrapper","register","_Registry__WEBPACK_IMPORTED_MODULE_0__","_WidgetBase__WEBPACK_IMPORTED_MODULE_1__","_vdom__WEBPACK_IMPORTED_MODULE_2__","_shim_array__WEBPACK_IMPORTED_MODULE_3__","_shim_global__WEBPACK_IMPORTED_MODULE_4__","_mixins_Themed__WEBPACK_IMPORTED_MODULE_5__","_decorators_alwaysRender__WEBPACK_IMPORTED_MODULE_6__","RESERVED_PROPS","descriptor","WidgetConstructor","registryFactory","attributeMap","attributeName","HTMLElement","_eventProperties","_propertiesMap","_initialised","_childType","childType","_waitTillReady","readyState","_hasBeenParsed","_readyCallback","domProperties","_attributesToProperties","isReservedProp","filteredPropertyName","_getProperty","_setProperty","_getEventProperty","_setEventProperty","dispatchEvent","CustomEvent","bubbles","detail","defineProperties","childNode","some","isElement","isDojoChild","DOJO","NODE","_render","_childConnected","widgetProperties","renderChildren","__children__","Wrapper","themeContext","_getTheme","_renderer","display","getComputedStyle","dojoce","theme","themes","Child","map","__properties__","oldValue","observedAttributes","__customElementDescriptor","customElements","Icon","_dojo_framework_core_mixins_Themed__WEBPACK_IMPORTED_MODULE_2__","_dojo_framework_core_WidgetBase__WEBPACK_IMPORTED_MODULE_1__","altText","_dojo_framework_core_vdom__WEBPACK_IMPORTED_MODULE_3__","_common_styles_base_m_css__WEBPACK_IMPORTED_MODULE_6__","_theme_icon_m_css__WEBPACK_IMPORTED_MODULE_5__","_common_util__WEBPACK_IMPORTED_MODULE_4__","renderAltText","tslib__WEBPACK_IMPORTED_MODULE_0__","testCache","testFunctions","staticFeatures","DojoHasEnvironment","staticCache","feature","overwrite","normalizedFeature","exists","TypeError","strict","location","fetch","every","Number","POSITIVE_INFINITY","Math","imul","Observable","String","callSite","substitutions","raw","key1","key2","freeze","postMessage","setImmediate","MutationObserver","WebKitMutationObserver","example","observer","observe","setProperty","takeRecords","Animation","KeyframeEffect","AbortController","AbortSignal","IntersectionObserver","ResizeObserver","onpointerdown","reference","shallow","auto","isObjectOrArray","validOldProperty","validNewProperty","previousKeys","newKeys","ignore","handleDecorator","handler","registerThemeInjector","ThemedMixin","_Injector__WEBPACK_IMPORTED_MODULE_0__","_decorators_inject__WEBPACK_IMPORTED_MODULE_1__","_decorators_handleDecorator__WEBPACK_IMPORTED_MODULE_2__","_decorators_diffProperty__WEBPACK_IMPORTED_MODULE_3__","_diff__WEBPACK_IMPORTED_MODULE_4__","THEME_KEY","INJECTED_THEME_KEY","themeRegistry","themeInjector","setInvalidator","Base","Themed","_registeredBaseThemeKeys","_recalculateClasses","_theme","_recalculateThemeClasses","_getThemeClass","extraClasses","themeClassName","_baseThemeClassesReverseLookup","resultClassNames","_classes","extraClass","_registeredBaseTheme","join","baseThemes","finalBaseTheme","baseTheme","currentClassNames","baseClass","createThemeClassesLookup","themeKey","computed","_Destroyable__WEBPACK_IMPORTED_MODULE_1__","regexMap","listenersMap","methods","globString","targetString","regex","RegExp","test","isGlobMatch","listener","_addListener"],"mappings":"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","file":"icon-6.0.0.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 123);\n","const globalObject = (function () {\n    // the only reliable means to get the global object is\n    // `Function('return this')()`\n    // However, this causes CSP violations in Chrome apps.\n    if (typeof window !== 'undefined' && window.navigator.userAgent.indexOf('jsdom') > -1) {\n        return window;\n    }\n    if (typeof globalThis !== 'undefined') {\n        return globalThis;\n    }\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n})();\nexport default globalObject;\n//# sourceMappingURL=global.mjs.map","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport global from '../shim/global';\nimport has from '../core/has';\nimport WeakMap from '../shim/WeakMap';\nimport Set from '../shim/Set';\nimport Map from '../shim/Map';\nimport { Registry, isWidget, isWidgetBaseConstructor, isWidgetFunction, isWNodeFactory } from './Registry';\nimport { auto } from './diff';\nimport RegistryHandler from './RegistryHandler';\nconst EMPTY_ARRAY = [];\nconst nodeOperations = ['focus', 'blur', 'scrollIntoView', 'click'];\nconst NAMESPACE_W3 = 'http://www.w3.org/';\nconst NAMESPACE_SVG = NAMESPACE_W3 + '2000/svg';\nconst NAMESPACE_XLINK = NAMESPACE_W3 + '1999/xlink';\nconst WNODE = '__WNODE_TYPE';\nconst VNODE = '__VNODE_TYPE';\nconst DOMVNODE = '__DOMVNODE_TYPE';\nexport function isTextNode(item) {\n    return item && item.nodeType === 3;\n}\nfunction isLazyDefine(item) {\n    return Boolean(item && item.label);\n}\nfunction isWNodeWrapper(child) {\n    return child && isWNode(child.node);\n}\nfunction isVNodeWrapper(child) {\n    return !!child && isVNode(child.node);\n}\nfunction isVirtualWrapper(child) {\n    return isVNodeWrapper(child) && child.node.tag === 'virtual';\n}\nfunction isBodyWrapper(wrapper) {\n    return isVNodeWrapper(wrapper) && wrapper.node.tag === 'body';\n}\nfunction isAttachApplication(value) {\n    return !!value.type;\n}\nexport function isWNode(child) {\n    return Boolean(child && child !== true && typeof child !== 'string' && child.type === WNODE);\n}\nexport function isVNode(child) {\n    return Boolean(child && child !== true && typeof child !== 'string' && (child.type === VNODE || child.type === DOMVNODE));\n}\nexport function isDomVNode(child) {\n    return Boolean(child && child !== true && typeof child !== 'string' && child.type === DOMVNODE);\n}\nexport function isElementNode(value) {\n    return !!value.tagName;\n}\nfunction toTextVNode(data) {\n    return {\n        tag: '',\n        properties: {},\n        children: undefined,\n        text: `${data}`,\n        type: VNODE\n    };\n}\nfunction updateAttributes(domNode, previousAttributes, attributes, namespace) {\n    const attrNames = Object.keys(attributes);\n    const attrCount = attrNames.length;\n    for (let i = 0; i < attrCount; i++) {\n        const attrName = attrNames[i];\n        const attrValue = attributes[attrName];\n        const previousAttrValue = previousAttributes[attrName];\n        if (attrValue !== previousAttrValue) {\n            updateAttribute(domNode, attrName, attrValue, namespace);\n        }\n    }\n}\nexport function w(widgetConstructorOrNode, properties, children) {\n    if (isWNodeFactory(widgetConstructorOrNode)) {\n        return widgetConstructorOrNode(properties, children);\n    }\n    if (isWNode(widgetConstructorOrNode)) {\n        properties = Object.assign({}, widgetConstructorOrNode.properties, properties);\n        children = children ? children : widgetConstructorOrNode.children;\n        widgetConstructorOrNode = widgetConstructorOrNode.widgetConstructor;\n    }\n    return {\n        children: children || [],\n        widgetConstructor: widgetConstructorOrNode,\n        properties,\n        type: WNODE\n    };\n}\nexport function v(tag, propertiesOrChildren = {}, children = undefined) {\n    let properties = propertiesOrChildren;\n    let deferredPropertiesCallback;\n    if (Array.isArray(propertiesOrChildren)) {\n        children = propertiesOrChildren;\n        properties = {};\n    }\n    if (typeof properties === 'function') {\n        deferredPropertiesCallback = properties;\n        properties = {};\n    }\n    if (isVNode(tag)) {\n        let { classes = [], styles = {} } = properties, newProperties = __rest(properties, [\"classes\", \"styles\"]);\n        let _a = tag.properties, { classes: nodeClasses = [], styles: nodeStyles = {} } = _a, nodeProperties = __rest(_a, [\"classes\", \"styles\"]);\n        nodeClasses = Array.isArray(nodeClasses) ? nodeClasses : [nodeClasses];\n        classes = Array.isArray(classes) ? classes : [classes];\n        styles = Object.assign({}, nodeStyles, styles);\n        properties = Object.assign({}, nodeProperties, newProperties, { classes: [...nodeClasses, ...classes], styles });\n        children = children ? children : tag.children;\n        tag = tag.tag;\n    }\n    return {\n        tag,\n        deferredPropertiesCallback,\n        children,\n        properties,\n        type: VNODE\n    };\n}\n/**\n * Create a VNode for an existing DOM Node.\n */\nexport function dom({ node, attrs = {}, props = {}, on = {}, diffType = 'none', onAttach }, children) {\n    return {\n        tag: isElementNode(node) ? node.tagName.toLowerCase() : '',\n        properties: props,\n        attributes: attrs,\n        events: on,\n        children,\n        type: DOMVNODE,\n        domNode: node,\n        text: isElementNode(node) ? undefined : node.data,\n        diffType,\n        onAttach\n    };\n}\nexport const REGISTRY_ITEM = '__registry_item';\nexport class FromRegistry {\n    constructor() {\n        this.properties = {};\n    }\n}\nFromRegistry.type = REGISTRY_ITEM;\nexport function fromRegistry(tag) {\n    var _a;\n    return _a = class extends FromRegistry {\n            constructor() {\n                super(...arguments);\n                this.properties = {};\n                this.name = tag;\n            }\n        },\n        _a.type = REGISTRY_ITEM,\n        _a;\n}\nfunction spreadChildren(children, child) {\n    if (Array.isArray(child)) {\n        return child.reduce(spreadChildren, children);\n    }\n    else {\n        return [...children, child];\n    }\n}\nexport function tsx(tag, properties = {}, ...children) {\n    children = children.reduce(spreadChildren, []);\n    properties = properties === null ? {} : properties;\n    if (typeof tag === 'string') {\n        return v(tag, properties, children);\n    }\n    else if (tag.type === 'registry' && properties.__autoRegistryItem) {\n        const name = properties.__autoRegistryItem;\n        delete properties.__autoRegistryItem;\n        return w(name, properties, children);\n    }\n    else if (tag.type === REGISTRY_ITEM) {\n        const registryItem = new tag();\n        return w(registryItem.name, properties, children);\n    }\n    else {\n        return w(tag, properties, children);\n    }\n}\nexport function propertiesDiff(current, next, invalidator, ignoreProperties) {\n    const propertyNames = [...Object.keys(current), ...Object.keys(next)];\n    for (let i = 0; i < propertyNames.length; i++) {\n        if (ignoreProperties.indexOf(propertyNames[i]) > -1) {\n            continue;\n        }\n        const result = auto(current[propertyNames[i]], next[propertyNames[i]]);\n        if (result.changed) {\n            invalidator();\n            break;\n        }\n        ignoreProperties.push(propertyNames[i]);\n    }\n}\nfunction buildPreviousProperties(domNode, current) {\n    const { node: { diffType, properties, attributes } } = current;\n    if (!diffType || diffType === 'vdom') {\n        return {\n            properties: current.deferredProperties\n                ? Object.assign({}, current.deferredProperties, current.node.properties) : current.node.properties,\n            attributes: current.node.attributes,\n            events: current.node.events\n        };\n    }\n    else if (diffType === 'none') {\n        return {\n            properties: {},\n            attributes: current.node.attributes ? {} : undefined,\n            events: current.node.events\n        };\n    }\n    let newProperties = {\n        properties: {}\n    };\n    if (attributes) {\n        newProperties.attributes = {};\n        newProperties.events = current.node.events;\n        Object.keys(properties).forEach((propName) => {\n            newProperties.properties[propName] = domNode[propName];\n        });\n        Object.keys(attributes).forEach((attrName) => {\n            newProperties.attributes[attrName] = domNode.getAttribute(attrName);\n        });\n        return newProperties;\n    }\n    newProperties.properties = Object.keys(properties).reduce((props, property) => {\n        props[property] = domNode.getAttribute(property) || domNode[property];\n        return props;\n    }, {});\n    return newProperties;\n}\nfunction checkDistinguishable(wrappers, index, parentWNodeWrapper) {\n    const wrapperToCheck = wrappers[index];\n    if (isVNodeWrapper(wrapperToCheck) && !wrapperToCheck.node.tag) {\n        return;\n    }\n    const { key } = wrapperToCheck.node.properties;\n    let parentName = 'unknown';\n    if (parentWNodeWrapper) {\n        const { node: { widgetConstructor } } = parentWNodeWrapper;\n        parentName = widgetConstructor.name || 'unknown';\n    }\n    if (key === undefined || key === null) {\n        for (let i = 0; i < wrappers.length; i++) {\n            if (i !== index) {\n                const wrapper = wrappers[i];\n                if (same(wrapper, wrapperToCheck)) {\n                    let nodeIdentifier;\n                    if (isWNodeWrapper(wrapper)) {\n                        nodeIdentifier = wrapper.node.widgetConstructor.name || 'unknown';\n                    }\n                    else {\n                        nodeIdentifier = wrapper.node.tag;\n                    }\n                    console.warn(`A widget (${parentName}) has had a child added or removed, but they were not able to uniquely identified. It is recommended to provide a unique 'key' property when using the same widget or element (${nodeIdentifier}) multiple times as siblings`);\n                    break;\n                }\n            }\n        }\n    }\n}\nfunction same(dnode1, dnode2) {\n    if (isVNodeWrapper(dnode1) && isVNodeWrapper(dnode2)) {\n        if (isDomVNode(dnode1.node) && isDomVNode(dnode2.node)) {\n            if (dnode1.node.domNode !== dnode2.node.domNode) {\n                return false;\n            }\n        }\n        if (dnode1.node.tag !== dnode2.node.tag) {\n            return false;\n        }\n        if (dnode1.node.properties.key !== dnode2.node.properties.key) {\n            return false;\n        }\n        return true;\n    }\n    else if (isWNodeWrapper(dnode1) && isWNodeWrapper(dnode2)) {\n        const widgetConstructor1 = dnode1.registryItem || dnode1.node.widgetConstructor;\n        const widgetConstructor2 = dnode2.registryItem || dnode2.node.widgetConstructor;\n        if (dnode1.instance === undefined && typeof widgetConstructor2 === 'string') {\n            return false;\n        }\n        if (widgetConstructor1 !== widgetConstructor2) {\n            return false;\n        }\n        if (dnode1.node.properties.key !== dnode2.node.properties.key) {\n            return false;\n        }\n        return true;\n    }\n    return false;\n}\nfunction findIndexOfChild(children, sameAs, start) {\n    for (let i = start; i < children.length; i++) {\n        if (same(children[i], sameAs)) {\n            return i;\n        }\n    }\n    return -1;\n}\nfunction createClassPropValue(classes = []) {\n    let classNames = '';\n    if (Array.isArray(classes)) {\n        for (let i = 0; i < classes.length; i++) {\n            let className = classes[i];\n            if (className && className !== true) {\n                classNames = classNames ? `${classNames} ${className}` : className;\n            }\n        }\n        return classNames;\n    }\n    if (classes && classes !== true) {\n        classNames = classes;\n    }\n    return classNames;\n}\nfunction updateAttribute(domNode, attrName, attrValue, namespace) {\n    if (namespace === NAMESPACE_SVG && attrName === 'href' && attrValue) {\n        domNode.setAttributeNS(NAMESPACE_XLINK, attrName, attrValue);\n    }\n    else if ((attrName === 'role' && attrValue === '') || attrValue === undefined) {\n        domNode.removeAttribute(attrName);\n    }\n    else {\n        domNode.setAttribute(attrName, attrValue);\n    }\n}\nfunction arrayFrom(arr) {\n    return Array.prototype.slice.call(arr);\n}\nfunction createFactory(callback, middlewares) {\n    const factory = (properties, children) => {\n        if (properties) {\n            const result = w(callback, properties, children);\n            callback.isWidget = true;\n            callback.middlewares = middlewares;\n            return result;\n        }\n        return {\n            middlewares,\n            callback\n        };\n    };\n    factory.isFactory = true;\n    return factory;\n}\nexport function create(middlewares = {}) {\n    function properties() {\n        function returns(callback) {\n            return createFactory(callback, middlewares);\n        }\n        return returns;\n    }\n    function returns(callback) {\n        return createFactory(callback, middlewares);\n    }\n    returns.properties = properties;\n    return returns;\n}\nconst factory = create();\nfunction wrapNodes(renderer) {\n    const result = renderer();\n    const isWNodeWrapper = isWNode(result);\n    const callback = () => {\n        return result;\n    };\n    callback.isWNodeWrapper = isWNodeWrapper;\n    return factory(callback);\n}\nexport const widgetInstanceMap = new WeakMap();\nconst widgetMetaMap = new Map();\nconst requestedDomNodes = new Set();\nlet wrapperId = 0;\nlet metaId = 0;\nfunction addNodeToMap(id, key, node) {\n    const widgetMeta = widgetMetaMap.get(id);\n    if (widgetMeta) {\n        widgetMeta.nodeMap = widgetMeta.nodeMap || new Map();\n        const existingNode = widgetMeta.nodeMap.get(key);\n        if (!existingNode) {\n            widgetMeta.nodeMap.set(key, node);\n        }\n        if (requestedDomNodes.has(`${id}-${key}`)) {\n            widgetMeta.invalidator();\n            requestedDomNodes.delete(`${id}-${key}`);\n        }\n    }\n}\nfunction destroyHandles(destroyMap) {\n    destroyMap.forEach((destroy) => destroy());\n    destroyMap.clear();\n}\nfunction runDiffs(meta, current, next) {\n    meta.customDiffMap = meta.customDiffMap || new Map();\n    if (meta.customDiffMap.size) {\n        meta.customDiffMap.forEach((diffMap) => {\n            diffMap.forEach((diff) => diff(Object.assign({}, current), Object.assign({}, next)));\n        });\n    }\n}\nexport const invalidator = factory(({ id }) => {\n    const [widgetId] = id.split('-');\n    return () => {\n        const widgetMeta = widgetMetaMap.get(widgetId);\n        if (widgetMeta) {\n            return widgetMeta.invalidator();\n        }\n    };\n});\nexport const node = factory(({ id }) => {\n    return {\n        get(key) {\n            const [widgetId] = id.split('-');\n            const widgetMeta = widgetMetaMap.get(widgetId);\n            if (widgetMeta) {\n                widgetMeta.nodeMap = widgetMeta.nodeMap || new Map();\n                const node = widgetMeta.nodeMap.get(key);\n                if (node) {\n                    return node;\n                }\n                requestedDomNodes.add(`${widgetId}-${key}`);\n            }\n            return null;\n        }\n    };\n});\nexport const diffProperty = factory(({ id }) => {\n    return (propertyName, diff) => {\n        const [widgetId] = id.split('-');\n        const widgetMeta = widgetMetaMap.get(widgetId);\n        if (widgetMeta) {\n            widgetMeta.customDiffMap = widgetMeta.customDiffMap || new Map();\n            widgetMeta.customDiffProperties = widgetMeta.customDiffProperties || new Set();\n            const propertyDiffMap = widgetMeta.customDiffMap.get(id) || new Map();\n            if (!propertyDiffMap.has(propertyName)) {\n                propertyDiffMap.set(propertyName, diff);\n                widgetMeta.customDiffProperties.add(propertyName);\n            }\n            widgetMeta.customDiffMap.set(id, propertyDiffMap);\n        }\n    };\n});\nexport const destroy = factory(({ id }) => {\n    return (destroyFunction) => {\n        const [widgetId] = id.split('-');\n        const widgetMeta = widgetMetaMap.get(widgetId);\n        if (widgetMeta) {\n            widgetMeta.destroyMap = widgetMeta.destroyMap || new Map();\n            if (!widgetMeta.destroyMap.has(id)) {\n                widgetMeta.destroyMap.set(id, destroyFunction);\n            }\n        }\n    };\n});\nexport const getRegistry = factory(({ id }) => {\n    const [widgetId] = id.split('-');\n    return () => {\n        const widgetMeta = widgetMetaMap.get(widgetId);\n        if (widgetMeta) {\n            if (!widgetMeta.registryHandler) {\n                widgetMeta.registryHandler = new RegistryHandler();\n                widgetMeta.registryHandler.base = widgetMeta.registry;\n                widgetMeta.registryHandler.on('invalidate', widgetMeta.invalidator);\n            }\n            widgetMeta.registryHandler = widgetMeta.registryHandler || new RegistryHandler();\n            return widgetMeta.registryHandler;\n        }\n        return null;\n    };\n});\nexport const defer = factory(({ id }) => {\n    const [widgetId] = id.split('-');\n    let isDeferred = false;\n    return {\n        pause() {\n            const widgetMeta = widgetMetaMap.get(widgetId);\n            if (!isDeferred && widgetMeta) {\n                widgetMeta.deferRefs = widgetMeta.deferRefs + 1;\n                isDeferred = true;\n            }\n        },\n        resume() {\n            const widgetMeta = widgetMetaMap.get(widgetId);\n            if (isDeferred && widgetMeta) {\n                widgetMeta.deferRefs = widgetMeta.deferRefs - 1;\n                isDeferred = false;\n            }\n        }\n    };\n});\nexport function renderer(renderer) {\n    let _mountOptions = {\n        sync: false,\n        merge: true,\n        transition: undefined,\n        domNode: global.document.body,\n        registry: new Registry()\n    };\n    let _invalidationQueue = [];\n    let _processQueue = [];\n    let _deferredProcessQueue = [];\n    let _applicationQueue = [];\n    let _eventMap = new WeakMap();\n    let _idToWrapperMap = new Map();\n    let _wrapperSiblingMap = new WeakMap();\n    let _idToChildrenWrappers = new Map();\n    let _insertBeforeMap = new WeakMap();\n    let _nodeToWrapperMap = new WeakMap();\n    let _renderScheduled;\n    let _idleCallbacks = [];\n    let _deferredRenderCallbacks = [];\n    let parentInvalidate;\n    let _allMergedNodes = [];\n    function nodeOperation(propName, propValue, previousValue, domNode) {\n        let result = propValue && !previousValue;\n        if (typeof propValue === 'function') {\n            result = propValue();\n        }\n        if (result === true) {\n            _deferredRenderCallbacks.push(() => {\n                domNode[propName]();\n            });\n        }\n    }\n    function updateEvent(domNode, eventName, currentValue, previousValue) {\n        if (previousValue) {\n            const previousEvent = _eventMap.get(previousValue);\n            previousEvent && domNode.removeEventListener(eventName, previousEvent);\n        }\n        let callback = currentValue;\n        if (eventName === 'input') {\n            callback = function (evt) {\n                currentValue.call(this, evt);\n                evt.target['oninput-value'] = evt.target.value;\n            };\n        }\n        domNode.addEventListener(eventName, callback);\n        _eventMap.set(currentValue, callback);\n    }\n    function removeOrphanedEvents(domNode, previousProperties, properties, onlyEvents = false) {\n        Object.keys(previousProperties).forEach((propName) => {\n            const isEvent = propName.substr(0, 2) === 'on' || onlyEvents;\n            const eventName = onlyEvents ? propName : propName.substr(2);\n            if (isEvent && !properties[propName]) {\n                const eventCallback = _eventMap.get(previousProperties[propName]);\n                if (eventCallback) {\n                    domNode.removeEventListener(eventName, eventCallback);\n                }\n            }\n        });\n    }\n    function resolveRegistryItem(wrapper, instance, id) {\n        if (!isWidget(wrapper.node.widgetConstructor)) {\n            const owningNode = _nodeToWrapperMap.get(wrapper.node);\n            if (owningNode) {\n                if (owningNode.instance) {\n                    instance = owningNode.instance;\n                }\n                else {\n                    id = owningNode.id;\n                }\n            }\n            let registry;\n            if (instance) {\n                const instanceData = widgetInstanceMap.get(instance);\n                if (instanceData) {\n                    registry = instanceData.registry;\n                }\n            }\n            else if (id !== undefined) {\n                const widgetMeta = widgetMetaMap.get(id);\n                if (widgetMeta) {\n                    if (!widgetMeta.registryHandler) {\n                        widgetMeta.registryHandler = new RegistryHandler();\n                        widgetMeta.registryHandler.base = widgetMeta.registry;\n                        widgetMeta.registryHandler.on('invalidate', widgetMeta.invalidator);\n                    }\n                    registry = widgetMeta.registryHandler;\n                }\n            }\n            if (registry) {\n                let registryLabel;\n                if (isLazyDefine(wrapper.node.widgetConstructor)) {\n                    const { label, registryItem } = wrapper.node.widgetConstructor;\n                    if (!registry.has(label)) {\n                        registry.define(label, registryItem);\n                    }\n                    registryLabel = label;\n                }\n                else {\n                    registryLabel = wrapper.node.widgetConstructor;\n                }\n                let item = registry.get(registryLabel);\n                if (isWNodeFactory(item)) {\n                    const node = item(wrapper.node.properties, wrapper.node.children);\n                    if (isWidgetFunction(node.widgetConstructor)) {\n                        wrapper.registryItem = node.widgetConstructor;\n                    }\n                }\n                else {\n                    wrapper.registryItem = item;\n                }\n            }\n        }\n    }\n    function mapNodeToInstance(nodes, wrapper) {\n        while (nodes.length) {\n            let node = nodes.pop();\n            if (isWNode(node) || isVNode(node)) {\n                if (!_nodeToWrapperMap.has(node)) {\n                    _nodeToWrapperMap.set(node, wrapper);\n                    if (node.children && node.children.length) {\n                        nodes = [...nodes, ...node.children];\n                    }\n                }\n            }\n        }\n    }\n    function renderedToWrapper(rendered, parent, currentParent) {\n        const { requiresInsertBefore, hasPreviousSiblings, namespace, depth } = parent;\n        const wrappedRendered = [];\n        const hasParentWNode = isWNodeWrapper(parent);\n        const hasVirtualParentNode = isVirtualWrapper(parent);\n        const currentParentChildren = (isVNodeWrapper(currentParent) && _idToChildrenWrappers.get(currentParent.id)) || [];\n        const hasCurrentParentChildren = currentParentChildren.length > 0;\n        const insertBefore = ((requiresInsertBefore || hasPreviousSiblings !== false) && (hasParentWNode || hasVirtualParentNode)) ||\n            (hasCurrentParentChildren && rendered.length > 1);\n        let previousItem;\n        if (isWNodeWrapper(parent) && rendered.length) {\n            mapNodeToInstance([...rendered], parent);\n        }\n        for (let i = 0; i < rendered.length; i++) {\n            let renderedItem = rendered[i];\n            if (!renderedItem || renderedItem === true) {\n                continue;\n            }\n            if (typeof renderedItem === 'string') {\n                renderedItem = toTextVNode(renderedItem);\n            }\n            const owningNode = _nodeToWrapperMap.get(renderedItem);\n            const wrapper = {\n                node: renderedItem,\n                depth: depth + 1,\n                order: i,\n                parentId: parent.id,\n                requiresInsertBefore: insertBefore,\n                hasParentWNode,\n                namespace: namespace\n            };\n            if (isVNode(renderedItem)) {\n                if (renderedItem.deferredPropertiesCallback) {\n                    wrapper.deferredProperties = renderedItem.deferredPropertiesCallback(false);\n                }\n                if (renderedItem.properties.exitAnimation) {\n                    parent.hasAnimations = true;\n                    let nextParent = _idToWrapperMap.get(parent.parentId);\n                    while (nextParent) {\n                        if (nextParent.hasAnimations) {\n                            break;\n                        }\n                        nextParent.hasAnimations = true;\n                        nextParent = _idToWrapperMap.get(nextParent.parentId);\n                    }\n                }\n            }\n            if (owningNode) {\n                wrapper.owningId = owningNode.id;\n            }\n            if (isWNode(renderedItem)) {\n                resolveRegistryItem(wrapper, parent.instance, parent.id);\n            }\n            if (previousItem) {\n                _wrapperSiblingMap.set(previousItem, wrapper);\n            }\n            wrappedRendered.push(wrapper);\n            previousItem = wrapper;\n        }\n        return wrappedRendered;\n    }\n    function findParentDomNode(currentNode) {\n        let parentDomNode;\n        let parentWrapper = _idToWrapperMap.get(currentNode.parentId);\n        while (!parentDomNode && parentWrapper) {\n            if (!parentDomNode &&\n                isVNodeWrapper(parentWrapper) &&\n                !isVirtualWrapper(parentWrapper) &&\n                parentWrapper.domNode) {\n                parentDomNode = parentWrapper.domNode;\n            }\n            parentWrapper = _idToWrapperMap.get(parentWrapper.parentId);\n        }\n        return parentDomNode;\n    }\n    function runDeferredProperties(next) {\n        const { deferredPropertiesCallback } = next.node;\n        if (deferredPropertiesCallback) {\n            const properties = next.node.properties;\n            _deferredRenderCallbacks.push(() => {\n                if (_idToWrapperMap.has(next.owningId)) {\n                    const deferredProperties = next.deferredProperties;\n                    next.deferredProperties = deferredPropertiesCallback(true);\n                    processProperties(next, {\n                        properties: Object.assign({}, deferredProperties, properties)\n                    });\n                }\n            });\n        }\n    }\n    function findInsertBefore(next) {\n        let insertBefore = null;\n        let searchNode = next;\n        while (!insertBefore) {\n            const nextSibling = _wrapperSiblingMap.get(searchNode);\n            if (nextSibling) {\n                let domNode = nextSibling.domNode;\n                if ((isWNodeWrapper(nextSibling) || isVirtualWrapper(nextSibling)) && nextSibling.childDomWrapperId) {\n                    const childWrapper = _idToWrapperMap.get(nextSibling.childDomWrapperId);\n                    if (childWrapper) {\n                        domNode = childWrapper.domNode;\n                    }\n                }\n                if (domNode && domNode.parentNode) {\n                    insertBefore = domNode;\n                    break;\n                }\n                searchNode = nextSibling;\n                continue;\n            }\n            searchNode = searchNode && _idToWrapperMap.get(searchNode.parentId);\n            if (!searchNode || (isVNodeWrapper(searchNode) && !isVirtualWrapper(searchNode))) {\n                break;\n            }\n        }\n        return insertBefore;\n    }\n    function setValue(domNode, propValue, previousValue) {\n        const domValue = domNode.value;\n        const onInputValue = domNode['oninput-value'];\n        const onSelectValue = domNode['select-value'];\n        if (onSelectValue && domValue !== onSelectValue) {\n            domNode.value = onSelectValue;\n            if (domNode.value === onSelectValue) {\n                domNode['select-value'] = undefined;\n            }\n        }\n        else if ((onInputValue && domValue === onInputValue) || propValue !== previousValue) {\n            domNode.value = propValue;\n            domNode['oninput-value'] = undefined;\n        }\n    }\n    function setProperties(domNode, currentProperties = {}, nextWrapper, includesEventsAndAttributes = true) {\n        const properties = nextWrapper.deferredProperties\n            ? Object.assign({}, nextWrapper.deferredProperties, nextWrapper.node.properties) : nextWrapper.node.properties;\n        const propNames = Object.keys(properties);\n        const propCount = propNames.length;\n        if (propNames.indexOf('classes') === -1 && currentProperties.classes) {\n            domNode.removeAttribute('class');\n        }\n        includesEventsAndAttributes && removeOrphanedEvents(domNode, currentProperties, properties);\n        for (let i = 0; i < propCount; i++) {\n            const propName = propNames[i];\n            let propValue = properties[propName];\n            const previousValue = currentProperties[propName];\n            if (propName === 'classes') {\n                const previousClassString = createClassPropValue(previousValue);\n                let currentClassString = createClassPropValue(propValue);\n                if (previousClassString !== currentClassString) {\n                    if (currentClassString) {\n                        if (nextWrapper.merged) {\n                            const domClasses = (domNode.getAttribute('class') || '').split(' ');\n                            for (let i = 0; i < domClasses.length; i++) {\n                                if (currentClassString.indexOf(domClasses[i]) === -1) {\n                                    currentClassString = `${domClasses[i]} ${currentClassString}`;\n                                }\n                            }\n                        }\n                        domNode.setAttribute('class', currentClassString);\n                    }\n                    else {\n                        domNode.removeAttribute('class');\n                    }\n                }\n            }\n            else if (nodeOperations.indexOf(propName) !== -1) {\n                nodeOperation(propName, propValue, previousValue, domNode);\n            }\n            else if (propName === 'styles') {\n                const styleNames = Object.keys(propValue);\n                const styleCount = styleNames.length;\n                for (let j = 0; j < styleCount; j++) {\n                    const styleName = styleNames[j];\n                    const newStyleValue = propValue[styleName];\n                    const oldStyleValue = previousValue && previousValue[styleName];\n                    if (newStyleValue === oldStyleValue) {\n                        continue;\n                    }\n                    domNode.style[styleName] = newStyleValue || '';\n                }\n            }\n            else {\n                if (!propValue && typeof previousValue === 'string') {\n                    propValue = '';\n                }\n                if (propName === 'value') {\n                    if (domNode.tagName === 'SELECT') {\n                        domNode['select-value'] = propValue;\n                    }\n                    setValue(domNode, propValue, previousValue);\n                }\n                else if (propName !== 'key' && propValue !== previousValue) {\n                    const type = typeof propValue;\n                    if (type === 'function' && propName.lastIndexOf('on', 0) === 0 && includesEventsAndAttributes) {\n                        updateEvent(domNode, propName.substr(2), propValue, previousValue);\n                    }\n                    else if (type === 'string' && propName !== 'innerHTML' && includesEventsAndAttributes) {\n                        updateAttribute(domNode, propName, propValue, nextWrapper.namespace);\n                    }\n                    else if (propName === 'scrollLeft' || propName === 'scrollTop') {\n                        if (domNode[propName] !== propValue) {\n                            domNode[propName] = propValue;\n                        }\n                    }\n                    else {\n                        domNode[propName] = propValue;\n                    }\n                }\n            }\n        }\n    }\n    function runDeferredRenderCallbacks() {\n        const { sync } = _mountOptions;\n        const callbacks = _deferredRenderCallbacks;\n        _deferredRenderCallbacks = [];\n        if (callbacks.length) {\n            const run = () => {\n                let callback;\n                while ((callback = callbacks.shift())) {\n                    callback();\n                }\n            };\n            if (sync) {\n                run();\n            }\n            else {\n                global.requestAnimationFrame(run);\n            }\n        }\n    }\n    function runAfterRenderCallbacks() {\n        const { sync } = _mountOptions;\n        const callbacks = _idleCallbacks;\n        _idleCallbacks = [];\n        if (callbacks.length) {\n            const run = () => {\n                let callback;\n                while ((callback = callbacks.shift())) {\n                    callback();\n                }\n            };\n            if (sync) {\n                run();\n            }\n            else {\n                if (global.requestIdleCallback) {\n                    global.requestIdleCallback(run);\n                }\n                else {\n                    setTimeout(run);\n                }\n            }\n        }\n    }\n    function processProperties(next, previousProperties) {\n        if (next.node.attributes && next.node.events) {\n            updateAttributes(next.domNode, previousProperties.attributes || {}, next.node.attributes, next.namespace);\n            setProperties(next.domNode, previousProperties.properties, next, false);\n            const events = next.node.events || {};\n            if (previousProperties.events) {\n                removeOrphanedEvents(next.domNode, previousProperties.events || {}, next.node.events, true);\n            }\n            previousProperties.events = previousProperties.events || {};\n            Object.keys(events).forEach((event) => {\n                updateEvent(next.domNode, event, events[event], previousProperties.events[event]);\n            });\n        }\n        else {\n            setProperties(next.domNode, previousProperties.properties, next);\n        }\n    }\n    function mount(mountOptions = {}) {\n        _mountOptions = Object.assign({}, _mountOptions, mountOptions);\n        const { domNode } = _mountOptions;\n        const renderResult = wrapNodes(renderer)({});\n        const nextWrapper = {\n            id: `${wrapperId++}`,\n            node: renderResult,\n            order: 0,\n            depth: 1,\n            owningId: '-1',\n            parentId: '-1',\n            siblingId: '-1',\n            properties: {}\n        };\n        _idToWrapperMap.set('-1', {\n            id: `-1`,\n            depth: 0,\n            order: 0,\n            owningId: '',\n            domNode,\n            node: v('fake'),\n            parentId: '-1'\n        });\n        _processQueue.push({\n            current: [],\n            next: [nextWrapper],\n            meta: { mergeNodes: arrayFrom(domNode.childNodes) }\n        });\n        _runProcessQueue();\n        _runDomInstructionQueue();\n        _cleanUpMergedNodes();\n        _insertBeforeMap = undefined;\n        _runCallbacks();\n    }\n    function invalidate() {\n        parentInvalidate && parentInvalidate();\n    }\n    function _schedule() {\n        const { sync } = _mountOptions;\n        if (sync) {\n            _runInvalidationQueue();\n        }\n        else if (!_renderScheduled) {\n            _renderScheduled = global.requestAnimationFrame(() => {\n                _runInvalidationQueue();\n            });\n        }\n    }\n    function getWNodeWrapper(id) {\n        const wrapper = _idToWrapperMap.get(id);\n        if (wrapper && isWNodeWrapper(wrapper)) {\n            return wrapper;\n        }\n    }\n    function _runInvalidationQueue() {\n        _renderScheduled = undefined;\n        let invalidationQueue = [..._invalidationQueue];\n        const previouslyRendered = [];\n        _invalidationQueue = [];\n        invalidationQueue.sort((a, b) => {\n            let result = b.depth - a.depth;\n            if (result === 0) {\n                result = b.order - a.order;\n            }\n            return result;\n        });\n        if (_deferredProcessQueue.length) {\n            _processQueue = [..._deferredProcessQueue];\n            _deferredProcessQueue = [];\n            _runProcessQueue();\n            if (_deferredProcessQueue.length) {\n                _invalidationQueue = [...invalidationQueue];\n                invalidationQueue = [];\n            }\n        }\n        let item;\n        while ((item = invalidationQueue.pop())) {\n            let { id } = item;\n            const current = getWNodeWrapper(id);\n            if (!current || previouslyRendered.indexOf(id) !== -1 || !_idToWrapperMap.has(current.parentId)) {\n                continue;\n            }\n            previouslyRendered.push(id);\n            const sibling = _wrapperSiblingMap.get(current);\n            const next = {\n                node: {\n                    type: WNODE,\n                    widgetConstructor: current.node.widgetConstructor,\n                    properties: current.properties || {},\n                    children: current.node.children || []\n                },\n                instance: current.instance,\n                id: current.id,\n                properties: current.properties,\n                depth: current.depth,\n                order: current.order,\n                owningId: current.owningId,\n                parentId: current.parentId,\n                registryItem: current.registryItem\n            };\n            sibling && _wrapperSiblingMap.set(next, sibling);\n            const result = _updateWidget({ current, next });\n            if (result && result.item) {\n                _processQueue.push(result.item);\n                _idToWrapperMap.set(id, next);\n                _runProcessQueue();\n            }\n        }\n        _runDomInstructionQueue();\n        _cleanUpMergedNodes();\n        _runCallbacks();\n    }\n    function _cleanUpMergedNodes() {\n        if (_deferredProcessQueue.length === 0) {\n            let mergedNode;\n            while ((mergedNode = _allMergedNodes.pop())) {\n                mergedNode.parentNode && mergedNode.parentNode.removeChild(mergedNode);\n            }\n            _mountOptions.merge = false;\n        }\n    }\n    function _runProcessQueue() {\n        let item;\n        while ((item = _processQueue.pop())) {\n            if (isAttachApplication(item)) {\n                item.type === 'attach' && setDomNodeOnParentWrapper(item.id);\n                if (item.instance) {\n                    _applicationQueue.push(item);\n                }\n            }\n            else {\n                const { current, next, meta } = item;\n                _process(current || EMPTY_ARRAY, next || EMPTY_ARRAY, meta);\n            }\n        }\n    }\n    function _runDomInstructionQueue() {\n        _applicationQueue.reverse();\n        let item;\n        while ((item = _applicationQueue.pop())) {\n            if (item.type === 'create') {\n                const { parentDomNode, next, next: { domNode, merged, requiresInsertBefore, node } } = item;\n                processProperties(next, { properties: {} });\n                runDeferredProperties(next);\n                if (!merged) {\n                    let insertBefore;\n                    if (requiresInsertBefore) {\n                        insertBefore = findInsertBefore(next);\n                    }\n                    else if (_insertBeforeMap) {\n                        insertBefore = _insertBeforeMap.get(next);\n                    }\n                    parentDomNode.insertBefore(domNode, insertBefore);\n                    if (isDomVNode(next.node) && next.node.onAttach) {\n                        next.node.onAttach();\n                    }\n                }\n                if (domNode.tagName === 'OPTION' && domNode.parentElement) {\n                    setValue(domNode.parentElement);\n                }\n                const { enterAnimation, enterAnimationActive } = node.properties;\n                if (_mountOptions.transition && enterAnimation && enterAnimation !== true) {\n                    _mountOptions.transition.enter(domNode, enterAnimation, enterAnimationActive);\n                }\n                const owningWrapper = _nodeToWrapperMap.get(next.node);\n                if (owningWrapper && node.properties.key != null) {\n                    if (owningWrapper.instance) {\n                        const instanceData = widgetInstanceMap.get(owningWrapper.instance);\n                        instanceData && instanceData.nodeHandler.add(domNode, `${node.properties.key}`);\n                    }\n                    else {\n                        addNodeToMap(owningWrapper.id, node.properties.key, domNode);\n                    }\n                }\n                item.next.inserted = true;\n            }\n            else if (item.type === 'update') {\n                const { next, next: { domNode }, current, current: { domNode: currentDomNode } } = item;\n                if (isTextNode(domNode) && isTextNode(currentDomNode) && domNode !== currentDomNode) {\n                    currentDomNode.parentNode && currentDomNode.parentNode.replaceChild(domNode, currentDomNode);\n                }\n                else {\n                    const previousProperties = buildPreviousProperties(domNode, current);\n                    processProperties(next, previousProperties);\n                    runDeferredProperties(next);\n                }\n            }\n            else if (item.type === 'delete') {\n                const { current } = item;\n                const { exitAnimation, exitAnimationActive } = current.node.properties;\n                if (_mountOptions.transition && exitAnimation && exitAnimation !== true) {\n                    _mountOptions.transition.exit(current.domNode, exitAnimation, exitAnimationActive);\n                }\n                else {\n                    current.domNode.parentNode.removeChild(current.domNode);\n                }\n            }\n            else if (item.type === 'attach') {\n                const { instance, attached } = item;\n                const instanceData = widgetInstanceMap.get(instance);\n                if (instanceData) {\n                    instanceData.nodeHandler.addRoot();\n                    attached && instanceData.onAttach();\n                }\n            }\n            else if (item.type === 'detach') {\n                if (item.current.instance) {\n                    const instanceData = widgetInstanceMap.get(item.current.instance);\n                    instanceData && instanceData.onDetach();\n                }\n                item.current.instance = undefined;\n            }\n        }\n        if (_deferredProcessQueue.length === 0) {\n            _nodeToWrapperMap = new WeakMap();\n        }\n    }\n    function _runCallbacks() {\n        runAfterRenderCallbacks();\n        runDeferredRenderCallbacks();\n    }\n    function _processMergeNodes(next, mergeNodes) {\n        const { merge } = _mountOptions;\n        if (merge && mergeNodes.length) {\n            if (isVNodeWrapper(next)) {\n                let { node: { tag } } = next;\n                for (let i = 0; i < mergeNodes.length; i++) {\n                    const domElement = mergeNodes[i];\n                    const tagName = domElement.tagName || '';\n                    if (tag.toUpperCase() === tagName.toUpperCase()) {\n                        const mergeNodeIndex = _allMergedNodes.indexOf(domElement);\n                        if (mergeNodeIndex !== -1) {\n                            _allMergedNodes.splice(mergeNodeIndex, 1);\n                        }\n                        mergeNodes.splice(i, 1);\n                        next.domNode = domElement;\n                        break;\n                    }\n                }\n            }\n            else {\n                next.mergeNodes = mergeNodes;\n            }\n        }\n    }\n    function registerDistinguishableCallback(childNodes, index) {\n        _idleCallbacks.push(() => {\n            const parentWNodeWrapper = getWNodeWrapper(childNodes[index].owningId);\n            checkDistinguishable(childNodes, index, parentWNodeWrapper);\n        });\n    }\n    function createKeyMap(wrappers) {\n        const keys = [];\n        for (let i = 0; i < wrappers.length; i++) {\n            const wrapper = wrappers[i];\n            if (wrapper.node.properties.key != null) {\n                keys.push(wrapper.node.properties.key);\n            }\n            else {\n                return false;\n            }\n        }\n        return keys;\n    }\n    function _process(current, next, meta = {}) {\n        let { mergeNodes = [], oldIndex = 0, newIndex = 0 } = meta;\n        const currentLength = current.length;\n        const nextLength = next.length;\n        const hasPreviousSiblings = currentLength > 1 || (currentLength > 0 && currentLength < nextLength);\n        let instructions = [];\n        let replace = false;\n        if (oldIndex === 0 && newIndex === 0 && currentLength) {\n            const currentKeys = createKeyMap(current);\n            if (currentKeys) {\n                const nextKeys = createKeyMap(next);\n                if (nextKeys) {\n                    for (let i = 0; i < currentKeys.length; i++) {\n                        if (nextKeys.indexOf(currentKeys[i]) !== -1) {\n                            instructions = [];\n                            replace = false;\n                            break;\n                        }\n                        replace = true;\n                        instructions.push({ current: current[i], next: undefined });\n                    }\n                }\n            }\n        }\n        if (replace || (currentLength === 0 && !_mountOptions.merge)) {\n            for (let i = 0; i < next.length; i++) {\n                instructions.push({ current: undefined, next: next[i] });\n            }\n        }\n        else {\n            if (newIndex < nextLength) {\n                let currentWrapper = oldIndex < currentLength ? current[oldIndex] : undefined;\n                const nextWrapper = next[newIndex];\n                nextWrapper.hasPreviousSiblings = hasPreviousSiblings;\n                _processMergeNodes(nextWrapper, mergeNodes);\n                if (currentWrapper && same(currentWrapper, nextWrapper)) {\n                    oldIndex++;\n                    newIndex++;\n                    if (isVNodeWrapper(currentWrapper) && isVNodeWrapper(nextWrapper)) {\n                        nextWrapper.inserted = currentWrapper.inserted;\n                    }\n                    instructions.push({ current: currentWrapper, next: nextWrapper });\n                }\n                else if (!currentWrapper || findIndexOfChild(current, nextWrapper, oldIndex + 1) === -1) {\n                    has('dojo-debug') && current.length && registerDistinguishableCallback(next, newIndex);\n                    instructions.push({ current: undefined, next: nextWrapper });\n                    newIndex++;\n                }\n                else if (findIndexOfChild(next, currentWrapper, newIndex + 1) === -1) {\n                    has('dojo-debug') && registerDistinguishableCallback(current, oldIndex);\n                    instructions.push({ current: currentWrapper, next: undefined });\n                    oldIndex++;\n                }\n                else {\n                    has('dojo-debug') && registerDistinguishableCallback(next, newIndex);\n                    has('dojo-debug') && registerDistinguishableCallback(current, oldIndex);\n                    instructions.push({ current: currentWrapper, next: undefined });\n                    instructions.push({ current: undefined, next: nextWrapper });\n                    oldIndex++;\n                    newIndex++;\n                }\n            }\n            if (newIndex < nextLength) {\n                _processQueue.push({ current, next, meta: { mergeNodes, oldIndex, newIndex } });\n            }\n            if (currentLength > oldIndex && newIndex >= nextLength) {\n                for (let i = oldIndex; i < currentLength; i++) {\n                    has('dojo-debug') && registerDistinguishableCallback(current, i);\n                    instructions.push({ current: current[i], next: undefined });\n                }\n            }\n        }\n        for (let i = 0; i < instructions.length; i++) {\n            const result = _processOne(instructions[i]);\n            if (result === false) {\n                if (_mountOptions.merge && mergeNodes.length) {\n                    if (newIndex < nextLength) {\n                        _processQueue.pop();\n                    }\n                    _processQueue.push({ next, current, meta });\n                    _deferredProcessQueue = _processQueue;\n                    _processQueue = [];\n                    break;\n                }\n                continue;\n            }\n            const { widget, item, dom } = result;\n            widget && _processQueue.push(widget);\n            item && _processQueue.push(item);\n            dom && _applicationQueue.push(dom);\n        }\n    }\n    function _processOne({ current, next }) {\n        if (current !== next) {\n            if (!current && next) {\n                if (isVNodeWrapper(next)) {\n                    return _createDom({ next });\n                }\n                else {\n                    return _createWidget({ next });\n                }\n            }\n            else if (current && next) {\n                if (isVNodeWrapper(current) && isVNodeWrapper(next)) {\n                    return _updateDom({ current, next });\n                }\n                else if (isWNodeWrapper(current) && isWNodeWrapper(next)) {\n                    return _updateWidget({ current, next });\n                }\n            }\n            else if (current && !next) {\n                if (isVNodeWrapper(current)) {\n                    return _removeDom({ current });\n                }\n                else if (isWNodeWrapper(current)) {\n                    return _removeWidget({ current });\n                }\n            }\n        }\n        return {};\n    }\n    function resolveMiddleware(middlewares, id) {\n        const keys = Object.keys(middlewares);\n        const results = {};\n        const uniqueId = `${id}-${metaId++}`;\n        for (let i = 0; i < keys.length; i++) {\n            const middleware = middlewares[keys[i]]();\n            const payload = {\n                id: uniqueId,\n                properties: () => {\n                    const widgetMeta = widgetMetaMap.get(id);\n                    if (widgetMeta) {\n                        return Object.assign({}, widgetMeta.properties);\n                    }\n                    return {};\n                },\n                children: () => {\n                    const widgetMeta = widgetMetaMap.get(id);\n                    if (widgetMeta) {\n                        return widgetMeta.children;\n                    }\n                    return [];\n                }\n            };\n            if (middleware.middlewares) {\n                const resolvedMiddleware = resolveMiddleware(middleware.middlewares, id);\n                payload.middleware = resolvedMiddleware;\n                results[keys[i]] = middleware.callback(payload);\n            }\n            else {\n                results[keys[i]] = middleware.callback(payload);\n            }\n        }\n        return results;\n    }\n    function _createWidget({ next }) {\n        let { node: { widgetConstructor } } = next;\n        let { registry } = _mountOptions;\n        let Constructor = next.registryItem || widgetConstructor;\n        if (!isWidget(Constructor)) {\n            resolveRegistryItem(next);\n            if (!next.registryItem) {\n                return false;\n            }\n            Constructor = next.registryItem;\n        }\n        let rendered;\n        let invalidate;\n        next.properties = next.node.properties;\n        next.id = next.id || `${wrapperId++}`;\n        _idToWrapperMap.set(next.id, next);\n        const { id, depth, order } = next;\n        if (!isWidgetBaseConstructor(Constructor)) {\n            let widgetMeta = widgetMetaMap.get(id);\n            if (!widgetMeta) {\n                invalidate = () => {\n                    const widgetMeta = widgetMetaMap.get(id);\n                    if (widgetMeta) {\n                        widgetMeta.dirty = true;\n                        if (!widgetMeta.rendering && _idToWrapperMap.has(id)) {\n                            _invalidationQueue.push({ id, depth, order });\n                            _schedule();\n                        }\n                    }\n                };\n                widgetMeta = {\n                    dirty: false,\n                    invalidator: invalidate,\n                    properties: next.node.properties,\n                    children: next.node.children,\n                    deferRefs: 0,\n                    rendering: true,\n                    registry: _mountOptions.registry\n                };\n                widgetMetaMap.set(next.id, widgetMeta);\n                widgetMeta.middleware = Constructor.middlewares\n                    ? resolveMiddleware(Constructor.middlewares, id)\n                    : {};\n            }\n            else {\n                invalidate = widgetMeta.invalidator;\n            }\n            rendered = Constructor({\n                id,\n                properties: () => next.node.properties,\n                children: () => next.node.children,\n                middleware: widgetMeta.middleware\n            });\n            widgetMeta.rendering = false;\n            if (widgetMeta.deferRefs > 0) {\n                return false;\n            }\n        }\n        else {\n            let instance = new Constructor();\n            instance.registry.base = registry;\n            const instanceData = widgetInstanceMap.get(instance);\n            invalidate = () => {\n                instanceData.dirty = true;\n                if (!instanceData.rendering && _idToWrapperMap.has(id)) {\n                    _invalidationQueue.push({ id, depth, order });\n                    _schedule();\n                }\n            };\n            instanceData.invalidate = invalidate;\n            instanceData.rendering = true;\n            instance.__setProperties__(next.node.properties);\n            instance.__setChildren__(next.node.children);\n            next.instance = instance;\n            rendered = instance.__render__();\n            instanceData.rendering = false;\n        }\n        let children;\n        if (rendered) {\n            rendered = Array.isArray(rendered) ? rendered : [rendered];\n            children = renderedToWrapper(rendered, next, null);\n            _idToChildrenWrappers.set(id, children);\n        }\n        if (!parentInvalidate && !Constructor.isWNodeWrapper) {\n            parentInvalidate = invalidate;\n        }\n        return {\n            item: {\n                next: children,\n                meta: { mergeNodes: next.mergeNodes }\n            },\n            widget: { type: 'attach', instance: next.instance, id, attached: true }\n        };\n    }\n    function _updateWidget({ current, next }) {\n        current = getWNodeWrapper(current.id) || current;\n        const { instance, domNode, hasAnimations } = current;\n        let { node: { widgetConstructor } } = next;\n        const Constructor = next.registryItem || widgetConstructor;\n        if (!isWidget(Constructor)) {\n            return {};\n        }\n        let rendered;\n        let processResult = {};\n        let didRender = false;\n        let currentChildren = _idToChildrenWrappers.get(current.id);\n        next.hasAnimations = hasAnimations;\n        next.id = current.id;\n        next.childDomWrapperId = current.childDomWrapperId;\n        next.properties = next.node.properties;\n        _wrapperSiblingMap.delete(current);\n        if (domNode && domNode.parentNode) {\n            next.domNode = domNode;\n        }\n        if (!isWidgetBaseConstructor(Constructor)) {\n            const widgetMeta = widgetMetaMap.get(next.id);\n            if (widgetMeta) {\n                widgetMeta.properties = next.properties;\n                widgetMeta.rendering = true;\n                runDiffs(widgetMeta, current.properties, next.properties);\n                if (current.node.children.length > 0 || next.node.children.length > 0) {\n                    widgetMeta.dirty = true;\n                }\n                if (!widgetMeta.dirty) {\n                    propertiesDiff(current.properties, next.properties, () => {\n                        widgetMeta.dirty = true;\n                    }, widgetMeta.customDiffProperties ? [...widgetMeta.customDiffProperties.values()] : []);\n                }\n                if (widgetMeta.dirty) {\n                    _idToChildrenWrappers.delete(next.id);\n                    didRender = true;\n                    widgetMeta.dirty = false;\n                    rendered = Constructor({\n                        id: next.id,\n                        properties: () => next.node.properties,\n                        children: () => next.node.children,\n                        middleware: widgetMeta.middleware\n                    });\n                    if (widgetMeta.deferRefs > 0) {\n                        rendered = null;\n                    }\n                }\n                widgetMeta.rendering = false;\n            }\n        }\n        else {\n            const instanceData = widgetInstanceMap.get(instance);\n            next.instance = instance;\n            instanceData.rendering = true;\n            instance.__setProperties__(next.node.properties);\n            instance.__setChildren__(next.node.children);\n            if (instanceData.dirty) {\n                didRender = true;\n                _idToChildrenWrappers.delete(next.id);\n                rendered = instance.__render__();\n            }\n            instanceData.rendering = false;\n        }\n        _idToWrapperMap.set(next.id, next);\n        processResult.widget = { type: 'attach', instance, id: next.id, attached: false };\n        let children;\n        if (rendered) {\n            rendered = Array.isArray(rendered) ? rendered : [rendered];\n            children = renderedToWrapper(rendered, next, current);\n            _idToChildrenWrappers.set(next.id, children);\n        }\n        if (didRender) {\n            processResult.item = {\n                current: currentChildren,\n                next: children,\n                meta: {}\n            };\n        }\n        return processResult;\n    }\n    function _removeWidget({ current }) {\n        current = getWNodeWrapper(current.id) || current;\n        _idToWrapperMap.delete(current.id);\n        const meta = widgetMetaMap.get(current.id);\n        let currentChildren = _idToChildrenWrappers.get(current.id);\n        _idToChildrenWrappers.delete(current.id);\n        _wrapperSiblingMap.delete(current);\n        let processResult = {\n            item: {\n                current: currentChildren,\n                meta: {}\n            }\n        };\n        if (meta) {\n            meta.registryHandler && meta.registryHandler.destroy();\n            meta.destroyMap && destroyHandles(meta.destroyMap);\n            widgetMetaMap.delete(current.id);\n        }\n        else {\n            processResult.widget = { type: 'detach', current, instance: current.instance };\n        }\n        return processResult;\n    }\n    function setDomNodeOnParentWrapper(id) {\n        let wrapper = _idToWrapperMap.get(id);\n        let children = [...(_idToChildrenWrappers.get(id) || [])];\n        let child;\n        while (children.length && !wrapper.domNode) {\n            child = children.shift();\n            if (child) {\n                if (child.domNode) {\n                    wrapper.childDomWrapperId = child.id;\n                    break;\n                }\n                let nextChildren = _idToChildrenWrappers.get(child.id);\n                if (nextChildren) {\n                    children = [...nextChildren, ...children];\n                }\n            }\n        }\n    }\n    function _createDom({ next }) {\n        const parentDomNode = findParentDomNode(next);\n        const isVirtual = isVirtualWrapper(next);\n        const isBody = isBodyWrapper(next);\n        let mergeNodes = [];\n        next.id = `${wrapperId++}`;\n        _idToWrapperMap.set(next.id, next);\n        if (!next.domNode) {\n            if (next.node.domNode) {\n                next.domNode = next.node.domNode;\n            }\n            else {\n                if (next.node.tag === 'svg') {\n                    next.namespace = NAMESPACE_SVG;\n                }\n                if (isBody) {\n                    next.domNode = global.document.body;\n                }\n                else if (next.node.tag && !isVirtual) {\n                    if (next.namespace) {\n                        next.domNode = global.document.createElementNS(next.namespace, next.node.tag);\n                    }\n                    else {\n                        next.domNode = global.document.createElement(next.node.tag);\n                    }\n                }\n                else if (next.node.text != null) {\n                    next.domNode = global.document.createTextNode(next.node.text);\n                }\n            }\n            if (_insertBeforeMap && _allMergedNodes.length) {\n                if (parentDomNode === _allMergedNodes[0].parentNode) {\n                    _insertBeforeMap.set(next, _allMergedNodes[0]);\n                }\n            }\n        }\n        else if (_mountOptions.merge) {\n            next.merged = true;\n            if (isTextNode(next.domNode)) {\n                if (next.domNode.data !== next.node.text) {\n                    _allMergedNodes = [next.domNode, ..._allMergedNodes];\n                    next.domNode = global.document.createTextNode(next.node.text);\n                    next.merged = false;\n                }\n            }\n            else {\n                mergeNodes = arrayFrom(next.domNode.childNodes);\n                _allMergedNodes = [..._allMergedNodes, ...mergeNodes];\n            }\n        }\n        let children;\n        if (next.domNode || isVirtual) {\n            if (next.node.children && next.node.children.length) {\n                children = renderedToWrapper(next.node.children, next, null);\n                _idToChildrenWrappers.set(next.id, children);\n            }\n        }\n        const dom = isVirtual || isBody\n            ? undefined\n            : {\n                next: next,\n                parentDomNode: parentDomNode,\n                type: 'create'\n            };\n        if (children) {\n            return {\n                item: {\n                    current: [],\n                    next: children,\n                    meta: { mergeNodes }\n                },\n                dom,\n                widget: isVirtual ? { type: 'attach', id: next.id, attached: false } : undefined\n            };\n        }\n        return { dom };\n    }\n    function _updateDom({ current, next }) {\n        next.domNode = current.domNode;\n        next.namespace = current.namespace;\n        next.id = current.id;\n        next.childDomWrapperId = current.childDomWrapperId;\n        let children;\n        let currentChildren = _idToChildrenWrappers.get(next.id);\n        if (next.node.text != null && next.node.text !== current.node.text) {\n            next.domNode = global.document.createTextNode(next.node.text);\n        }\n        else if (next.node.children) {\n            children = renderedToWrapper(next.node.children, next, current);\n            _idToChildrenWrappers.set(next.id, children);\n        }\n        _wrapperSiblingMap.delete(current);\n        _idToWrapperMap.set(next.id, next);\n        return {\n            item: {\n                current: currentChildren,\n                next: children,\n                meta: {}\n            },\n            dom: { type: 'update', next, current }\n        };\n    }\n    function _removeDom({ current }) {\n        const isVirtual = isVirtualWrapper(current);\n        const isBody = isBodyWrapper(current);\n        const children = _idToChildrenWrappers.get(current.id);\n        _idToChildrenWrappers.delete(current.id);\n        _idToWrapperMap.delete(current.id);\n        _wrapperSiblingMap.delete(current);\n        if (current.node.properties.key) {\n            const widgetMeta = widgetMetaMap.get(current.owningId);\n            const parentWrapper = getWNodeWrapper(current.owningId);\n            if (widgetMeta) {\n                widgetMeta.nodeMap && widgetMeta.nodeMap.delete(current.node.properties.key);\n            }\n            else if (parentWrapper && parentWrapper.instance) {\n                const instanceData = widgetInstanceMap.get(parentWrapper.instance);\n                instanceData && instanceData.nodeHandler.remove(current.node.properties.key);\n            }\n        }\n        if (current.hasAnimations || isVirtual || isBody) {\n            return {\n                item: { current: children, meta: {} },\n                dom: isVirtual || isBody ? undefined : { type: 'delete', current }\n            };\n        }\n        if (children) {\n            _deferredRenderCallbacks.push(() => {\n                let wrappers = children || [];\n                let wrapper;\n                let bodyIds = [];\n                while ((wrapper = wrappers.pop())) {\n                    if (isWNodeWrapper(wrapper)) {\n                        wrapper = getWNodeWrapper(wrapper.id) || wrapper;\n                        if (wrapper.instance) {\n                            const instanceData = widgetInstanceMap.get(wrapper.instance);\n                            instanceData && instanceData.onDetach();\n                            wrapper.instance = undefined;\n                        }\n                        else {\n                            const meta = widgetMetaMap.get(wrapper.id);\n                            if (meta) {\n                                meta.registryHandler && meta.registryHandler.destroy();\n                                meta.destroyMap && destroyHandles(meta.destroyMap);\n                                widgetMetaMap.delete(wrapper.id);\n                            }\n                        }\n                    }\n                    let wrapperChildren = _idToChildrenWrappers.get(wrapper.id);\n                    if (wrapperChildren) {\n                        wrappers.push(...wrapperChildren);\n                    }\n                    if (isBodyWrapper(wrapper)) {\n                        bodyIds.push(wrapper.id);\n                    }\n                    else if (bodyIds.indexOf(wrapper.parentId) !== -1) {\n                        if (isWNodeWrapper(wrapper) || isVirtualWrapper(wrapper)) {\n                            bodyIds.push(wrapper.id);\n                        }\n                        else if (wrapper.domNode && wrapper.domNode.parentNode) {\n                            wrapper.domNode.parentNode.removeChild(wrapper.domNode);\n                        }\n                    }\n                    _idToChildrenWrappers.delete(wrapper.id);\n                    _idToWrapperMap.delete(wrapper.id);\n                }\n            });\n        }\n        return {\n            dom: { type: 'delete', current }\n        };\n    }\n    return {\n        mount,\n        invalidate\n    };\n}\nexport default renderer;\n//# sourceMappingURL=vdom.mjs.map","import { Evented } from '../core/Evented';\nimport Map from '../shim/Map';\n/**\n * Enum to identify the type of event.\n * Listening to 'Projector' will notify when projector is created or updated\n * Listening to 'Widget' will notify when widget root is created or updated\n */\nexport var NodeEventType;\n(function (NodeEventType) {\n    NodeEventType[\"Projector\"] = \"Projector\";\n    NodeEventType[\"Widget\"] = \"Widget\";\n})(NodeEventType || (NodeEventType = {}));\nexport class NodeHandler extends Evented {\n    constructor() {\n        super(...arguments);\n        this._nodeMap = new Map();\n    }\n    get(key) {\n        return this._nodeMap.get(key);\n    }\n    has(key) {\n        return this._nodeMap.has(key);\n    }\n    add(element, key) {\n        this._nodeMap.set(key, element);\n        this.emit({ type: `${key}` });\n    }\n    addRoot() {\n        this.emit({ type: NodeEventType.Widget });\n    }\n    remove(key) {\n        this._nodeMap.delete(key);\n    }\n    addProjector() {\n        this.emit({ type: NodeEventType.Projector });\n    }\n    clear() {\n        this._nodeMap.clear();\n    }\n}\nexport default NodeHandler;\n//# sourceMappingURL=NodeHandler.mjs.map","import Map from '../shim/Map';\nimport WeakMap from '../shim/WeakMap';\nimport { auto } from './diff';\nimport RegistryHandler from './RegistryHandler';\nimport NodeHandler from './NodeHandler';\nimport { WIDGET_BASE_TYPE } from './Registry';\nimport { widgetInstanceMap, v } from './vdom';\nconst decoratorMap = new WeakMap();\nconst builtDecoratorMap = new WeakMap();\nconst boundAuto = auto.bind(null);\nfunction isDomMeta(meta) {\n    return Boolean(meta.afterRender);\n}\nconst IGNORE_LIST = ['render', ...Object.getOwnPropertyNames(Object.getPrototypeOf({}))];\nconst autoBindCache = new Map();\nfunction autoBind(instance) {\n    let prototype = instance.constructor.prototype;\n    let keys = [];\n    if (autoBindCache.has(prototype)) {\n        keys = autoBindCache.get(prototype);\n    }\n    else {\n        while (prototype) {\n            const ownKeys = Object.getOwnPropertyNames(prototype);\n            if (prototype.constructor.hasOwnProperty('_type')) {\n                break;\n            }\n            keys = [...keys, ...ownKeys];\n            prototype = Object.getPrototypeOf(prototype);\n        }\n        keys = keys.filter((k) => typeof instance[k] === 'function' && IGNORE_LIST.indexOf(k) === -1);\n        autoBindCache.set(prototype, keys);\n    }\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        const boundFunc = instance[key].bind(instance);\n        Object.defineProperty(instance, key, {\n            configurable: true,\n            get() {\n                return boundFunc;\n            }\n        });\n    }\n}\n/**\n * Main widget base for all widgets to extend\n */\nexport class WidgetBase {\n    /**\n     * @constructor\n     */\n    constructor() {\n        /**\n         * Indicates if it is the initial set properties cycle\n         */\n        this._initialProperties = true;\n        /**\n         * Array of property keys considered changed from the previous set properties\n         */\n        this._changedPropertyKeys = [];\n        this._registry = new RegistryHandler();\n        this._nodeHandler = new NodeHandler();\n        this._handles = [];\n        this._children = [];\n        this._decoratorCache = new Map();\n        this._properties = {};\n        this._boundRenderFunc = this.render.bind(this);\n        this._boundInvalidate = this.invalidate.bind(this);\n        this.own(this._registry);\n        this.own(this._registry.on('invalidate', this._boundInvalidate));\n        widgetInstanceMap.set(this, {\n            dirty: true,\n            onAttach: () => {\n                this.onAttach();\n            },\n            onDetach: () => {\n                this.onDetach();\n                this.destroy();\n            },\n            nodeHandler: this._nodeHandler,\n            rendering: false,\n            inputProperties: {},\n            registry: this.registry\n        });\n        this.own({\n            destroy: () => {\n                widgetInstanceMap.delete(this);\n                this._nodeHandler.clear();\n                this._nodeHandler.destroy();\n            }\n        });\n        this._runAfterConstructors();\n    }\n    meta(MetaType) {\n        if (this._metaMap === undefined) {\n            this._metaMap = new Map();\n        }\n        let cached = this._metaMap.get(MetaType);\n        if (!cached) {\n            cached = new MetaType({\n                invalidate: this._boundInvalidate,\n                nodeHandler: this._nodeHandler,\n                bind: this\n            });\n            this.own(cached);\n            this._metaMap.set(MetaType, cached);\n        }\n        return cached;\n    }\n    onAttach() {\n        // Do nothing by default.\n    }\n    onDetach() {\n        // Do nothing by default.\n    }\n    get properties() {\n        return this._properties;\n    }\n    get changedPropertyKeys() {\n        return [...this._changedPropertyKeys];\n    }\n    __setProperties__(originalProperties) {\n        const instanceData = widgetInstanceMap.get(this);\n        if (instanceData) {\n            instanceData.inputProperties = originalProperties;\n        }\n        const properties = this._runBeforeProperties(originalProperties);\n        const registeredDiffPropertyNames = this.getDecorator('registeredDiffProperty');\n        const changedPropertyKeys = [];\n        const propertyNames = Object.keys(properties);\n        if (this._initialProperties) {\n            autoBind(this);\n        }\n        if (this._initialProperties === false || registeredDiffPropertyNames.length !== 0) {\n            const allProperties = [...propertyNames, ...Object.keys(this._properties)];\n            const checkedProperties = [];\n            const diffPropertyResults = {};\n            let runReactions = false;\n            for (let i = 0; i < allProperties.length; i++) {\n                const propertyName = allProperties[i];\n                if (checkedProperties.indexOf(propertyName) !== -1) {\n                    continue;\n                }\n                checkedProperties.push(propertyName);\n                const previousProperty = this._properties[propertyName];\n                const newProperty = properties[propertyName];\n                if (registeredDiffPropertyNames.indexOf(propertyName) !== -1) {\n                    runReactions = true;\n                    const diffFunctions = this.getDecorator(`diffProperty:${propertyName}`);\n                    for (let i = 0; i < diffFunctions.length; i++) {\n                        const result = diffFunctions[i](previousProperty, newProperty);\n                        if (result.changed && changedPropertyKeys.indexOf(propertyName) === -1) {\n                            changedPropertyKeys.push(propertyName);\n                        }\n                        if (propertyName in properties) {\n                            diffPropertyResults[propertyName] = result.value;\n                        }\n                    }\n                }\n                else {\n                    const result = boundAuto(previousProperty, newProperty);\n                    if (result.changed && changedPropertyKeys.indexOf(propertyName) === -1) {\n                        changedPropertyKeys.push(propertyName);\n                    }\n                    if (propertyName in properties) {\n                        diffPropertyResults[propertyName] = result.value;\n                    }\n                }\n            }\n            if (runReactions) {\n                const reactionFunctions = this.getDecorator('diffReaction');\n                const executedReactions = [];\n                reactionFunctions.forEach(({ reaction, propertyName }) => {\n                    const propertyChanged = changedPropertyKeys.indexOf(propertyName) !== -1;\n                    const reactionRun = executedReactions.indexOf(reaction) !== -1;\n                    if (propertyChanged && !reactionRun) {\n                        reaction.call(this, this._properties, diffPropertyResults);\n                        executedReactions.push(reaction);\n                    }\n                });\n            }\n            this._properties = diffPropertyResults;\n            this._changedPropertyKeys = changedPropertyKeys;\n        }\n        else {\n            this._initialProperties = false;\n            for (let i = 0; i < propertyNames.length; i++) {\n                const propertyName = propertyNames[i];\n                if (typeof properties[propertyName] === 'function') {\n                    properties[propertyName] = properties[propertyName];\n                }\n                else {\n                    changedPropertyKeys.push(propertyName);\n                }\n            }\n            this._changedPropertyKeys = changedPropertyKeys;\n            this._properties = Object.assign({}, properties);\n        }\n        if (this._changedPropertyKeys.length > 0) {\n            this.invalidate();\n        }\n    }\n    get children() {\n        return this._children;\n    }\n    __setChildren__(children) {\n        if (this._children.length > 0 || children.length > 0) {\n            this._children = children;\n            this.invalidate();\n        }\n    }\n    __render__() {\n        const instanceData = widgetInstanceMap.get(this);\n        if (instanceData) {\n            instanceData.dirty = false;\n        }\n        const render = this._runBeforeRenders();\n        const dNode = this._runAfterRenders(render());\n        return dNode;\n    }\n    invalidate() {\n        const instanceData = widgetInstanceMap.get(this);\n        if (instanceData && instanceData.invalidate) {\n            instanceData.invalidate();\n        }\n    }\n    render() {\n        return v('div', {}, this.children);\n    }\n    /**\n     * Function to add decorators to WidgetBase\n     *\n     * @param decoratorKey The key of the decorator\n     * @param value The value of the decorator\n     */\n    addDecorator(decoratorKey, value) {\n        value = Array.isArray(value) ? value : [value];\n        if (this.hasOwnProperty('constructor')) {\n            let decoratorList = decoratorMap.get(this.constructor);\n            if (!decoratorList) {\n                decoratorList = new Map();\n                decoratorMap.set(this.constructor, decoratorList);\n            }\n            let specificDecoratorList = decoratorList.get(decoratorKey);\n            if (!specificDecoratorList) {\n                specificDecoratorList = [];\n                decoratorList.set(decoratorKey, specificDecoratorList);\n            }\n            specificDecoratorList.push(...value);\n        }\n        else {\n            const decorators = this.getDecorator(decoratorKey);\n            this._decoratorCache.set(decoratorKey, [...decorators, ...value]);\n        }\n    }\n    /**\n     * Function to build the list of decorators from the global decorator map.\n     *\n     * @param decoratorKey  The key of the decorator\n     * @return An array of decorator values\n     * @private\n     */\n    _buildDecoratorList(decoratorKey) {\n        const allDecorators = [];\n        let constructor = this.constructor;\n        while (constructor) {\n            const instanceMap = decoratorMap.get(constructor);\n            if (instanceMap) {\n                const decorators = instanceMap.get(decoratorKey);\n                if (decorators) {\n                    allDecorators.unshift(...decorators);\n                }\n            }\n            constructor = Object.getPrototypeOf(constructor);\n        }\n        const buildDecorators = builtDecoratorMap.get(this.constructor) || new Map();\n        buildDecorators.set(decoratorKey, allDecorators);\n        builtDecoratorMap.set(this.constructor, buildDecorators);\n        return allDecorators;\n    }\n    /**\n     * Function to retrieve decorator values\n     *\n     * @param decoratorKey The key of the decorator\n     * @returns An array of decorator values\n     */\n    getDecorator(decoratorKey) {\n        let decoratorCache = builtDecoratorMap.get(this.constructor);\n        let allDecorators = this._decoratorCache.get(decoratorKey) || (decoratorCache && decoratorCache.get(decoratorKey));\n        if (allDecorators !== undefined) {\n            return allDecorators;\n        }\n        allDecorators = this._buildDecoratorList(decoratorKey);\n        allDecorators = [...allDecorators];\n        this._decoratorCache.set(decoratorKey, allDecorators);\n        return allDecorators;\n    }\n    get registry() {\n        return this._registry;\n    }\n    _runBeforeProperties(properties) {\n        const beforeProperties = this.getDecorator('beforeProperties');\n        if (beforeProperties.length > 0) {\n            return beforeProperties.reduce((properties, beforePropertiesFunction) => {\n                return Object.assign({}, properties, beforePropertiesFunction.call(this, properties));\n            }, Object.assign({}, properties));\n        }\n        return properties;\n    }\n    /**\n     * Run all registered before renders and return the updated render method\n     */\n    _runBeforeRenders() {\n        const beforeRenders = this.getDecorator('beforeRender');\n        if (beforeRenders.length > 0) {\n            return beforeRenders.reduce((render, beforeRenderFunction) => {\n                const updatedRender = beforeRenderFunction.call(this, render, this._properties, this._children);\n                if (!updatedRender) {\n                    console.warn('Render function not returned from beforeRender, using previous render');\n                    return render;\n                }\n                return updatedRender;\n            }, this._boundRenderFunc);\n        }\n        return this._boundRenderFunc;\n    }\n    /**\n     * Run all registered after renders and return the decorated DNodes\n     *\n     * @param dNode The DNodes to run through the after renders\n     */\n    _runAfterRenders(dNode) {\n        const afterRenders = this.getDecorator('afterRender');\n        if (afterRenders.length > 0) {\n            dNode = afterRenders.reduce((dNode, afterRenderFunction) => {\n                return afterRenderFunction.call(this, dNode);\n            }, dNode);\n        }\n        if (this._metaMap !== undefined) {\n            this._metaMap.forEach((meta) => {\n                isDomMeta(meta) && meta.afterRender();\n            });\n        }\n        return dNode;\n    }\n    _runAfterConstructors() {\n        const afterConstructors = this.getDecorator('afterConstructor');\n        if (afterConstructors.length > 0) {\n            afterConstructors.forEach((afterConstructor) => afterConstructor.call(this));\n        }\n    }\n    own(handle) {\n        this._handles.push(handle);\n    }\n    destroy() {\n        while (this._handles.length > 0) {\n            const handle = this._handles.pop();\n            if (handle) {\n                handle.destroy();\n            }\n        }\n    }\n}\n/**\n * static identifier\n */\nWidgetBase._type = WIDGET_BASE_TYPE;\nexport default WidgetBase;\n//# sourceMappingURL=WidgetBase.mjs.map","/**\n * Helper function to generate a value property descriptor\n *\n * @param value        The value the property descriptor should be set to\n * @param enumerable   If the property should be enumberable, defaults to false\n * @param writable     If the property should be writable, defaults to true\n * @param configurable If the property should be configurable, defaults to true\n * @return             The property descriptor object\n */\nexport function getValueDescriptor(value, enumerable = false, writable = true, configurable = true) {\n    return {\n        value: value,\n        enumerable: enumerable,\n        writable: writable,\n        configurable: configurable\n    };\n}\nexport function wrapNative(nativeFunction) {\n    return function (target, ...args) {\n        return nativeFunction.apply(target, args);\n    };\n}\n//# sourceMappingURL=util.mjs.map","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/*** IMPORTS FROM imports-loader ***/\nvar widgetFactory = require(\"src/icon\");\n\nvar registerCustomElement = require('@dojo/framework/core/registerCustomElement').default;\n\nvar defaultExport = widgetFactory.default;\ndefaultExport && registerCustomElement(defaultExport);\n\n","import { handleDecorator } from './handleDecorator';\nimport { auto } from './../diff';\n/**\n * Decorator that can be used to register a function as a specific property diff\n *\n * @param propertyName  The name of the property of which the diff function is applied\n * @param diffType      The diff type, default is DiffType.AUTO.\n * @param diffFunction  A diff function to run if diffType if DiffType.CUSTOM\n */\nexport function diffProperty(propertyName, diffFunction = auto, reactionFunction) {\n    return handleDecorator((target, propertyKey) => {\n        target.addDecorator(`diffProperty:${propertyName}`, diffFunction.bind(null));\n        target.addDecorator('registeredDiffProperty', propertyName);\n        if (reactionFunction || propertyKey) {\n            target.addDecorator('diffReaction', {\n                propertyName,\n                reaction: propertyKey ? target[propertyKey] : reactionFunction\n            });\n        }\n    });\n}\nexport default diffProperty;\n//# sourceMappingURL=diffProperty.mjs.map","var _a;\nimport global from './global';\nvar queueMicroTask = undefined;\n// !has('microtasks')\n// elided: import './support/queue'\n// !has('es6-symbol')\n// elided: import './Symbol'\nimport has from '../core/has';\nexport let ShimPromise = global.Promise;\nexport const isThenable = function isThenable(value) {\n    return value && typeof value.then === 'function';\n};\nif (!true) {\n    global.Promise = ShimPromise = (_a = class Promise {\n            /**\n             * Creates a new Promise.\n             *\n             * @constructor\n             *\n             * @param executor\n             * The executor function is called immediately when the Promise is instantiated. It is responsible for\n             * starting the asynchronous operation when it is invoked.\n             *\n             * The executor must call either the passed `resolve` function when the asynchronous operation has completed\n             * successfully, or the `reject` function when the operation fails.\n             */\n            constructor(executor) {\n                /**\n                 * The current state of this promise.\n                 */\n                this.state = 1 /* Pending */;\n                this[Symbol.toStringTag] = 'Promise';\n                /**\n                 * If true, the resolution of this promise is chained (\"locked in\") to another promise.\n                 */\n                let isChained = false;\n                /**\n                 * Whether or not this promise is in a resolved state.\n                 */\n                const isResolved = () => {\n                    return this.state !== 1 /* Pending */ || isChained;\n                };\n                /**\n                 * Callbacks that should be invoked once the asynchronous operation has completed.\n                 */\n                let callbacks = [];\n                /**\n                 * Initially pushes callbacks onto a queue for execution once this promise settles. After the promise settles,\n                 * enqueues callbacks for execution on the next event loop turn.\n                 */\n                let whenFinished = function (callback) {\n                    if (callbacks) {\n                        callbacks.push(callback);\n                    }\n                };\n                /**\n                 * Settles this promise.\n                 *\n                 * @param newState The resolved state for this promise.\n                 * @param {T|any} value The resolved value for this promise.\n                 */\n                const settle = (newState, value) => {\n                    // A promise can only be settled once.\n                    if (this.state !== 1 /* Pending */) {\n                        return;\n                    }\n                    this.state = newState;\n                    this.resolvedValue = value;\n                    whenFinished = queueMicroTask;\n                    // Only enqueue a callback runner if there are callbacks so that initially fulfilled Promises don't have to\n                    // wait an extra turn.\n                    if (callbacks && callbacks.length > 0) {\n                        queueMicroTask(function () {\n                            if (callbacks) {\n                                let count = callbacks.length;\n                                for (let i = 0; i < count; ++i) {\n                                    callbacks[i].call(null);\n                                }\n                                callbacks = null;\n                            }\n                        });\n                    }\n                };\n                /**\n                 * Resolves this promise.\n                 *\n                 * @param newState The resolved state for this promise.\n                 * @param {T|any} value The resolved value for this promise.\n                 */\n                const resolve = (newState, value) => {\n                    if (isResolved()) {\n                        return;\n                    }\n                    if (isThenable(value)) {\n                        value.then(settle.bind(null, 0 /* Fulfilled */), settle.bind(null, 2 /* Rejected */));\n                        isChained = true;\n                    }\n                    else {\n                        settle(newState, value);\n                    }\n                };\n                this.then = (onFulfilled, onRejected) => {\n                    return new Promise((resolve, reject) => {\n                        // whenFinished initially queues up callbacks for execution after the promise has settled. Once the\n                        // promise has settled, whenFinished will schedule callbacks for execution on the next turn through the\n                        // event loop.\n                        whenFinished(() => {\n                            const callback = this.state === 2 /* Rejected */ ? onRejected : onFulfilled;\n                            if (typeof callback === 'function') {\n                                try {\n                                    resolve(callback(this.resolvedValue));\n                                }\n                                catch (error) {\n                                    reject(error);\n                                }\n                            }\n                            else if (this.state === 2 /* Rejected */) {\n                                reject(this.resolvedValue);\n                            }\n                            else {\n                                resolve(this.resolvedValue);\n                            }\n                        });\n                    });\n                };\n                try {\n                    executor(resolve.bind(null, 0 /* Fulfilled */), resolve.bind(null, 2 /* Rejected */));\n                }\n                catch (error) {\n                    settle(2 /* Rejected */, error);\n                }\n            }\n            static all(iterable) {\n                return new this(function (resolve, reject) {\n                    const values = [];\n                    let complete = 0;\n                    let total = 0;\n                    let populating = true;\n                    function fulfill(index, value) {\n                        values[index] = value;\n                        ++complete;\n                        finish();\n                    }\n                    function finish() {\n                        if (populating || complete < total) {\n                            return;\n                        }\n                        resolve(values);\n                    }\n                    function processItem(index, item) {\n                        ++total;\n                        if (isThenable(item)) {\n                            // If an item Promise rejects, this Promise is immediately rejected with the item\n                            // Promise's rejection error.\n                            item.then(fulfill.bind(null, index), reject);\n                        }\n                        else {\n                            Promise.resolve(item).then(fulfill.bind(null, index));\n                        }\n                    }\n                    let i = 0;\n                    for (const value of iterable) {\n                        processItem(i, value);\n                        i++;\n                    }\n                    populating = false;\n                    finish();\n                });\n            }\n            static race(iterable) {\n                return new this(function (resolve, reject) {\n                    for (const item of iterable) {\n                        if (item instanceof Promise) {\n                            // If a Promise item rejects, this Promise is immediately rejected with the item\n                            // Promise's rejection error.\n                            item.then(resolve, reject);\n                        }\n                        else {\n                            Promise.resolve(item).then(resolve);\n                        }\n                    }\n                });\n            }\n            static reject(reason) {\n                return new this(function (resolve, reject) {\n                    reject(reason);\n                });\n            }\n            static resolve(value) {\n                return new this(function (resolve) {\n                    resolve(value);\n                });\n            }\n            catch(onRejected) {\n                return this.then(undefined, onRejected);\n            }\n        },\n        _a[Symbol.species] = ShimPromise,\n        _a);\n    // this cast is needed in order to omit finally in the class declaration; this was done so the finally code\n    // is not duplicated and always added in the conditional below\n}\nif (!has('es2018-promise-finally')) {\n    global.Promise.prototype.finally = function (onFinally) {\n        return this.then(onFinally && ((value) => Promise.resolve(onFinally()).then(() => value)), onFinally &&\n            ((reason) => Promise.resolve(onFinally()).then(() => {\n                throw reason;\n            })));\n    };\n}\nexport default ShimPromise;","import { Map } from '../shim/Map';\nimport { Evented } from '../core/Evented';\nimport { Registry } from './Registry';\nexport class RegistryHandler extends Evented {\n    constructor() {\n        super();\n        this._registry = new Registry();\n        this._registryWidgetLabelMap = new Map();\n        this._registryInjectorLabelMap = new Map();\n        this.own(this._registry);\n        const destroy = () => {\n            if (this.baseRegistry) {\n                this._registryWidgetLabelMap.delete(this.baseRegistry);\n                this._registryInjectorLabelMap.delete(this.baseRegistry);\n                this.baseRegistry = undefined;\n            }\n        };\n        this.own({ destroy });\n    }\n    set base(baseRegistry) {\n        if (this.baseRegistry) {\n            this._registryWidgetLabelMap.delete(this.baseRegistry);\n            this._registryInjectorLabelMap.delete(this.baseRegistry);\n        }\n        this.baseRegistry = baseRegistry;\n    }\n    get base() {\n        return this.baseRegistry;\n    }\n    define(label, widget) {\n        this._registry.define(label, widget);\n    }\n    defineInjector(label, injector) {\n        this._registry.defineInjector(label, injector);\n    }\n    has(label) {\n        return this._registry.has(label) || Boolean(this.baseRegistry && this.baseRegistry.has(label));\n    }\n    hasInjector(label) {\n        return this._registry.hasInjector(label) || Boolean(this.baseRegistry && this.baseRegistry.hasInjector(label));\n    }\n    get(label, globalPrecedence = false) {\n        return this._get(label, globalPrecedence, 'get', this._registryWidgetLabelMap);\n    }\n    getInjector(label, globalPrecedence = false) {\n        return this._get(label, globalPrecedence, 'getInjector', this._registryInjectorLabelMap);\n    }\n    _get(label, globalPrecedence, getFunctionName, labelMap) {\n        const registries = globalPrecedence ? [this.baseRegistry, this._registry] : [this._registry, this.baseRegistry];\n        for (let i = 0; i < registries.length; i++) {\n            const registry = registries[i];\n            if (!registry) {\n                continue;\n            }\n            const item = registry[getFunctionName](label);\n            const registeredLabels = labelMap.get(registry) || [];\n            if (item) {\n                return item;\n            }\n            else if (registeredLabels.indexOf(label) === -1) {\n                const handle = registry.on(label, (event) => {\n                    if (event.action === 'loaded' &&\n                        this[getFunctionName](label, globalPrecedence) === event.item) {\n                        this.emit({ type: 'invalidate' });\n                    }\n                });\n                this.own(handle);\n                labelMap.set(registry, [...registeredLabels, label]);\n            }\n        }\n        return null;\n    }\n}\nexport default RegistryHandler;\n//# sourceMappingURL=RegistryHandler.mjs.map","import { AriaPropertyObject } from './interfaces';\n\nexport enum Keys {\n\tDown = 40,\n\tEnd = 35,\n\tEnter = 13,\n\tEscape = 27,\n\tHome = 36,\n\tLeft = 37,\n\tPageDown = 34,\n\tPageUp = 33,\n\tRight = 39,\n\tSpace = 32,\n\tTab = 9,\n\tUp = 38\n}\n\nexport function formatAriaProperties(aria: AriaPropertyObject): AriaPropertyObject {\n\tconst formattedAria = Object.keys(aria).reduce((a: AriaPropertyObject, key: string) => {\n\t\ta[`aria-${key.toLowerCase()}`] = aria[key];\n\t\treturn a;\n\t}, {});\n\treturn formattedAria;\n}\n","var _a;\nimport global from './global';\nvar isArrayLike = undefined, ShimIterator = undefined;\n// !has('es6-iterator')\n// elided: import './iterator'\nimport has from '../core/has';\n// !has('es6-symbol')\n// elided: import './Symbol'\nexport let Set = global.Set;\nif (!true) {\n    Set = global.Set = (_a = class Set {\n            constructor(iterable) {\n                this._setData = [];\n                this[Symbol.toStringTag] = 'Set';\n                if (iterable) {\n                    if (isArrayLike(iterable)) {\n                        for (let i = 0; i < iterable.length; i++) {\n                            this.add(iterable[i]);\n                        }\n                    }\n                    else {\n                        for (const value of iterable) {\n                            this.add(value);\n                        }\n                    }\n                }\n            }\n            add(value) {\n                if (this.has(value)) {\n                    return this;\n                }\n                this._setData.push(value);\n                return this;\n            }\n            clear() {\n                this._setData.length = 0;\n            }\n            delete(value) {\n                const idx = this._setData.indexOf(value);\n                if (idx === -1) {\n                    return false;\n                }\n                this._setData.splice(idx, 1);\n                return true;\n            }\n            entries() {\n                return new ShimIterator(this._setData.map((value) => [value, value]));\n            }\n            forEach(callbackfn, thisArg) {\n                const iterator = this.values();\n                let result = iterator.next();\n                while (!result.done) {\n                    callbackfn.call(thisArg, result.value, result.value, this);\n                    result = iterator.next();\n                }\n            }\n            has(value) {\n                return this._setData.indexOf(value) > -1;\n            }\n            keys() {\n                return new ShimIterator(this._setData);\n            }\n            get size() {\n                return this._setData.length;\n            }\n            values() {\n                return new ShimIterator(this._setData);\n            }\n            [Symbol.iterator]() {\n                return new ShimIterator(this._setData);\n            }\n        },\n        _a[Symbol.species] = _a,\n        _a);\n}\nexport default Set;","import { handleDecorator } from './handleDecorator';\nexport function beforeProperties(method) {\n    return handleDecorator((target, propertyKey) => {\n        target.addDecorator('beforeProperties', propertyKey ? target[propertyKey] : method);\n    });\n}\nexport default beforeProperties;\n//# sourceMappingURL=beforeProperties.mjs.map","var isArrayLike = undefined, isIterable = undefined;\n// !has('es6-iterator')\n// elided: import './iterator'\nimport has from '../core/has';\nimport { wrapNative } from './support/util';\nexport let from;\nexport let of;\nexport let copyWithin;\nexport let fill;\nexport let find;\nexport let findIndex;\nexport let includes;\nlet toLength;\nlet toInteger;\nlet normalizeOffset;\nif (!true || !true || !true) {\n    const MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;\n    /**\n     * Ensures a non-negative, non-infinite, safe integer.\n     *\n     * @param length The number to validate\n     * @return A proper length\n     */\n    toLength = function toLength(length) {\n        if (isNaN(length)) {\n            return 0;\n        }\n        length = Number(length);\n        if (isFinite(length)) {\n            length = Math.floor(length);\n        }\n        // Ensure a non-negative, real, safe integer\n        return Math.min(Math.max(length, 0), MAX_SAFE_INTEGER);\n    };\n    /**\n     * From ES6 7.1.4 ToInteger()\n     *\n     * @param value A value to convert\n     * @return An integer\n     */\n    toInteger = function toInteger(value) {\n        value = Number(value);\n        if (isNaN(value)) {\n            return 0;\n        }\n        if (value === 0 || !isFinite(value)) {\n            return value;\n        }\n        return (value > 0 ? 1 : -1) * Math.floor(Math.abs(value));\n    };\n    /**\n     * Normalizes an offset against a given length, wrapping it if negative.\n     *\n     * @param value The original offset\n     * @param length The total length to normalize against\n     * @return If negative, provide a distance from the end (length); otherwise provide a distance from 0\n     */\n    normalizeOffset = function normalizeOffset(value, length) {\n        return value < 0 ? Math.max(length + value, 0) : Math.min(value, length);\n    };\n}\nif (!true) {\n    Array.from = function from(arrayLike, mapFunction, thisArg) {\n        if (arrayLike == null) {\n            throw new TypeError('from: requires an array-like object');\n        }\n        if (mapFunction && thisArg) {\n            mapFunction = mapFunction.bind(thisArg);\n        }\n        /* tslint:disable-next-line:variable-name */\n        const Constructor = this;\n        const length = toLength(arrayLike.length);\n        // Support extension\n        const array = typeof Constructor === 'function' ? Object(new Constructor(length)) : new Array(length);\n        if (!isArrayLike(arrayLike) && !isIterable(arrayLike)) {\n            return array;\n        }\n        // if this is an array and the normalized length is 0, just return an empty array. this prevents a problem\n        // with the iteration on IE when using a NaN array length.\n        if (isArrayLike(arrayLike)) {\n            if (length === 0) {\n                return [];\n            }\n            for (let i = 0; i < arrayLike.length; i++) {\n                array[i] = mapFunction ? mapFunction(arrayLike[i], i) : arrayLike[i];\n            }\n        }\n        else {\n            let i = 0;\n            for (const value of arrayLike) {\n                array[i] = mapFunction ? mapFunction(value, i) : value;\n                i++;\n            }\n        }\n        if (arrayLike.length !== undefined) {\n            array.length = length;\n        }\n        return array;\n    };\n    Array.of = function of(...items) {\n        return Array.prototype.slice.call(items);\n    };\n    Array.prototype.copyWithin = function copyWithin(offset, start, end) {\n        if (this == null) {\n            throw new TypeError('copyWithin: target must be an array-like object');\n        }\n        const length = toLength(this.length);\n        offset = normalizeOffset(toInteger(offset), length);\n        start = normalizeOffset(toInteger(start), length);\n        end = normalizeOffset(end === undefined ? length : toInteger(end), length);\n        let count = Math.min(end - start, length - offset);\n        let direction = 1;\n        if (offset > start && offset < start + count) {\n            direction = -1;\n            start += count - 1;\n            offset += count - 1;\n        }\n        while (count > 0) {\n            if (start in this) {\n                this[offset] = this[start];\n            }\n            else {\n                delete this[offset];\n            }\n            offset += direction;\n            start += direction;\n            count--;\n        }\n        return this;\n    };\n    Array.prototype.find = function find(callback, thisArg) {\n        const index = this.findIndex(callback, thisArg);\n        return index !== -1 ? this[index] : undefined;\n    };\n    Array.prototype.findIndex = function findIndex(callback, thisArg) {\n        const length = toLength(this.length);\n        if (!callback) {\n            throw new TypeError('find: second argument must be a function');\n        }\n        if (thisArg) {\n            callback = callback.bind(thisArg);\n        }\n        for (let i = 0; i < length; i++) {\n            if (callback(this[i], i, this)) {\n                return i;\n            }\n        }\n        return -1;\n    };\n}\nif (!true) {\n    Array.prototype.fill = function fill(value, start, end) {\n        const length = toLength(this.length);\n        let i = normalizeOffset(toInteger(start), length);\n        end = normalizeOffset(end === undefined ? length : toInteger(end), length);\n        while (i < (end || 0)) {\n            this[i++] = value;\n        }\n        return this;\n    };\n}\nif (!true) {\n    Array.prototype.includes = function includes(searchElement, fromIndex = 0) {\n        let len = toLength(this.length);\n        for (let i = fromIndex; i < len; ++i) {\n            const currentElement = this[i];\n            if (searchElement === currentElement ||\n                (searchElement !== searchElement && currentElement !== currentElement)) {\n                return true;\n            }\n        }\n        return false;\n    };\n}\nfrom = Array.from;\nof = Array.of;\ncopyWithin = wrapNative(Array.prototype.copyWithin);\nfill = wrapNative(Array.prototype.fill);\nfind = wrapNative(Array.prototype.find);\nfindIndex = wrapNative(Array.prototype.findIndex);\nincludes = wrapNative(Array.prototype.includes);\nexport default Array;","var _a;\nvar isArrayLike = undefined, ShimIterator = undefined;\n// !has('es6-iterator')\n// elided: import './iterator'\nimport global from './global';\nimport { is as objectIs } from './object';\nimport has from '../core/has';\n// !has('es6-symbol')\n// elided: import './Symbol'\nexport let Map = global.Map;\nif (!true) {\n    Map = global.Map = (_a = class Map {\n            constructor(iterable) {\n                this._keys = [];\n                this._values = [];\n                this[Symbol.toStringTag] = 'Map';\n                if (iterable) {\n                    if (isArrayLike(iterable)) {\n                        for (let i = 0; i < iterable.length; i++) {\n                            const value = iterable[i];\n                            this.set(value[0], value[1]);\n                        }\n                    }\n                    else {\n                        for (const value of iterable) {\n                            this.set(value[0], value[1]);\n                        }\n                    }\n                }\n            }\n            /**\n             * An alternative to Array.prototype.indexOf using Object.is\n             * to check for equality. See http://mzl.la/1zuKO2V\n             */\n            _indexOfKey(keys, key) {\n                for (let i = 0, length = keys.length; i < length; i++) {\n                    if (objectIs(keys[i], key)) {\n                        return i;\n                    }\n                }\n                return -1;\n            }\n            get size() {\n                return this._keys.length;\n            }\n            clear() {\n                this._keys.length = this._values.length = 0;\n            }\n            delete(key) {\n                const index = this._indexOfKey(this._keys, key);\n                if (index < 0) {\n                    return false;\n                }\n                this._keys.splice(index, 1);\n                this._values.splice(index, 1);\n                return true;\n            }\n            entries() {\n                const values = this._keys.map((key, i) => {\n                    return [key, this._values[i]];\n                });\n                return new ShimIterator(values);\n            }\n            forEach(callback, context) {\n                const keys = this._keys;\n                const values = this._values;\n                for (let i = 0, length = keys.length; i < length; i++) {\n                    callback.call(context, values[i], keys[i], this);\n                }\n            }\n            get(key) {\n                const index = this._indexOfKey(this._keys, key);\n                return index < 0 ? undefined : this._values[index];\n            }\n            has(key) {\n                return this._indexOfKey(this._keys, key) > -1;\n            }\n            keys() {\n                return new ShimIterator(this._keys);\n            }\n            set(key, value) {\n                let index = this._indexOfKey(this._keys, key);\n                index = index < 0 ? this._keys.length : index;\n                this._keys[index] = key;\n                this._values[index] = value;\n                return this;\n            }\n            values() {\n                return new ShimIterator(this._values);\n            }\n            [Symbol.iterator]() {\n                return this.entries();\n            }\n        },\n        _a[Symbol.species] = _a,\n        _a);\n}\nexport default Map;","import Promise from '../shim/Promise';\n/**\n * No op function used to replace a Destroyable instance's `destroy` method, once the instance has been destroyed\n */\nfunction noop() {\n    return Promise.resolve(false);\n}\n/**\n * No op function used to replace a Destroyable instance's `own` method, once the instance has been destroyed\n */\nfunction destroyed() {\n    throw new Error('Call made to destroyed method');\n}\nexport class Destroyable {\n    /**\n     * @constructor\n     */\n    constructor() {\n        this.handles = [];\n    }\n    /**\n     * Register handles for the instance that will be destroyed when `this.destroy` is called\n     *\n     * @param {Handle} handle The handle to add for the instance\n     * @returns {Handle} A wrapper Handle. When the wrapper Handle's `destroy` method is invoked, the original handle is\n     *                   removed from the instance, and its `destroy` method is invoked.\n     */\n    own(handle) {\n        const { handles: _handles } = this;\n        _handles.push(handle);\n        return {\n            destroy() {\n                _handles.splice(_handles.indexOf(handle));\n                handle.destroy();\n            }\n        };\n    }\n    /**\n     * Destroys all handlers registered for the instance\n     *\n     * @returns {Promise<any} A Promise that resolves once all handles have been destroyed\n     */\n    destroy() {\n        return new Promise((resolve) => {\n            this.handles.forEach((handle) => {\n                handle && handle.destroy && handle.destroy();\n            });\n            this.destroy = noop;\n            this.own = destroyed;\n            resolve(true);\n        });\n    }\n}\nexport default Destroyable;\n//# sourceMappingURL=Destroyable.mjs.map","import { Evented } from '../core/Evented';\nexport class Injector extends Evented {\n    constructor(payload) {\n        super();\n        this._payload = payload;\n    }\n    setInvalidator(invalidator) {\n        this._invalidator = invalidator;\n    }\n    get() {\n        return this._payload;\n    }\n    set(payload) {\n        this._payload = payload;\n        if (this._invalidator) {\n            this._invalidator();\n        }\n    }\n}\nexport default Injector;\n//# sourceMappingURL=Injector.mjs.map","import WeakMap from '../../shim/WeakMap';\nimport { handleDecorator } from './handleDecorator';\nimport { beforeProperties } from './beforeProperties';\n/**\n * Map of instances against registered injectors.\n */\nconst registeredInjectorsMap = new WeakMap();\n/**\n * Decorator retrieves an injector from an available registry using the name and\n * calls the `getProperties` function with the payload from the injector\n * and current properties with the the injected properties returned.\n *\n * @param InjectConfig the inject configuration\n */\nexport function inject({ name, getProperties }) {\n    return handleDecorator((target, propertyKey) => {\n        beforeProperties(function (properties) {\n            const injectorItem = this.registry.getInjector(name);\n            if (injectorItem) {\n                const { injector, invalidator } = injectorItem;\n                const registeredInjectors = registeredInjectorsMap.get(this) || [];\n                if (registeredInjectors.length === 0) {\n                    registeredInjectorsMap.set(this, registeredInjectors);\n                }\n                if (registeredInjectors.indexOf(injectorItem) === -1) {\n                    this.own(invalidator.on('invalidate', () => {\n                        this.invalidate();\n                    }));\n                    registeredInjectors.push(injectorItem);\n                }\n                return getProperties(injector(), properties);\n            }\n        })(target);\n    });\n}\nexport default inject;\n//# sourceMappingURL=inject.mjs.map","import { handleDecorator } from './handleDecorator';\nimport { beforeProperties } from './beforeProperties';\nexport function alwaysRender() {\n    return handleDecorator((target, propertyKey) => {\n        beforeProperties(function () {\n            this.invalidate();\n        })(target);\n    });\n}\nexport default alwaysRender;\n//# sourceMappingURL=alwaysRender.mjs.map","// extracted by mini-css-extract-plugin\nmodule.exports = {\" _key\":\"@dojo/widgets/base\",\"visuallyHidden\":\"base-m__visuallyHidden__1AeWe\",\"focusable\":\"base-m__focusable__1_qAN\",\"hidden\":\"base-m__hidden__3QddU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\" _key\":\"@dojo/widgets/icon\",\"root\":\"icon-m__root__2L6Ls\",\"icon\":\"icon-m__icon__3tF1v\",\"downIcon\":\"icon-m__downIcon__3GFyI\",\"leftIcon\":\"icon-m__leftIcon__1db8D\",\"rightIcon\":\"icon-m__rightIcon__2a143\",\"closeIcon\":\"icon-m__closeIcon__w1WZi\",\"plusIcon\":\"icon-m__plusIcon__2V_90\",\"minusIcon\":\"icon-m__minusIcon__27KOe\",\"checkIcon\":\"icon-m__checkIcon__mKil4\",\"upIcon\":\"icon-m__upIcon__Rw4TX\",\"upAltIcon\":\"icon-m__upAltIcon__b2BPq\",\"downAltIcon\":\"icon-m__downAltIcon__3QpkE\",\"searchIcon\":\"icon-m__searchIcon__3MWqs\",\"barsIcon\":\"icon-m__barsIcon__3uXWm\",\"settingsIcon\":\"icon-m__settingsIcon__3V--O\",\"alertIcon\":\"icon-m__alertIcon__3YjJO\",\"helpIcon\":\"icon-m__helpIcon__3mL91\",\"infoIcon\":\"icon-m__infoIcon__dZLeo\",\"phoneIcon\":\"icon-m__phoneIcon__1vzkN\",\"editIcon\":\"icon-m__editIcon__2y3IH\",\"dateIcon\":\"icon-m__dateIcon__1_x6R\",\"linkIcon\":\"icon-m__linkIcon__HkV2v\",\"locationIcon\":\"icon-m__locationIcon__24-7y\",\"secureIcon\":\"icon-m__secureIcon__2cTDx\",\"mailIcon\":\"icon-m__mailIcon__12PMY\"};","import Promise from '../shim/Promise';\nimport Map from '../shim/Map';\nimport { Evented } from '../core/Evented';\n/**\n * Widget base type\n */\nexport const WIDGET_BASE_TYPE = '__widget_base_type';\n/**\n * Checks is the item is a subclass of WidgetBase (or a WidgetBase)\n *\n * @param item the item to check\n * @returns true/false indicating if the item is a WidgetBaseConstructor\n */\nexport function isWidgetBaseConstructor(item) {\n    return Boolean(item && item._type === WIDGET_BASE_TYPE);\n}\nexport function isWidgetFunction(item) {\n    return Boolean(item && item.isWidget);\n}\nexport function isWNodeFactory(node) {\n    if (typeof node === 'function' && node.isFactory) {\n        return true;\n    }\n    return false;\n}\nexport function isWidget(item) {\n    return isWidgetBaseConstructor(item) || isWidgetFunction(item);\n}\nexport function isWidgetConstructorDefaultExport(item) {\n    return Boolean(item &&\n        item.hasOwnProperty('__esModule') &&\n        item.hasOwnProperty('default') &&\n        (isWidget(item.default) || isWNodeFactory(item.default)));\n}\n/**\n * The Registry implementation\n */\nexport class Registry extends Evented {\n    /**\n     * Emit loaded event for registry label\n     */\n    emitLoadedEvent(widgetLabel, item) {\n        this.emit({\n            type: widgetLabel,\n            action: 'loaded',\n            item\n        });\n    }\n    define(label, item) {\n        if (this._widgetRegistry === undefined) {\n            this._widgetRegistry = new Map();\n        }\n        if (this._widgetRegistry.has(label)) {\n            throw new Error(`widget has already been registered for '${label.toString()}'`);\n        }\n        this._widgetRegistry.set(label, item);\n        if (item instanceof Promise) {\n            item.then((widgetCtor) => {\n                this._widgetRegistry.set(label, widgetCtor);\n                this.emitLoadedEvent(label, widgetCtor);\n                return widgetCtor;\n            }, (error) => {\n                throw error;\n            });\n        }\n        else if (isWidgetBaseConstructor(item)) {\n            this.emitLoadedEvent(label, item);\n        }\n    }\n    defineInjector(label, injectorFactory) {\n        if (this._injectorRegistry === undefined) {\n            this._injectorRegistry = new Map();\n        }\n        if (this._injectorRegistry.has(label)) {\n            throw new Error(`injector has already been registered for '${label.toString()}'`);\n        }\n        const invalidator = new Evented();\n        const injectorItem = {\n            injector: injectorFactory(() => invalidator.emit({ type: 'invalidate' })),\n            invalidator\n        };\n        this._injectorRegistry.set(label, injectorItem);\n        this.emitLoadedEvent(label, injectorItem);\n    }\n    get(label) {\n        if (!this._widgetRegistry || !this.has(label)) {\n            return null;\n        }\n        const item = this._widgetRegistry.get(label);\n        if (isWidget(item) || isWNodeFactory(item)) {\n            return item;\n        }\n        if (item instanceof Promise) {\n            return null;\n        }\n        const promise = item();\n        this._widgetRegistry.set(label, promise);\n        promise.then((widgetCtor) => {\n            if (isWidgetConstructorDefaultExport(widgetCtor)) {\n                widgetCtor = widgetCtor.default;\n            }\n            this._widgetRegistry.set(label, widgetCtor);\n            this.emitLoadedEvent(label, widgetCtor);\n            return widgetCtor;\n        }, (error) => {\n            throw error;\n        });\n        return null;\n    }\n    getInjector(label) {\n        if (!this._injectorRegistry || !this.hasInjector(label)) {\n            return null;\n        }\n        return this._injectorRegistry.get(label);\n    }\n    has(label) {\n        return Boolean(this._widgetRegistry && this._widgetRegistry.has(label));\n    }\n    hasInjector(label) {\n        return Boolean(this._injectorRegistry && this._injectorRegistry.has(label));\n    }\n}\nexport default Registry;\n//# sourceMappingURL=Registry.mjs.map","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import has from '../core/has';\nexport let assign;\n/**\n * Gets the own property descriptor of the specified object.\n * An own property descriptor is one that is defined directly on the object and is not\n * inherited from the object's prototype.\n * @param o Object that contains the property.\n * @param p Name of the property.\n */\nexport let getOwnPropertyDescriptor;\n/**\n * Returns the names of the own properties of an object. The own properties of an object are those that are defined directly\n * on that object, and are not inherited from the object's prototype. The properties of an object include both fields (objects) and functions.\n * @param o Object that contains the own properties.\n */\nexport let getOwnPropertyNames;\n/**\n * Returns an array of all symbol properties found directly on object o.\n * @param o Object to retrieve the symbols from.\n */\nexport let getOwnPropertySymbols;\n/**\n * Returns true if the values are the same value, false otherwise.\n * @param value1 The first value.\n * @param value2 The second value.\n */\nexport let is;\n/**\n * Returns the names of the enumerable properties and methods of an object.\n * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n */\nexport let keys;\n/* ES7 Object static methods */\nexport let getOwnPropertyDescriptors;\nexport let entries;\nexport let values;\nif (!true) {\n    const keys = Object.keys.bind(Object);\n    Object.keys = function symbolAwareKeys(o) {\n        return keys(o).filter((key) => !Boolean(key.match(/^@@.+/)));\n    };\n    Object.assign = function assign(target, ...sources) {\n        if (target == null) {\n            // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n        const to = Object(target);\n        sources.forEach((nextSource) => {\n            if (nextSource) {\n                // Skip over if undefined or null\n                keys(nextSource).forEach((nextKey) => {\n                    to[nextKey] = nextSource[nextKey];\n                });\n            }\n        });\n        return to;\n    };\n    const getOwnPropertyNames = Object.getOwnPropertyNames.bind(Object);\n    Object.getOwnPropertyNames = function symbolAwareGetOwnPropertyNames(o) {\n        return getOwnPropertyNames(o).filter((key) => !Boolean(key.match(/^@@.+/)));\n    };\n    Object.getOwnPropertySymbols = function getOwnPropertySymbols(o) {\n        return getOwnPropertyNames(o)\n            .filter((key) => Boolean(key.match(/^@@.+/)))\n            .map((key) => Symbol.for(key.substring(2)));\n    };\n    Object.is = function is(value1, value2) {\n        if (value1 === value2) {\n            return value1 !== 0 || 1 / value1 === 1 / value2; // -0\n        }\n        return value1 !== value1 && value2 !== value2; // NaN\n    };\n}\nif (!true) {\n    Object.getOwnPropertyDescriptors = function getOwnPropertyDescriptors(o) {\n        return Object.getOwnPropertyNames(o).reduce((previous, key) => {\n            previous[key] = Object.getOwnPropertyDescriptor(o, key);\n            return previous;\n        }, {});\n    };\n    Object.entries = function entries(o) {\n        return keys(o).map((key) => [key, o[key]]);\n    };\n    Object.values = function values(o) {\n        return keys(o).map((key) => o[key]);\n    };\n}\nassign = Object.assign;\ngetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\ngetOwnPropertyNames = Object.getOwnPropertyNames;\ngetOwnPropertySymbols = Object.getOwnPropertySymbols;\nis = Object.is;\nkeys = Object.keys;\ngetOwnPropertyDescriptors = Object.getOwnPropertyDescriptors;\nentries = Object.entries;\nvalues = Object.values;\nexport default Object;\n//# sourceMappingURL=object.mjs.map","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport Registry from './Registry';\nimport { WidgetBase } from './WidgetBase';\nimport { renderer, w, dom, isTextNode } from './vdom';\nimport { from } from '../shim/array';\nimport global from '../shim/global';\nimport { registerThemeInjector } from './mixins/Themed';\nimport { alwaysRender } from './decorators/alwaysRender';\nconst RESERVED_PROPS = ['focus'];\nexport var CustomElementChildType;\n(function (CustomElementChildType) {\n    CustomElementChildType[\"DOJO\"] = \"DOJO\";\n    CustomElementChildType[\"NODE\"] = \"NODE\";\n    CustomElementChildType[\"TEXT\"] = \"TEXT\";\n})(CustomElementChildType || (CustomElementChildType = {}));\nfunction isElement(item) {\n    return item && item.nodeType === 1;\n}\nfunction isDojoChild(item) {\n    return isElement(item) && item.tagName.indexOf('-') > -1;\n}\nexport function DomToWidgetWrapper(domNode) {\n    let DomToWidgetWrapper = class DomToWidgetWrapper extends WidgetBase {\n        render() {\n            const properties = Object.keys(this.properties).reduce((props, key) => {\n                const value = this.properties[key];\n                if (key.indexOf('on') === 0 || RESERVED_PROPS.indexOf(key) !== -1) {\n                    key = `__${key}`;\n                }\n                props[key] = value;\n                return props;\n            }, {});\n            return dom({ node: domNode, props: properties, diffType: 'dom' });\n        }\n        static get domNode() {\n            return domNode;\n        }\n    };\n    DomToWidgetWrapper = __decorate([\n        alwaysRender()\n    ], DomToWidgetWrapper);\n    return DomToWidgetWrapper;\n}\nexport function create(descriptor, WidgetConstructor) {\n    const { attributes = [], registryFactory = () => new Registry() } = descriptor;\n    const attributeMap = {};\n    attributes.forEach((propertyName) => {\n        const attributeName = propertyName.toLowerCase();\n        attributeMap[attributeName] = propertyName;\n    });\n    return class extends HTMLElement {\n        constructor() {\n            super(...arguments);\n            this._properties = {};\n            this._children = [];\n            this._eventProperties = {};\n            this._propertiesMap = {};\n            this._initialised = false;\n            this._childType = descriptor.childType;\n        }\n        connectedCallback() {\n            if (this._initialised) {\n                return;\n            }\n            this._waitTillReady();\n        }\n        _hasBeenParsed() {\n            if (document.readyState !== 'loading') {\n                return true;\n            }\n            let element = this;\n            while (element) {\n                if (element.nextSibling) {\n                    return true;\n                }\n                element = element.parentNode;\n            }\n            return false;\n        }\n        _waitTillReady() {\n            this._initialised = true;\n            if (this._hasBeenParsed()) {\n                this._readyCallback();\n            }\n            else {\n                setTimeout(() => {\n                    this._waitTillReady();\n                }, 100);\n            }\n        }\n        _readyCallback() {\n            const domProperties = {};\n            const { properties = [], events = [] } = descriptor;\n            this._properties = Object.assign({}, this._properties, this._attributesToProperties(attributes));\n            [...attributes, ...properties].forEach((propertyName) => {\n                const isReservedProp = RESERVED_PROPS.indexOf(propertyName) !== -1;\n                const value = this._propertiesMap[propertyName] || !isReservedProp ? this[propertyName] : undefined;\n                let filteredPropertyName = propertyName.replace(/^on/, '__');\n                if (isReservedProp) {\n                    filteredPropertyName = `__${propertyName}`;\n                }\n                if (value !== undefined) {\n                    this._properties[propertyName] = value;\n                }\n                if (filteredPropertyName !== propertyName) {\n                    domProperties[filteredPropertyName] = {\n                        get: () => this._getProperty(propertyName),\n                        set: (value) => this._setProperty(propertyName, value)\n                    };\n                }\n                if (!isReservedProp) {\n                    domProperties[propertyName] = {\n                        get: () => this._getProperty(propertyName),\n                        set: (value) => this._setProperty(propertyName, value)\n                    };\n                }\n            });\n            events.forEach((propertyName) => {\n                const eventName = propertyName.replace(/^on/, '').toLowerCase();\n                const filteredPropertyName = propertyName.replace(/^on/, '__on');\n                domProperties[filteredPropertyName] = {\n                    get: () => this._getEventProperty(propertyName),\n                    set: (value) => this._setEventProperty(propertyName, value)\n                };\n                this._eventProperties[propertyName] = undefined;\n                this._properties[propertyName] = (...args) => {\n                    const eventCallback = this._getEventProperty(propertyName);\n                    if (typeof eventCallback === 'function') {\n                        eventCallback(...args);\n                    }\n                    this.dispatchEvent(new CustomEvent(eventName, {\n                        bubbles: false,\n                        detail: args\n                    }));\n                };\n            });\n            Object.defineProperties(this, domProperties);\n            const children = from(this.childNodes).filter((childNode) => !isTextNode(childNode) || childNode.data.replace(/^\\s+|\\s+$/g, ''));\n            if (!this._childType) {\n                if (children.some((child) => isDojoChild(child))) {\n                    this._childType = CustomElementChildType.DOJO;\n                }\n                else {\n                    this._childType = CustomElementChildType.NODE;\n                }\n            }\n            from(children).forEach((childNode) => {\n                if (this._childType === CustomElementChildType.DOJO) {\n                    childNode.addEventListener('dojo-ce-render', () => this._render());\n                    childNode.addEventListener('dojo-ce-connected', () => this._render());\n                    this._children.push(DomToWidgetWrapper(childNode));\n                }\n                else {\n                    this._children.push(dom({ node: childNode, diffType: 'dom' }));\n                }\n            });\n            this.addEventListener('dojo-ce-connected', (e) => this._childConnected(e));\n            const widgetProperties = this._properties;\n            const renderChildren = () => this.__children__();\n            const Wrapper = class extends WidgetBase {\n                render() {\n                    return w(WidgetConstructor, widgetProperties, renderChildren());\n                }\n            };\n            const registry = registryFactory();\n            const themeContext = registerThemeInjector(this._getTheme(), registry);\n            global.addEventListener('dojo-theme-set', () => themeContext.set(this._getTheme()));\n            const r = renderer(() => w(Wrapper, {}));\n            this._renderer = r;\n            r.mount({ domNode: this, merge: false, registry });\n            const root = this.children[0];\n            if (root) {\n                const { display = 'block' } = global.getComputedStyle(root);\n                this.style.display = display;\n            }\n            this.dispatchEvent(new CustomEvent('dojo-ce-connected', {\n                bubbles: true,\n                detail: this\n            }));\n        }\n        _getTheme() {\n            if (global && global.dojoce && global.dojoce.theme) {\n                return global.dojoce.themes[global.dojoce.theme];\n            }\n        }\n        _childConnected(e) {\n            const node = e.detail;\n            if (node.parentNode === this) {\n                const exists = this._children.some((child) => child.domNode === node);\n                if (!exists) {\n                    node.addEventListener('dojo-ce-render', () => this._render());\n                    this._children.push(DomToWidgetWrapper(node));\n                    this._render();\n                }\n            }\n        }\n        _render() {\n            if (this._renderer) {\n                this._renderer.invalidate();\n                this.dispatchEvent(new CustomEvent('dojo-ce-render', {\n                    bubbles: false,\n                    detail: this\n                }));\n            }\n        }\n        __properties__() {\n            return Object.assign({}, this._properties, this._eventProperties);\n        }\n        __children__() {\n            if (this._childType === CustomElementChildType.DOJO) {\n                return this._children.filter((Child) => Child.domNode.isWidget).map((Child) => {\n                    const { domNode } = Child;\n                    return w(Child, Object.assign({}, domNode.__properties__()), [...domNode.__children__()]);\n                });\n            }\n            else {\n                return this._children;\n            }\n        }\n        attributeChangedCallback(name, oldValue, value) {\n            const propertyName = attributeMap[name];\n            this._setProperty(propertyName, value);\n        }\n        _setEventProperty(propertyName, value) {\n            this._eventProperties[propertyName] = value;\n        }\n        _getEventProperty(propertyName) {\n            return this._eventProperties[propertyName];\n        }\n        _setProperty(propertyName, value) {\n            this._properties[propertyName] = value;\n            this._render();\n        }\n        _getProperty(propertyName) {\n            return this._properties[propertyName];\n        }\n        _attributesToProperties(attributes) {\n            return attributes.reduce((properties, propertyName) => {\n                const attributeName = propertyName.toLowerCase();\n                const value = this.getAttribute(attributeName);\n                if (value !== null) {\n                    properties[propertyName] = value;\n                }\n                return properties;\n            }, {});\n        }\n        static get observedAttributes() {\n            return Object.keys(attributeMap);\n        }\n        get isWidget() {\n            return true;\n        }\n        set(key, value) {\n            this._propertiesMap[key] = value;\n            if (this._renderer) {\n                this._setProperty(key, value);\n            }\n        }\n    };\n}\nexport function register(WidgetConstructor) {\n    const descriptor = WidgetConstructor.__customElementDescriptor;\n    if (!descriptor) {\n        throw new Error('Cannot get descriptor for Custom Element, have you added the @customElement decorator to your Widget?');\n    }\n    global.customElements.define(descriptor.tagName, create(descriptor, WidgetConstructor));\n}\nexport default register;\n//# sourceMappingURL=registerCustomElement.mjs.map","import { WidgetBase } from '@dojo/framework/core/WidgetBase';\nimport { DNode } from '@dojo/framework/core/interfaces';\nimport { ThemedMixin, ThemedProperties, theme } from '@dojo/framework/core/mixins/Themed';\nimport { v } from '@dojo/framework/core/vdom';\nimport { CustomAriaProperties } from '../common/interfaces';\nimport { formatAriaProperties } from '../common/util';\nimport * as css from '../theme/icon.m.css';\nimport * as baseCss from '../common/styles/base.m.css';\n\nexport type IconType = keyof typeof css;\n\n/**\n * @type IconProperties\n *\n * Properties that can be set on an Icon component\n *\n * @property type           Icon type, e.g. downIcon, searchIcon, etc.\n * @property altText        An optional, visually hidden label for the icon\n */\nexport interface IconProperties extends ThemedProperties, CustomAriaProperties {\n\ttype: IconType;\n\taltText?: string;\n}\n\n@theme(css)\nexport class Icon extends ThemedMixin(WidgetBase)<IconProperties> {\n\tprotected renderAltText(altText: string): DNode {\n\t\treturn v('span', { classes: [baseCss.visuallyHidden] }, [altText]);\n\t}\n\n\trender(): DNode {\n\t\tconst {\n\t\t\taria = {\n\t\t\t\thidden: 'true'\n\t\t\t},\n\t\t\ttype,\n\t\t\taltText\n\t\t} = this.properties;\n\n\t\treturn v('span', { classes: this.theme(css.root) }, [\n\t\t\tv('i', {\n\t\t\t\t...formatAriaProperties(aria),\n\t\t\t\tclasses: this.theme([css.icon, css[type]])\n\t\t\t}),\n\t\t\taltText ? this.renderAltText(altText) : null\n\t\t]);\n\t}\n}\n\nexport default Icon;\n","import global from '../shim/global';\n/**\n * A cache of results of feature tests\n */\nexport const testCache = {};\n/**\n * A cache of the un-resolved feature tests\n */\nexport const testFunctions = {};\n/* Grab the staticFeatures if there are available */\nconst { staticFeatures } = global.DojoHasEnvironment || {};\n/* Cleaning up the DojoHasEnviornment */\nif ('DojoHasEnvironment' in global) {\n    delete global.DojoHasEnvironment;\n}\n/**\n * Custom type guard to narrow the `staticFeatures` to either a map or a function that\n * returns a map.\n *\n * @param value The value to guard for\n */\nfunction isStaticFeatureFunction(value) {\n    return typeof value === 'function';\n}\n/**\n * The cache of asserted features that were available in the global scope when the\n * module loaded\n */\nconst staticCache = staticFeatures\n    ? isStaticFeatureFunction(staticFeatures)\n        ? staticFeatures.apply(global)\n        : staticFeatures\n    : {}; /* Providing an empty cache, if none was in the environment\n\n\n/**\n* AMD plugin function.\n*\n* Resolves resourceId into a module id based on possibly-nested tenary expression that branches on has feature test\n* value(s).\n*\n* @param resourceId The id of the module\n* @param normalize Resolves a relative module id into an absolute module id\n*/\nexport function normalize(resourceId, normalize) {\n    const tokens = resourceId.match(/[\\?:]|[^:\\?]*/g) || [];\n    let i = 0;\n    function get(skip) {\n        const term = tokens[i++];\n        if (term === ':') {\n            // empty string module name, resolves to null\n            return null;\n        }\n        else {\n            // postfixed with a ? means it is a feature to branch on, the term is the name of the feature\n            if (tokens[i++] === '?') {\n                if (!skip && has(term)) {\n                    // matched the feature, get the first value from the options\n                    return get();\n                }\n                else {\n                    // did not match, get the second value, passing over the first\n                    get(true);\n                    return get(skip);\n                }\n            }\n            // a module\n            return term;\n        }\n    }\n    const id = get();\n    return id && normalize(id);\n}\n/**\n * Check if a feature has already been registered\n *\n * @param feature the name of the feature\n */\nexport function exists(feature) {\n    const normalizedFeature = feature.toLowerCase();\n    return Boolean(normalizedFeature in staticCache || normalizedFeature in testCache || testFunctions[normalizedFeature]);\n}\n/**\n * Register a new test for a named feature.\n *\n * @example\n * has.add('dom-addeventlistener', !!document.addEventListener);\n *\n * @example\n * has.add('touch-events', function () {\n *    return 'ontouchstart' in document\n * });\n *\n * @param feature the name of the feature\n * @param value the value reported of the feature, or a function that will be executed once on first test\n * @param overwrite if an existing value should be overwritten. Defaults to false.\n */\nexport function add(feature, value, overwrite = false) {\n    const normalizedFeature = feature.toLowerCase();\n    if (exists(normalizedFeature) && !overwrite && !(normalizedFeature in staticCache)) {\n        throw new TypeError(`Feature \"${feature}\" exists and overwrite not true.`);\n    }\n    if (typeof value === 'function') {\n        testFunctions[normalizedFeature] = value;\n    }\n    else {\n        testCache[normalizedFeature] = value;\n        delete testFunctions[normalizedFeature];\n    }\n}\n/**\n * Return the current value of a named feature.\n *\n * @param feature The name of the feature to test.\n */\nexport default function has(feature, strict = false) {\n    let result;\n    const normalizedFeature = feature.toLowerCase();\n    if (normalizedFeature in staticCache) {\n        result = staticCache[normalizedFeature];\n    }\n    else if (testFunctions[normalizedFeature]) {\n        result = testCache[normalizedFeature] = testFunctions[normalizedFeature].call(null);\n        delete testFunctions[normalizedFeature];\n    }\n    else if (normalizedFeature in testCache) {\n        result = testCache[normalizedFeature];\n    }\n    else if (strict) {\n        throw new TypeError(`Attempt to detect unregistered has feature \"${feature}\"`);\n    }\n    return result;\n}\n/*\n * Out of the box feature tests\n */\nadd('public-path', undefined);\n/* flag for dojo debug, default to false */\nadd('dojo-debug', false);\n/* Detects if the environment is \"browser like\" */\nadd('host-browser', typeof document !== 'undefined' && typeof location !== 'undefined');\n/* Detects if the environment appears to be NodeJS */\nadd('host-node', function () {\n    if (typeof process === 'object' && process.versions && process.versions.node) {\n        return process.versions.node;\n    }\n});\nadd('fetch', 'fetch' in global && typeof global.fetch === 'function', true);\nadd('es6-array', () => {\n    return (['from', 'of'].every((key) => key in global.Array) &&\n        ['findIndex', 'find', 'copyWithin'].every((key) => key in global.Array.prototype));\n}, true);\nadd('es6-array-fill', () => {\n    if ('fill' in global.Array.prototype) {\n        /* Some versions of Safari do not properly implement this */\n        return [1].fill(9, Number.POSITIVE_INFINITY)[0] === 1;\n    }\n    return false;\n}, true);\nadd('es7-array', () => 'includes' in global.Array.prototype, true);\n/* Map */\nadd('es6-map', () => {\n    if (typeof global.Map === 'function') {\n        /*\n    IE11 and older versions of Safari are missing critical ES6 Map functionality\n    We wrap this in a try/catch because sometimes the Map constructor exists, but does not\n    take arguments (iOS 8.4)\n     */\n        try {\n            const map = new global.Map([[0, 1]]);\n            return (map.has(0) &&\n                typeof map.keys === 'function' &&\n                has('es6-symbol') &&\n                typeof map.values === 'function' &&\n                typeof map.entries === 'function');\n        }\n        catch (e) {\n            /* istanbul ignore next: not testing on iOS at the moment */\n            return false;\n        }\n    }\n    return false;\n}, true);\nadd('es6-iterator', () => has('es6-map'));\n/* Math */\nadd('es6-math', () => {\n    return [\n        'clz32',\n        'sign',\n        'log10',\n        'log2',\n        'log1p',\n        'expm1',\n        'cosh',\n        'sinh',\n        'tanh',\n        'acosh',\n        'asinh',\n        'atanh',\n        'trunc',\n        'fround',\n        'cbrt',\n        'hypot'\n    ].every((name) => typeof global.Math[name] === 'function');\n}, true);\nadd('es6-math-imul', () => {\n    if ('imul' in global.Math) {\n        /* Some versions of Safari on ios do not properly implement this */\n        return Math.imul(0xffffffff, 5) === -5;\n    }\n    return false;\n}, true);\n/* Object */\nadd('es6-object', () => {\n    return (has('es6-symbol') &&\n        ['assign', 'is', 'getOwnPropertySymbols', 'setPrototypeOf'].every((name) => typeof global.Object[name] === 'function'));\n}, true);\nadd('es2017-object', () => {\n    return ['values', 'entries', 'getOwnPropertyDescriptors'].every((name) => typeof global.Object[name] === 'function');\n}, true);\n/* Observable */\nadd('es-observable', () => typeof global.Observable !== 'undefined', true);\n/* Promise */\nadd('es6-promise', () => typeof global.Promise !== 'undefined' && has('es6-symbol'), true);\nadd('es2018-promise-finally', () => has('es6-promise') && typeof global.Promise.prototype.finally !== 'undefined', true);\n/* Set */\nadd('es6-set', () => {\n    if (typeof global.Set === 'function') {\n        /* IE11 and older versions of Safari are missing critical ES6 Set functionality */\n        const set = new global.Set([1]);\n        return set.has(1) && 'keys' in set && typeof set.keys === 'function' && has('es6-symbol');\n    }\n    return false;\n}, true);\n/* String */\nadd('es6-string', () => {\n    return ([\n        /* static methods */\n        'fromCodePoint'\n    ].every((key) => typeof global.String[key] === 'function') &&\n        [\n            /* instance methods */\n            'codePointAt',\n            'normalize',\n            'repeat',\n            'startsWith',\n            'endsWith',\n            'includes'\n        ].every((key) => typeof global.String.prototype[key] === 'function'));\n}, true);\nadd('es6-string-raw', () => {\n    function getCallSite(callSite, ...substitutions) {\n        const result = [...callSite];\n        result.raw = callSite.raw;\n        return result;\n    }\n    if ('raw' in global.String) {\n        let b = 1;\n        let callSite = getCallSite `a\\n${b}`;\n        callSite.raw = ['a\\\\n'];\n        const supportsTrunc = global.String.raw(callSite, 42) === 'a\\\\n';\n        return supportsTrunc;\n    }\n    return false;\n}, true);\nadd('es2017-string', () => {\n    return ['padStart', 'padEnd'].every((key) => typeof global.String.prototype[key] === 'function');\n}, true);\n/* Symbol */\nadd('es6-symbol', () => typeof global.Symbol !== 'undefined' && typeof Symbol() === 'symbol', true);\n/* WeakMap */\nadd('es6-weakmap', () => {\n    if (typeof global.WeakMap !== 'undefined') {\n        /* IE11 and older versions of Safari are missing critical ES6 Map functionality */\n        const key1 = {};\n        const key2 = {};\n        const map = new global.WeakMap([[key1, 1]]);\n        Object.freeze(key1);\n        return map.get(key1) === 1 && map.set(key2, 2) === map && has('es6-symbol');\n    }\n    return false;\n}, true);\n/* Miscellaneous features */\nadd('microtasks', () => has('es6-promise') || has('host-node') || has('dom-mutationobserver'), true);\nadd('postmessage', () => {\n    // If window is undefined, and we have postMessage, it probably means we're in a web worker. Web workers have\n    // post message but it doesn't work how we expect it to, so it's best just to pretend it doesn't exist.\n    return typeof global.window !== 'undefined' && typeof global.postMessage === 'function';\n}, true);\nadd('raf', () => typeof global.requestAnimationFrame === 'function', true);\nadd('setimmediate', () => typeof global.setImmediate !== 'undefined', true);\n/* DOM Features */\nadd('dom-mutationobserver', () => {\n    if (has('host-browser') && Boolean(global.MutationObserver || global.WebKitMutationObserver)) {\n        // IE11 has an unreliable MutationObserver implementation where setProperty() does not\n        // generate a mutation event, observers can crash, and the queue does not drain\n        // reliably. The following feature test was adapted from\n        // https://gist.github.com/t10ko/4aceb8c71681fdb275e33efe5e576b14\n        const example = document.createElement('div');\n        /* tslint:disable-next-line:variable-name */\n        const HostMutationObserver = global.MutationObserver || global.WebKitMutationObserver;\n        const observer = new HostMutationObserver(function () { });\n        observer.observe(example, { attributes: true });\n        example.style.setProperty('display', 'block');\n        return Boolean(observer.takeRecords().length);\n    }\n    return false;\n}, true);\nadd('dom-webanimation', () => has('host-browser') && global.Animation !== undefined && global.KeyframeEffect !== undefined, true);\nadd('abort-controller', () => typeof global.AbortController !== 'undefined');\nadd('abort-signal', () => typeof global.AbortSignal !== 'undefined');\nadd('dom-intersection-observer', () => has('host-browser') && global.IntersectionObserver !== undefined, true);\nadd('dom-resize-observer', () => has('host-browser') && global.ResizeObserver !== undefined, true);\nadd('dom-pointer-events', () => has('host-browser') && global.onpointerdown !== undefined, true);\nadd('build-elide', false);\nadd('test', false);\nadd('global-this', () => typeof global.globalThis !== 'undefined');\n//# sourceMappingURL=has.mjs.map","import global from './global';\nvar isArrayLike = undefined;\n// !has('es6-iterator')\n// elided: import './iterator'\nimport has from '../core/has';\n// !has('es6-symbol')\n// elided: import './Symbol'\nexport let WeakMap = global.WeakMap;\nif (!true) {\n    const DELETED = {};\n    const getUID = function getUID() {\n        return Math.floor(Math.random() * 100000000);\n    };\n    const generateName = (function () {\n        let startId = Math.floor(Date.now() % 100000000);\n        return function generateName() {\n            return '__wm' + getUID() + (startId++ + '__');\n        };\n    })();\n    WeakMap = global.WeakMap = class WeakMap {\n        constructor(iterable) {\n            this[Symbol.toStringTag] = 'WeakMap';\n            this._name = generateName();\n            this._frozenEntries = [];\n            if (iterable) {\n                if (isArrayLike(iterable)) {\n                    for (let i = 0; i < iterable.length; i++) {\n                        const item = iterable[i];\n                        this.set(item[0], item[1]);\n                    }\n                }\n                else {\n                    for (const [key, value] of iterable) {\n                        this.set(key, value);\n                    }\n                }\n            }\n        }\n        _getFrozenEntryIndex(key) {\n            for (let i = 0; i < this._frozenEntries.length; i++) {\n                if (this._frozenEntries[i].key === key) {\n                    return i;\n                }\n            }\n            return -1;\n        }\n        delete(key) {\n            if (key === undefined || key === null) {\n                return false;\n            }\n            const entry = key[this._name];\n            if (entry && entry.key === key && entry.value !== DELETED) {\n                entry.value = DELETED;\n                return true;\n            }\n            const frozenIndex = this._getFrozenEntryIndex(key);\n            if (frozenIndex >= 0) {\n                this._frozenEntries.splice(frozenIndex, 1);\n                return true;\n            }\n            return false;\n        }\n        get(key) {\n            if (key === undefined || key === null) {\n                return undefined;\n            }\n            const entry = key[this._name];\n            if (entry && entry.key === key && entry.value !== DELETED) {\n                return entry.value;\n            }\n            const frozenIndex = this._getFrozenEntryIndex(key);\n            if (frozenIndex >= 0) {\n                return this._frozenEntries[frozenIndex].value;\n            }\n        }\n        has(key) {\n            if (key === undefined || key === null) {\n                return false;\n            }\n            const entry = key[this._name];\n            if (Boolean(entry && entry.key === key && entry.value !== DELETED)) {\n                return true;\n            }\n            const frozenIndex = this._getFrozenEntryIndex(key);\n            if (frozenIndex >= 0) {\n                return true;\n            }\n            return false;\n        }\n        set(key, value) {\n            if (!key || (typeof key !== 'object' && typeof key !== 'function')) {\n                throw new TypeError('Invalid value used as weak map key');\n            }\n            let entry = key[this._name];\n            if (!entry || entry.key !== key) {\n                entry = Object.create(null, {\n                    key: { value: key }\n                });\n                if (Object.isFrozen(key)) {\n                    this._frozenEntries.push(entry);\n                }\n                else {\n                    Object.defineProperty(key, this._name, {\n                        value: entry\n                    });\n                }\n            }\n            entry.value = value;\n            return this;\n        }\n    };\n}\nexport default WeakMap;","import { WIDGET_BASE_TYPE } from './Registry';\nfunction isObjectOrArray(value) {\n    return Object.prototype.toString.call(value) === '[object Object]' || Array.isArray(value);\n}\nexport function always(previousProperty, newProperty) {\n    return {\n        changed: true,\n        value: newProperty\n    };\n}\nexport function ignore(previousProperty, newProperty) {\n    return {\n        changed: false,\n        value: newProperty\n    };\n}\nexport function reference(previousProperty, newProperty) {\n    return {\n        changed: previousProperty !== newProperty,\n        value: newProperty\n    };\n}\nexport function shallow(previousProperty, newProperty, depth = 0) {\n    let changed = false;\n    const validOldProperty = previousProperty && isObjectOrArray(previousProperty);\n    const validNewProperty = newProperty && isObjectOrArray(newProperty);\n    if (!validOldProperty || !validNewProperty) {\n        return {\n            changed: true,\n            value: newProperty\n        };\n    }\n    const previousKeys = Object.keys(previousProperty);\n    const newKeys = Object.keys(newProperty);\n    if (previousKeys.length !== newKeys.length) {\n        changed = true;\n    }\n    else {\n        changed = newKeys.some((key) => {\n            if (depth > 0) {\n                return shallow(newProperty[key], previousProperty[key], depth - 1).changed;\n            }\n            return newProperty[key] !== previousProperty[key];\n        });\n    }\n    return {\n        changed,\n        value: newProperty\n    };\n}\nexport function auto(previousProperty, newProperty) {\n    let result;\n    if (typeof newProperty === 'function') {\n        if (newProperty._type === WIDGET_BASE_TYPE) {\n            result = reference(previousProperty, newProperty);\n        }\n        else {\n            result = ignore(previousProperty, newProperty);\n        }\n    }\n    else if (isObjectOrArray(newProperty)) {\n        result = shallow(previousProperty, newProperty);\n    }\n    else {\n        result = reference(previousProperty, newProperty);\n    }\n    return result;\n}\n//# sourceMappingURL=diff.mjs.map","/**\n * Generic decorator handler to take care of whether or not the decorator was called at the class level\n * or the method level.\n *\n * @param handler\n */\nexport function handleDecorator(handler) {\n    return function (target, propertyKey, descriptor) {\n        if (typeof target === 'function') {\n            handler(target.prototype, undefined);\n        }\n        else {\n            handler(target, propertyKey);\n        }\n    };\n}\nexport default handleDecorator;\n//# sourceMappingURL=handleDecorator.mjs.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport { Injector } from './../Injector';\nimport { inject } from './../decorators/inject';\nimport { handleDecorator } from './../decorators/handleDecorator';\nimport { diffProperty } from './../decorators/diffProperty';\nimport { shallow } from './../diff';\nexport const THEME_KEY = ' _key';\nexport const INJECTED_THEME_KEY = '__theme_injector';\n/**\n * Decorator for base css classes\n */\nexport function theme(theme) {\n    return handleDecorator((target) => {\n        target.addDecorator('baseThemeClasses', theme);\n    });\n}\n/**\n * Creates a reverse lookup for the classes passed in via the `theme` function.\n *\n * @param classes The baseClasses object\n * @requires\n */\nfunction createThemeClassesLookup(classes) {\n    return classes.reduce((currentClassNames, baseClass) => {\n        Object.keys(baseClass).forEach((key) => {\n            currentClassNames[baseClass[key]] = key;\n        });\n        return currentClassNames;\n    }, {});\n}\n/**\n * Convenience function that is given a theme and an optional registry, the theme\n * injector is defined against the registry, returning the theme.\n *\n * @param theme the theme to set\n * @param themeRegistry registry to define the theme injector against. Defaults\n * to the global registry\n *\n * @returns the theme injector used to set the theme\n */\nexport function registerThemeInjector(theme, themeRegistry) {\n    const themeInjector = new Injector(theme);\n    themeRegistry.defineInjector(INJECTED_THEME_KEY, (invalidator) => {\n        themeInjector.setInvalidator(invalidator);\n        return () => themeInjector;\n    });\n    return themeInjector;\n}\n/**\n * Function that returns a class decorated with with Themed functionality\n */\nexport function ThemedMixin(Base) {\n    let Themed = class Themed extends Base {\n        constructor() {\n            super(...arguments);\n            /**\n             * Registered base theme keys\n             */\n            this._registeredBaseThemeKeys = [];\n            /**\n             * Indicates if classes meta data need to be calculated.\n             */\n            this._recalculateClasses = true;\n            /**\n             * Loaded theme\n             */\n            this._theme = {};\n        }\n        theme(classes) {\n            if (this._recalculateClasses) {\n                this._recalculateThemeClasses();\n            }\n            if (Array.isArray(classes)) {\n                return classes.map((className) => this._getThemeClass(className));\n            }\n            return this._getThemeClass(classes);\n        }\n        /**\n         * Function fired when `theme` or `extraClasses` are changed.\n         */\n        onPropertiesChanged() {\n            this._recalculateClasses = true;\n        }\n        _getThemeClass(className) {\n            if (className === undefined || className === null || className === false || className === true) {\n                return className;\n            }\n            const extraClasses = this.properties.extraClasses || {};\n            const themeClassName = this._baseThemeClassesReverseLookup[className];\n            let resultClassNames = [];\n            if (!themeClassName) {\n                console.warn(`Class name: '${className}' not found in theme`);\n                return null;\n            }\n            if (this._classes) {\n                const classes = Object.keys(this._classes).reduce((classes, key) => {\n                    const classNames = Object.keys(this._classes[key]);\n                    for (let i = 0; i < classNames.length; i++) {\n                        const extraClass = this._classes[key][classNames[i]];\n                        if (classNames[i] === themeClassName && extraClass) {\n                            extraClass.forEach((className) => {\n                                if (className && className !== true) {\n                                    classes.push(className);\n                                }\n                            });\n                            break;\n                        }\n                    }\n                    return classes;\n                }, []);\n                resultClassNames.push(...classes);\n            }\n            if (extraClasses[themeClassName]) {\n                resultClassNames.push(extraClasses[themeClassName]);\n            }\n            if (this._theme[themeClassName]) {\n                resultClassNames.push(this._theme[themeClassName]);\n            }\n            else {\n                resultClassNames.push(this._registeredBaseTheme[themeClassName]);\n            }\n            return resultClassNames.join(' ');\n        }\n        _recalculateThemeClasses() {\n            const { theme = {}, classes = {} } = this.properties;\n            if (!this._registeredBaseTheme) {\n                const baseThemes = this.getDecorator('baseThemeClasses');\n                if (baseThemes.length === 0) {\n                    console.warn('A base theme has not been provided to this widget. Please use the @theme decorator to add a theme.');\n                }\n                this._registeredBaseTheme = baseThemes.reduce((finalBaseTheme, baseTheme) => {\n                    const _a = THEME_KEY, key = baseTheme[_a], classes = __rest(baseTheme, [typeof _a === \"symbol\" ? _a : _a + \"\"]);\n                    this._registeredBaseThemeKeys.push(key);\n                    return Object.assign({}, finalBaseTheme, classes);\n                }, {});\n                this._baseThemeClassesReverseLookup = createThemeClassesLookup(baseThemes);\n            }\n            this._theme = this._registeredBaseThemeKeys.reduce((baseTheme, themeKey) => {\n                return Object.assign({}, baseTheme, theme[themeKey]);\n            }, {});\n            this._classes = Object.keys(classes).reduce((computed, key) => {\n                if (this._registeredBaseThemeKeys.indexOf(key) > -1) {\n                    computed = Object.assign({}, computed, { [key]: classes[key] });\n                }\n                return computed;\n            }, {});\n            this._recalculateClasses = false;\n        }\n    };\n    __decorate([\n        diffProperty('theme', shallow),\n        diffProperty('extraClasses', shallow),\n        diffProperty('classes', shallow)\n    ], Themed.prototype, \"onPropertiesChanged\", null);\n    Themed = __decorate([\n        inject({\n            name: INJECTED_THEME_KEY,\n            getProperties: (theme, properties) => {\n                if (!properties.theme) {\n                    return { theme: theme.get() };\n                }\n                return {};\n            }\n        })\n    ], Themed);\n    return Themed;\n}\nexport default ThemedMixin;\n//# sourceMappingURL=Themed.mjs.map","import Map from '../shim/Map';\nimport { Destroyable } from './Destroyable';\n/**\n * Map of computed regular expressions, keyed by string\n */\nconst regexMap = new Map();\n/**\n * Determines if the event type glob has been matched\n *\n * @returns boolean that indicates if the glob is matched\n */\nexport function isGlobMatch(globString, targetString) {\n    if (typeof targetString === 'string' && typeof globString === 'string' && globString.indexOf('*') !== -1) {\n        let regex;\n        if (regexMap.has(globString)) {\n            regex = regexMap.get(globString);\n        }\n        else {\n            regex = new RegExp(`^${globString.replace(/\\*/g, '.*')}$`);\n            regexMap.set(globString, regex);\n        }\n        return regex.test(targetString);\n    }\n    else {\n        return globString === targetString;\n    }\n}\n/**\n * Event Class\n */\nexport class Evented extends Destroyable {\n    constructor() {\n        super(...arguments);\n        /**\n         * map of listeners keyed by event type\n         */\n        this.listenersMap = new Map();\n    }\n    emit(event) {\n        this.listenersMap.forEach((methods, type) => {\n            if (isGlobMatch(type, event.type)) {\n                [...methods].forEach((method) => {\n                    method.call(this, event);\n                });\n            }\n        });\n    }\n    on(type, listener) {\n        if (Array.isArray(listener)) {\n            const handles = listener.map((listener) => this._addListener(type, listener));\n            return {\n                destroy() {\n                    handles.forEach((handle) => handle.destroy());\n                }\n            };\n        }\n        return this._addListener(type, listener);\n    }\n    _addListener(type, listener) {\n        const listeners = this.listenersMap.get(type) || [];\n        listeners.push(listener);\n        this.listenersMap.set(type, listeners);\n        return {\n            destroy: () => {\n                const listeners = this.listenersMap.get(type) || [];\n                listeners.splice(listeners.indexOf(listener), 1);\n            }\n        };\n    }\n}\nexport default Evented;\n//# sourceMappingURL=Evented.mjs.map"],"sourceRoot":""}