{"version":3,"sources":["webpack://intersection_observer/WeakMap.ts","webpack://intersection_observer/Set.ts","webpack://intersection_observer/object.ts","webpack://intersection_observer/Map.ts","webpack://intersection_observer/Destroyable.ts","webpack://intersection_observer/Evented.ts","webpack://intersection_observer/Registry.ts","webpack://intersection_observer/diff.ts","webpack://intersection_observer/RegistryHandler.ts","webpack://intersection_observer/vdom.ts","webpack://intersection_observer/cache.ts","webpack://intersection_observer/icache.ts","webpack://intersection_observer/./src/listItemGenerator.ts","webpack://intersection_observer/IntersectionObserver.ts","webpack://intersection_observer/intersection.ts","webpack://intersection_observer/./src/widgets/Item.ts","webpack://intersection_observer/./src/widgets/InfiniteList.ts","webpack://intersection_observer/./src/widgets/App.ts","webpack://intersection_observer/./src/main.ts","webpack://intersection_observer/wrapper.ts","webpack://intersection_observer/./src/widgets/styles/Item.m.css","webpack://intersection_observer/./src/widgets/styles/infiniteList.m.css","webpack://intersection_observer/./src/widgets/styles/app.m.css"],"names":["shim_WeakMap","global","WeakMap","shim_Set","Set","object_assign","getOwnPropertyDescriptor","getOwnPropertyNames","getOwnPropertySymbols","is","keys","getOwnPropertyDescriptors","object_entries","values","Object","assign","entries","Map","shim_Map","noop","shim_Promise","resolve","destroyed","Error","Destroyable_Destroyable","[object Object]","this","handles","handle","_handles","push","splice","indexOf","destroy","forEach","own","regexMap","Evented_Evented","listenersMap","event","methods","type","globString","targetString","regex","has","get","RegExp","replace","set","test","isGlobMatch","method","call","listener","Array","isArray","map","_addListener","listeners","WIDGET_BASE_TYPE","isWidgetBaseConstructor","item","Boolean","_type","isWidgetFunction","isWidget","isWNodeFactory","node","isFactory","Registry_Registry","widgetLabel","emit","action","label","undefined","_widgetRegistry","toString","then","widgetCtor","emitLoadedEvent","error","injectorFactory","_injectorRegistry","invalidator","injectorItem","injector","promise","hasOwnProperty","default","isWidgetConstructorDefaultExport","hasInjector","isObjectOrArray","value","prototype","reference","previousProperty","newProperty","changed","auto","result","ignore","shallow","depth","validOldProperty","validNewProperty","previousKeys","newKeys","length","some","key","core_RegistryHandler","super","_registry","_registryWidgetLabelMap","_registryInjectorLabelMap","baseRegistry","delete","base","widget","define","defineInjector","globalPrecedence","_get","getFunctionName","labelMap","registries","i","registry","registeredLabels","on","EMPTY_ARRAY","nodeOperations","NAMESPACE_SVG","NAMESPACE_W3","NAMESPACE_XLINK","WNODE","VNODE","DOMVNODE","isTextNode","nodeType","isWNodeWrapper","child","isWNode","isVNodeWrapper","isVNode","isVirtualWrapper","tag","isBodyWrapper","wrapper","isDomVNode","w","widgetConstructorOrNode","properties","children","widgetConstructor","v","propertiesOrChildren","deferredPropertiesCallback","classes","styles","newProperties","__rest","_a","nodeClasses","nodeStyles","nodeProperties","REGISTRY_ITEM","FromRegistry","buildPreviousProperties","domNode","current","diffType","attributes","deferredProperties","events","propName","attrName","getAttribute","reduce","props","property","same","dnode1","dnode2","widgetConstructor1","registryItem","widgetConstructor2","instance","findIndexOfChild","sameAs","start","createClassPropValue","classNames","className","updateAttribute","attrValue","namespace","setAttributeNS","removeAttribute","setAttribute","arrayFrom","arr","slice","createFactory","callback","middlewares","factory","create","returns","widgetInstanceMap","widgetMetaMap","requestedDomNodes","wrapperId","metaId","addNodeToMap","id","widgetMeta","nodeMap","destroyHandles","destroyMap","clear","vdom_invalidator","widgetId","split","vdom_node","add","vdom_destroy","propertyName","diff","customDiffMap","customDiffProperties","propertyDiffMap","destroyFunction","registryHandler","isDeferred","deferRefs","vdom","renderer","_renderScheduled","parentInvalidate","_mountOptions","sync","merge","transition","document","body","_invalidationQueue","_processQueue","_deferredProcessQueue","_applicationQueue","_eventMap","_idToWrapperMap","_wrapperSiblingMap","_idToChildrenWrappers","_insertBeforeMap","_nodeToWrapperMap","_idleCallbacks","_deferredRenderCallbacks","_allMergedNodes","nodeOperation","propValue","previousValue","updateEvent","eventName","currentValue","previousEvent","removeEventListener","evt","target","addEventListener","removeOrphanedEvents","previousProperties","onlyEvents","isEvent","substr","eventCallback","resolveRegistryItem","owningNode","instanceData","registryLabel","isLazyDefine","renderedToWrapper","rendered","parent","currentParent","requiresInsertBefore","hasPreviousSiblings","wrappedRendered","hasParentWNode","hasVirtualParentNode","hasCurrentParentChildren","insertBefore","previousItem","nodes","pop","mapNodeToInstance","renderedItem","text","order","parentId","exitAnimation","hasAnimations","nextParent","owningId","runDeferredProperties","next","processProperties","findInsertBefore","searchNode","nextSibling","childDomWrapperId","childWrapper","parentNode","setValue","domValue","onInputValue","onSelectValue","setProperties","currentProperties","nextWrapper","includesEventsAndAttributes","propNames","propCount","previousClassString","currentClassString","merged","domClasses","styleNames","styleCount","j","styleName","newStyleValue","style","tagName","lastIndexOf","previousAttributes","attrNames","attrCount","updateAttributes","_schedule","_runInvalidationQueue","requestAnimationFrame","getWNodeWrapper","invalidationQueue","previouslyRendered","sort","a","b","_runProcessQueue","sibling","_updateWidget","_runDomInstructionQueue","_cleanUpMergedNodes","_runCallbacks","mergedNode","removeChild","setDomNodeOnParentWrapper","meta","_process","reverse","parentDomNode","onAttach","parentElement","enterAnimation","enterAnimationActive","enter","owningWrapper","nodeHandler","inserted","currentDomNode","replaceChild","exitAnimationActive","exit","attached","addRoot","onDetach","callbacks","run","shift","requestIdleCallback","setTimeout","runAfterRenderCallbacks","runDeferredRenderCallbacks","createKeyMap","wrappers","mergeNodes","oldIndex","newIndex","currentLength","nextLength","instructions","currentKeys","nextKeys","currentWrapper","domElement","toUpperCase","mergeNodeIndex","_processMergeNodes","_processOne","dom","currentNode","parentWrapper","findParentDomNode","isVirtual","isBody","data","createTextNode","childNodes","createElementNS","createElement","_createDom","invalidate","Constructor","dirty","rendering","__setProperties__","__setChildren__","__render__","middleware","resolveMiddleware","results","uniqueId","payload","resolvedMiddleware","_createWidget","currentChildren","_updateDom","remove","bodyIds","wrapperChildren","_removeDom","processResult","_removeWidget","didRender","size","diffMap","runDiffs","ignoreProperties","propertyNames","propertiesDiff","nextChildren","mount","mountOptions","renderResult","wrapNodes","siblingId","middleware_cache","cache_factory","cacheMap","middleware_icache","cache","icache_factory","cachedValue","status","titles","subjects","goals","locations","betters","organizations","generateArticleTitle","Math","floor","random","match","String","round","getListItems","count","articles","sentences","summary","title","Promise","IntersectionObserver","util_wrapper","defaultIntersection","freeze","intersectionRatio","isIntersecting","middleware_intersection","intersection_factory","_createDetails","options","rootNode","observer","detailEntries","root","details","JSON","stringify","disconnect","_getDetails","observe","widgets_Item","Item_m","widgets_InfiniteList","intersection","onRequestItems","isLoading","infiniteList_m","widgets_App","icache","getOrSet","app_m","async","newData","__webpack_require__","d","__webpack_exports__","_global__WEBPACK_IMPORTED_MODULE_0__","nameOnGlobal","constructor","bind","module","exports"," _key","bottom"],"mappings":"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","file":"main.5abc4f64782e6b6d3889.bundle.js","sourcesContent":["import global from './global';\n`!has('es6-iterator')`;\nimport { isArrayLike, Iterable } from './iterator';\nimport has from '../core/has';\n`!has('es6-symbol')`;\nimport './Symbol';\n\nexport interface WeakMap<K extends object, V> {\n\t/**\n\t * Remove a `key` from the map\n\t *\n\t * @param key The key to remove\n\t * @return `true` if the value was removed, otherwise `false`\n\t */\n\tdelete(key: K): boolean;\n\n\t/**\n\t * Retrieve the value, based on the supplied `key`\n\t *\n\t * @param key The key to retrieve the `value` for\n\t * @return the `value` based on the `key` if found, otherwise `false`\n\t */\n\tget(key: K): V | undefined;\n\n\t/**\n\t * Determines if a `key` is present in the map\n\t *\n\t * @param key The `key` to check\n\t * @return `true` if the key is part of the map, otherwise `false`.\n\t */\n\thas(key: K): boolean;\n\n\t/**\n\t * Set a `value` for a particular `key`.\n\t *\n\t * @param key The `key` to set the `value` for\n\t * @param value The `value` to set\n\t * @return the instances\n\t */\n\tset(key: K, value: V): this;\n\n\treadonly [Symbol.toStringTag]: 'WeakMap';\n}\n\nexport interface WeakMapConstructor {\n\t/**\n\t * Create a new instance of a `WeakMap`\n\t *\n\t * @constructor\n\t */\n\tnew (): WeakMap<object, any>;\n\n\t/**\n\t * Create a new instance of a `WeakMap`\n\t *\n\t * @constructor\n\t *\n\t * @param iterable An iterable that contains yields up key/value pair entries\n\t */\n\tnew <K extends object, V>(iterable?: [K, V][]): WeakMap<K, V>;\n\n\t/**\n\t * Create a new instance of a `WeakMap`\n\t *\n\t * @constructor\n\t *\n\t * @param iterable An iterable that contains yields up key/value pair entries\n\t */\n\tnew <K extends object, V>(iterable: Iterable<[K, V]>): WeakMap<K, V>;\n\n\treadonly prototype: WeakMap<object, any>;\n}\n\nexport let WeakMap: WeakMapConstructor = global.WeakMap;\n\ninterface Entry<K, V> {\n\tkey: K;\n\tvalue: V;\n}\n\nif (!has('es6-weakmap')) {\n\tconst DELETED: any = {};\n\n\tconst getUID = function getUID(): number {\n\t\treturn Math.floor(Math.random() * 100000000);\n\t};\n\n\tconst generateName = (function() {\n\t\tlet startId = Math.floor(Date.now() % 100000000);\n\n\t\treturn function generateName(): string {\n\t\t\treturn '__wm' + getUID() + (startId++ + '__');\n\t\t};\n\t})();\n\n\tWeakMap = global.WeakMap = class WeakMap<K, V> {\n\t\tprivate readonly _name: string;\n\t\tprivate readonly _frozenEntries: Entry<K, V>[];\n\n\t\tconstructor(iterable?: ArrayLike<[K, V]> | Iterable<[K, V]>) {\n\t\t\tthis._name = generateName();\n\n\t\t\tthis._frozenEntries = [];\n\n\t\t\tif (iterable) {\n\t\t\t\tif (isArrayLike(iterable)) {\n\t\t\t\t\tfor (let i = 0; i < iterable.length; i++) {\n\t\t\t\t\t\tconst item = iterable[i];\n\t\t\t\t\t\tthis.set(item[0], item[1]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (const [key, value] of iterable) {\n\t\t\t\t\t\tthis.set(key, value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprivate _getFrozenEntryIndex(key: any): number {\n\t\t\tfor (let i = 0; i < this._frozenEntries.length; i++) {\n\t\t\t\tif (this._frozenEntries[i].key === key) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn -1;\n\t\t}\n\n\t\tdelete(key: any): boolean {\n\t\t\tif (key === undefined || key === null) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst entry: Entry<K, V> = key[this._name];\n\t\t\tif (entry && entry.key === key && entry.value !== DELETED) {\n\t\t\t\tentry.value = DELETED;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst frozenIndex = this._getFrozenEntryIndex(key);\n\t\t\tif (frozenIndex >= 0) {\n\t\t\t\tthis._frozenEntries.splice(frozenIndex, 1);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tget(key: any): V | undefined {\n\t\t\tif (key === undefined || key === null) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst entry: Entry<K, V> = key[this._name];\n\t\t\tif (entry && entry.key === key && entry.value !== DELETED) {\n\t\t\t\treturn entry.value;\n\t\t\t}\n\n\t\t\tconst frozenIndex = this._getFrozenEntryIndex(key);\n\t\t\tif (frozenIndex >= 0) {\n\t\t\t\treturn this._frozenEntries[frozenIndex].value;\n\t\t\t}\n\t\t}\n\n\t\thas(key: any): boolean {\n\t\t\tif (key === undefined || key === null) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst entry: Entry<K, V> = key[this._name];\n\t\t\tif (Boolean(entry && entry.key === key && entry.value !== DELETED)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst frozenIndex = this._getFrozenEntryIndex(key);\n\t\t\tif (frozenIndex >= 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tset(key: any, value?: any): this {\n\t\t\tif (!key || (typeof key !== 'object' && typeof key !== 'function')) {\n\t\t\t\tthrow new TypeError('Invalid value used as weak map key');\n\t\t\t}\n\t\t\tlet entry: Entry<K, V> = key[this._name];\n\t\t\tif (!entry || entry.key !== key) {\n\t\t\t\tentry = Object.create(null, {\n\t\t\t\t\tkey: { value: key }\n\t\t\t\t});\n\n\t\t\t\tif (Object.isFrozen(key)) {\n\t\t\t\t\tthis._frozenEntries.push(entry);\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty(key, this._name, {\n\t\t\t\t\t\tvalue: entry\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tentry.value = value;\n\t\t\treturn this;\n\t\t}\n\n\t\t[Symbol.toStringTag]: 'WeakMap' = 'WeakMap';\n\t};\n}\n\nexport default WeakMap;\n","import global from './global';\n`!has('es6-iterator')`;\nimport { isArrayLike, Iterable, IterableIterator, ShimIterator } from './iterator';\nimport has from '../core/has';\n`!has('es6-symbol')`;\nimport './Symbol';\n\nexport interface Set<T> {\n\t/**\n\t * Adds a `value` to the `Set`\n\t *\n\t * @param value The value to add to the set\n\t * @returns The instance of the `Set`\n\t */\n\tadd(value: T): this;\n\n\t/**\n\t * Removes all the values from the `Set`.\n\t */\n\tclear(): void;\n\n\t/**\n\t * Removes a `value` from the set\n\t *\n\t * @param value The value to be removed\n\t * @returns `true` if the value was removed\n\t */\n\tdelete(value: T): boolean;\n\n\t/**\n\t * Returns an iterator that yields each entry.\n\t *\n\t * @return An iterator for each key/value pair in the instance.\n\t */\n\tentries(): IterableIterator<[T, T]>;\n\n\t/**\n\t * Executes a given function for each set entry. The function\n\t * is invoked with three arguments: the element value, the\n\t * element key, and the associated `Set` instance.\n\t *\n\t * @param callbackfn The function to execute for each map entry,\n\t * @param thisArg The value to use for `this` for each execution of the calback\n\t */\n\tforEach(callbackfn: (value: T, value2: T, set: Set<T>) => void, thisArg?: any): void;\n\n\t/**\n\t * Identifies if a value is part of the set.\n\t *\n\t * @param value The value to check\n\t * @returns `true` if the value is part of the set otherwise `false`\n\t */\n\thas(value: T): boolean;\n\n\t/**\n\t * Despite its name, returns an iterable of the values in the set,\n\t */\n\tkeys(): IterableIterator<T>;\n\n\t/**\n\t * Returns the number of values in the `Set`.\n\t */\n\treadonly size: number;\n\n\t/**\n\t * Returns an iterable of values in the set.\n\t */\n\tvalues(): IterableIterator<T>;\n\n\t/** Iterates over values in the set. */\n\t[Symbol.iterator](): IterableIterator<T>;\n\n\treadonly [Symbol.toStringTag]: 'Set';\n}\n\nexport interface SetConstructor {\n\t/**\n\t * Creates a new Set\n\t *\n\t * @constructor\n\t */\n\tnew (): Set<any>;\n\n\t/**\n\t * Creates a new Set\n\t *\n\t * @constructor\n\t *\n\t * @param iterator The iterable structure to initialize the set with\n\t */\n\tnew <T>(iterator?: T[]): Set<T>;\n\n\t/**\n\t * Creates a new Set\n\t *\n\t * @constructor\n\t *\n\t * @param iterator The iterable structure to initialize the set with\n\t */\n\tnew <T>(iterator: Iterable<T>): Set<T>;\n\n\treadonly prototype: Set<any>;\n}\n\nexport let Set: SetConstructor = global.Set;\n\nif (!has('es6-set')) {\n\tSet = global.Set = class Set<T> {\n\t\tprivate readonly _setData: T[] = [];\n\n\t\tstatic [Symbol.species] = Set;\n\n\t\tconstructor(iterable?: ArrayLike<T> | Iterable<T>) {\n\t\t\tif (iterable) {\n\t\t\t\tif (isArrayLike(iterable)) {\n\t\t\t\t\tfor (let i = 0; i < iterable.length; i++) {\n\t\t\t\t\t\tthis.add(iterable[i]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (const value of iterable) {\n\t\t\t\t\t\tthis.add(value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tadd(value: T): this {\n\t\t\tif (this.has(value)) {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tthis._setData.push(value);\n\t\t\treturn this;\n\t\t}\n\n\t\tclear(): void {\n\t\t\tthis._setData.length = 0;\n\t\t}\n\n\t\tdelete(value: T): boolean {\n\t\t\tconst idx = this._setData.indexOf(value);\n\t\t\tif (idx === -1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis._setData.splice(idx, 1);\n\t\t\treturn true;\n\t\t}\n\n\t\tentries(): IterableIterator<[T, T]> {\n\t\t\treturn new ShimIterator<[any, any]>(this._setData.map<[any, any]>((value) => [value, value]));\n\t\t}\n\n\t\tforEach(callbackfn: (value: T, index: T, set: Set<T>) => void, thisArg?: any): void {\n\t\t\tconst iterator = this.values();\n\t\t\tlet result = iterator.next();\n\t\t\twhile (!result.done) {\n\t\t\t\tcallbackfn.call(thisArg, result.value, result.value, this);\n\t\t\t\tresult = iterator.next();\n\t\t\t}\n\t\t}\n\n\t\thas(value: T): boolean {\n\t\t\treturn this._setData.indexOf(value) > -1;\n\t\t}\n\n\t\tkeys(): IterableIterator<T> {\n\t\t\treturn new ShimIterator(this._setData);\n\t\t}\n\n\t\tget size(): number {\n\t\t\treturn this._setData.length;\n\t\t}\n\n\t\tvalues(): IterableIterator<T> {\n\t\t\treturn new ShimIterator(this._setData);\n\t\t}\n\n\t\t[Symbol.iterator](): IterableIterator<T> {\n\t\t\treturn new ShimIterator(this._setData);\n\t\t}\n\n\t\t[Symbol.toStringTag]: 'Set' = 'Set';\n\t};\n}\n\nexport default Set;\n","import has from '../core/has';\n\nexport interface ObjectAssign {\n\t/**\n\t * Copy the values of all of the enumerable own properties from one or more source objects to a\n\t * target object. Returns the target object.\n\t * @param target The target object to copy to.\n\t * @param source The source object from which to copy properties.\n\t */\n\t<T, U>(target: T, source: U): T & U;\n\n\t/**\n\t * Copy the values of all of the enumerable own properties from one or more source objects to a\n\t * target object. Returns the target object.\n\t * @param target The target object to copy to.\n\t * @param source1 The first source object from which to copy properties.\n\t * @param source2 The second source object from which to copy properties.\n\t */\n\t<T, U, V>(target: T, source1: U, source2: V): T & U & V;\n\n\t/**\n\t * Copy the values of all of the enumerable own properties from one or more source objects to a\n\t * target object. Returns the target object.\n\t * @param target The target object to copy to.\n\t * @param source1 The first source object from which to copy properties.\n\t * @param source2 The second source object from which to copy properties.\n\t * @param source3 The third source object from which to copy properties.\n\t */\n\t<T, U, V, W>(target: T, source1: U, source2: V, source3: W): T & U & V & W;\n\n\t/**\n\t * Copy the values of all of the enumerable own properties from one or more source objects to a\n\t * target object. Returns the target object.\n\t * @param target The target object to copy to.\n\t * @param sources One or more source objects from which to copy properties\n\t */\n\t(target: object, ...sources: any[]): any;\n}\n\nexport interface ObjectEnteries {\n\t/**\n\t * Returns an array of key/values of the enumerable properties of an object\n\t * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n\t */\n\t<T extends { [key: string]: any }, K extends keyof T>(o: T): [keyof T, T[K]][];\n\n\t/**\n\t * Returns an array of key/values of the enumerable properties of an object\n\t * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n\t */\n\t(o: object): [string, any][];\n}\n\nexport interface ObjectGetOwnPropertyDescriptors {\n\t<T>(o: T): { [K in keyof T]: PropertyDescriptor };\n\t(o: any): { [key: string]: PropertyDescriptor };\n}\n\nexport interface ObjectValues {\n\t/**\n\t * Returns an array of values of the enumerable properties of an object\n\t * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n\t */\n\t<T>(o: { [s: string]: T }): T[];\n\n\t/**\n\t * Returns an array of values of the enumerable properties of an object\n\t * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n\t */\n\t(o: object): any[];\n}\n\nexport let assign: ObjectAssign;\n\n/**\n * Gets the own property descriptor of the specified object.\n * An own property descriptor is one that is defined directly on the object and is not\n * inherited from the object's prototype.\n * @param o Object that contains the property.\n * @param p Name of the property.\n */\nexport let getOwnPropertyDescriptor: <T, K extends keyof T>(o: T, propertyKey: K) => PropertyDescriptor | undefined;\n\n/**\n * Returns the names of the own properties of an object. The own properties of an object are those that are defined directly\n * on that object, and are not inherited from the object's prototype. The properties of an object include both fields (objects) and functions.\n * @param o Object that contains the own properties.\n */\nexport let getOwnPropertyNames: (o: any) => string[];\n\n/**\n * Returns an array of all symbol properties found directly on object o.\n * @param o Object to retrieve the symbols from.\n */\nexport let getOwnPropertySymbols: (o: any) => symbol[];\n\n/**\n * Returns true if the values are the same value, false otherwise.\n * @param value1 The first value.\n * @param value2 The second value.\n */\nexport let is: (value1: any, value2: any) => boolean;\n\n/**\n * Returns the names of the enumerable properties and methods of an object.\n * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n */\nexport let keys: (o: object) => string[];\n\n/* ES7 Object static methods */\n\nexport let getOwnPropertyDescriptors: ObjectGetOwnPropertyDescriptors;\n\nexport let entries: ObjectEnteries;\n\nexport let values: ObjectValues;\n\nif (!has('es6-object')) {\n\tconst keys = Object.keys.bind(Object);\n\tObject.keys = function symbolAwareKeys(o: object): string[] {\n\t\treturn keys(o).filter((key) => !Boolean(key.match(/^@@.+/)));\n\t};\n\n\tObject.assign = function assign(target: any, ...sources: any[]) {\n\t\tif (target == null) {\n\t\t\t// TypeError if undefined or null\n\t\t\tthrow new TypeError('Cannot convert undefined or null to object');\n\t\t}\n\n\t\tconst to = Object(target);\n\t\tsources.forEach((nextSource) => {\n\t\t\tif (nextSource) {\n\t\t\t\t// Skip over if undefined or null\n\t\t\t\tkeys(nextSource).forEach((nextKey) => {\n\t\t\t\t\tto[nextKey] = nextSource[nextKey];\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn to;\n\t};\n\n\tconst getOwnPropertyNames = Object.getOwnPropertyNames.bind(Object);\n\tObject.getOwnPropertyNames = function symbolAwareGetOwnPropertyNames(o: any): string[] {\n\t\treturn getOwnPropertyNames(o).filter((key) => !Boolean(key.match(/^@@.+/)));\n\t};\n\n\tObject.getOwnPropertySymbols = function getOwnPropertySymbols(o: any): symbol[] {\n\t\treturn getOwnPropertyNames(o)\n\t\t\t.filter((key) => Boolean(key.match(/^@@.+/)))\n\t\t\t.map((key) => Symbol.for(key.substring(2)));\n\t};\n\n\tObject.is = function is(value1: any, value2: any): boolean {\n\t\tif (value1 === value2) {\n\t\t\treturn value1 !== 0 || 1 / value1 === 1 / value2; // -0\n\t\t}\n\t\treturn value1 !== value1 && value2 !== value2; // NaN\n\t};\n}\n\nif (!has('es2017-object')) {\n\tObject.getOwnPropertyDescriptors = function getOwnPropertyDescriptors<T>(\n\t\to: T\n\t): { [P in keyof T]: TypedPropertyDescriptor<T[P]> } & { [x: string]: PropertyDescriptor } {\n\t\treturn Object.getOwnPropertyNames(o).reduce(\n\t\t\t(previous, key) => {\n\t\t\t\tprevious[key] = Object.getOwnPropertyDescriptor(o, key)!;\n\t\t\t\treturn previous;\n\t\t\t},\n\t\t\t{} as { [P in keyof T]: TypedPropertyDescriptor<T[P]> } & { [x: string]: PropertyDescriptor }\n\t\t);\n\t};\n\n\tObject.entries = function entries(o: any): [string, any][] {\n\t\treturn keys(o).map((key) => [key, o[key]] as [string, any]);\n\t};\n\n\tObject.values = function values(o: any): any[] {\n\t\treturn keys(o).map((key) => o[key]);\n\t};\n}\n\nassign = Object.assign;\ngetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\ngetOwnPropertyNames = Object.getOwnPropertyNames;\ngetOwnPropertySymbols = Object.getOwnPropertySymbols;\nis = Object.is;\nkeys = Object.keys;\ngetOwnPropertyDescriptors = Object.getOwnPropertyDescriptors;\nentries = Object.entries;\nvalues = Object.values;\n\nexport default Object;\n","`!has('es6-iterator')`;\nimport { isArrayLike, Iterable, IterableIterator, ShimIterator } from './iterator';\nimport global from './global';\nimport { is as objectIs } from './object';\nimport has from '../core/has';\n`!has('es6-symbol')`;\nimport './Symbol';\n\nexport interface Map<K, V> {\n\t/**\n\t * Deletes all keys and their associated values.\n\t */\n\tclear(): void;\n\n\t/**\n\t * Deletes a given key and its associated value.\n\t *\n\t * @param key The key to delete\n\t * @return true if the key exists, false if it does not\n\t */\n\tdelete(key: K): boolean;\n\n\t/**\n\t * Returns an iterator that yields each key/value pair as an array.\n\t *\n\t * @return An iterator for each key/value pair in the instance.\n\t */\n\tentries(): IterableIterator<[K, V]>;\n\n\t/**\n\t * Executes a given function for each map entry. The function\n\t * is invoked with three arguments: the element value, the\n\t * element key, and the associated Map instance.\n\t *\n\t * @param callbackfn The function to execute for each map entry,\n\t * @param thisArg The value to use for `this` for each execution of the calback\n\t */\n\tforEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void;\n\n\t/**\n\t * Returns the value associated with a given key.\n\t *\n\t * @param key The key to look up\n\t * @return The value if one exists or undefined\n\t */\n\tget(key: K): V | undefined;\n\n\t/**\n\t * Returns an iterator that yields each key in the map.\n\t *\n\t * @return An iterator containing the instance's keys.\n\t */\n\tkeys(): IterableIterator<K>;\n\n\t/**\n\t * Checks for the presence of a given key.\n\t *\n\t * @param key The key to check for\n\t * @return true if the key exists, false if it does not\n\t */\n\thas(key: K): boolean;\n\n\t/**\n\t * Sets the value associated with a given key.\n\t *\n\t * @param key The key to define a value to\n\t * @param value The value to assign\n\t * @return The Map instance\n\t */\n\tset(key: K, value: V): this;\n\n\t/**\n\t * Returns the number of key / value pairs in the Map.\n\t */\n\treadonly size: number;\n\n\t/**\n\t * Returns an iterator that yields each value in the map.\n\t *\n\t * @return An iterator containing the instance's values.\n\t */\n\tvalues(): IterableIterator<V>;\n\n\t/** Returns an iterable of entries in the map. */\n\t[Symbol.iterator](): IterableIterator<[K, V]>;\n\n\treadonly [Symbol.toStringTag]: string;\n}\n\nexport interface MapConstructor {\n\t/**\n\t * Creates a new Map\n\t *\n\t * @constructor\n\t */\n\tnew (): Map<any, any>;\n\n\t/**\n\t * Creates a new Map\n\t *\n\t * @constructor\n\t *\n\t * @param iterator\n\t * Array or iterator containing two-item tuples used to initially populate the map.\n\t * The first item in each tuple corresponds to the key of the map entry.\n\t * The second item corresponds to the value of the map entry.\n\t */\n\tnew <K, V>(iterator?: [K, V][]): Map<K, V>;\n\n\t/**\n\t * Creates a new Map\n\t *\n\t * @constructor\n\t *\n\t * @param iterator\n\t * Array or iterator containing two-item tuples used to initially populate the map.\n\t * The first item in each tuple corresponds to the key of the map entry.\n\t * The second item corresponds to the value of the map entry.\n\t */\n\tnew <K, V>(iterator: Iterable<[K, V]>): Map<K, V>;\n\n\treadonly prototype: Map<any, any>;\n\n\treadonly [Symbol.species]: MapConstructor;\n}\n\nexport let Map: MapConstructor = global.Map;\n\nif (!has('es6-map')) {\n\tMap = global.Map = class Map<K, V> {\n\t\tprotected readonly _keys: K[] = [];\n\t\tprotected readonly _values: V[] = [];\n\n\t\t/**\n\t\t * An alternative to Array.prototype.indexOf using Object.is\n\t\t * to check for equality. See http://mzl.la/1zuKO2V\n\t\t */\n\t\tprotected _indexOfKey(keys: K[], key: K): number {\n\t\t\tfor (let i = 0, length = keys.length; i < length; i++) {\n\t\t\t\tif (objectIs(keys[i], key)) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\n\t\tstatic [Symbol.species] = Map;\n\n\t\tconstructor(iterable?: ArrayLike<[K, V]> | Iterable<[K, V]>) {\n\t\t\tif (iterable) {\n\t\t\t\tif (isArrayLike(iterable)) {\n\t\t\t\t\tfor (let i = 0; i < iterable.length; i++) {\n\t\t\t\t\t\tconst value = iterable[i];\n\t\t\t\t\t\tthis.set(value[0], value[1]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (const value of iterable) {\n\t\t\t\t\t\tthis.set(value[0], value[1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tget size(): number {\n\t\t\treturn this._keys.length;\n\t\t}\n\n\t\tclear(): void {\n\t\t\tthis._keys.length = this._values.length = 0;\n\t\t}\n\n\t\tdelete(key: K): boolean {\n\t\t\tconst index = this._indexOfKey(this._keys, key);\n\t\t\tif (index < 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis._keys.splice(index, 1);\n\t\t\tthis._values.splice(index, 1);\n\t\t\treturn true;\n\t\t}\n\n\t\tentries(): IterableIterator<[K, V]> {\n\t\t\tconst values = this._keys.map(\n\t\t\t\t(key: K, i: number): [K, V] => {\n\t\t\t\t\treturn [key, this._values[i]];\n\t\t\t\t}\n\t\t\t);\n\n\t\t\treturn new ShimIterator(values);\n\t\t}\n\n\t\tforEach(callback: (value: V, key: K, mapInstance: Map<K, V>) => any, context?: {}) {\n\t\t\tconst keys = this._keys;\n\t\t\tconst values = this._values;\n\t\t\tfor (let i = 0, length = keys.length; i < length; i++) {\n\t\t\t\tcallback.call(context, values[i], keys[i], this);\n\t\t\t}\n\t\t}\n\n\t\tget(key: K): V | undefined {\n\t\t\tconst index = this._indexOfKey(this._keys, key);\n\t\t\treturn index < 0 ? undefined : this._values[index];\n\t\t}\n\n\t\thas(key: K): boolean {\n\t\t\treturn this._indexOfKey(this._keys, key) > -1;\n\t\t}\n\n\t\tkeys(): IterableIterator<K> {\n\t\t\treturn new ShimIterator(this._keys);\n\t\t}\n\n\t\tset(key: K, value: V): Map<K, V> {\n\t\t\tlet index = this._indexOfKey(this._keys, key);\n\t\t\tindex = index < 0 ? this._keys.length : index;\n\t\t\tthis._keys[index] = key;\n\t\t\tthis._values[index] = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tvalues(): IterableIterator<V> {\n\t\t\treturn new ShimIterator(this._values);\n\t\t}\n\n\t\t[Symbol.iterator](): IterableIterator<[K, V]> {\n\t\t\treturn this.entries();\n\t\t}\n\n\t\t[Symbol.toStringTag]: 'Map' = 'Map';\n\t};\n}\n\nexport default Map;\n","import Promise from '../shim/Promise';\n\n/**\n * Used through the toolkit as a consistent API to manage how callers can \"cleanup\"\n * when doing a function.\n */\nexport interface Handle {\n\t/**\n\t * Perform the destruction/cleanup logic associated with this Handle\n\t */\n\tdestroy(): void;\n}\n\n/**\n * No op function used to replace a Destroyable instance's `destroy` method, once the instance has been destroyed\n */\nfunction noop(): Promise<boolean> {\n\treturn Promise.resolve(false);\n}\n\n/**\n * No op function used to replace a Destroyable instance's `own` method, once the instance has been destroyed\n */\nfunction destroyed(): never {\n\tthrow new Error('Call made to destroyed method');\n}\n\nexport class Destroyable {\n\t/**\n\t * The instance's handles\n\t */\n\tprivate handles: Handle[];\n\n\t/**\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tthis.handles = [];\n\t}\n\n\t/**\n\t * Register handles for the instance that will be destroyed when `this.destroy` is called\n\t *\n\t * @param {Handle} handle The handle to add for the instance\n\t * @returns {Handle} A wrapper Handle. When the wrapper Handle's `destroy` method is invoked, the original handle is\n\t *                   removed from the instance, and its `destroy` method is invoked.\n\t */\n\town(handle: Handle): Handle {\n\t\tconst { handles: _handles } = this;\n\t\t_handles.push(handle);\n\t\treturn {\n\t\t\tdestroy() {\n\t\t\t\t_handles.splice(_handles.indexOf(handle));\n\t\t\t\thandle.destroy();\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Destroys all handlers registered for the instance\n\t *\n\t * @returns {Promise<any} A Promise that resolves once all handles have been destroyed\n\t */\n\tdestroy(): Promise<any> {\n\t\treturn new Promise((resolve) => {\n\t\t\tthis.handles.forEach((handle) => {\n\t\t\t\thandle && handle.destroy && handle.destroy();\n\t\t\t});\n\t\t\tthis.destroy = noop;\n\t\t\tthis.own = destroyed;\n\t\t\tresolve(true);\n\t\t});\n\t}\n}\n\nexport default Destroyable;\n","import Map from '../shim/Map';\nimport { Destroyable, Handle } from './Destroyable';\n\n/**\n * Map of computed regular expressions, keyed by string\n */\nconst regexMap = new Map<string, RegExp>();\n\nexport type EventType = string | symbol;\n\n/**\n * The base event object, which provides a `type` property\n */\nexport interface EventObject<T = EventType> {\n\t/**\n\t * The type of the event\n\t */\n\treadonly type: T;\n}\n\n/**\n * Determines if the event type glob has been matched\n *\n * @returns boolean that indicates if the glob is matched\n */\nexport function isGlobMatch(globString: string | symbol, targetString: string | symbol): boolean {\n\tif (typeof targetString === 'string' && typeof globString === 'string' && globString.indexOf('*') !== -1) {\n\t\tlet regex: RegExp;\n\t\tif (regexMap.has(globString)) {\n\t\t\tregex = regexMap.get(globString)!;\n\t\t} else {\n\t\t\tregex = new RegExp(`^${globString.replace(/\\*/g, '.*')}$`);\n\t\t\tregexMap.set(globString, regex);\n\t\t}\n\t\treturn regex.test(targetString);\n\t} else {\n\t\treturn globString === targetString;\n\t}\n}\n\nexport type EventedCallback<T = EventType, E extends EventObject<T> = EventObject<T>> = {\n\t/**\n\t * A callback that takes an `event` argument\n\t *\n\t * @param event The event object\n\t */\n\n\t(event: E): boolean | void;\n};\n\nexport interface CustomEventTypes<T extends EventObject<any> = EventObject<any>> {\n\t[index: string]: T;\n}\n\n/**\n * A type which is either a targeted event listener or an array of listeners\n * @template T The type of target for the events\n * @template E The event type for the events\n */\nexport type EventedCallbackOrArray<T = EventType, E extends EventObject<T> = EventObject<T>> =\n\t| EventedCallback<T, E>\n\t| EventedCallback<T, E>[];\n\n/**\n * Event Class\n */\nexport class Evented<\n\tM extends CustomEventTypes = {},\n\tT = EventType,\n\tO extends EventObject<T> = EventObject<T>\n> extends Destroyable {\n\t// The following member is purely so TypeScript remembers the type of `M` when extending so\n\t// that the utilities in `on.ts` will work https://github.com/Microsoft/TypeScript/issues/20348\n\t// tslint:disable-next-line\n\tprotected __typeMap__?: M;\n\t/**\n\t * map of listeners keyed by event type\n\t */\n\tprotected listenersMap: Map<T | keyof M, EventedCallback<T, O>[]> = new Map();\n\n\t/**\n\t * Emits the event object for the specified type\n\t *\n\t * @param event the event to emit\n\t */\n\temit<K extends keyof M>(event: M[K]): void;\n\temit(event: O): void;\n\temit(event: any): void {\n\t\tthis.listenersMap.forEach((methods, type) => {\n\t\t\tif (isGlobMatch(type as any, event.type)) {\n\t\t\t\t[...methods].forEach((method) => {\n\t\t\t\t\tmethod.call(this, event);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Catch all handler for various call signatures. The signatures are defined in\n\t * `BaseEventedEvents`.  You can add your own event type -> handler types by extending\n\t * `BaseEventedEvents`.  See example for details.\n\t *\n\t * @param args\n\t *\n\t * @example\n\t *\n\t * interface WidgetBaseEvents extends BaseEventedEvents {\n\t *     (type: 'properties:changed', handler: PropertiesChangedHandler): Handle;\n\t * }\n\t * class WidgetBase extends Evented {\n\t *    on: WidgetBaseEvents;\n\t * }\n\t *\n\t * @return {any}\n\t */\n\ton<K extends keyof M>(type: K, listener: EventedCallbackOrArray<K, M[K]>): Handle;\n\ton(type: T, listener: EventedCallbackOrArray<T, O>): Handle;\n\ton(type: any, listener: EventedCallbackOrArray<any, any>): Handle {\n\t\tif (Array.isArray(listener)) {\n\t\t\tconst handles = listener.map((listener) => this._addListener(type, listener));\n\t\t\treturn {\n\t\t\t\tdestroy() {\n\t\t\t\t\thandles.forEach((handle) => handle.destroy());\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\treturn this._addListener(type, listener);\n\t}\n\n\tprivate _addListener(type: T | keyof M, listener: EventedCallback<T, O>) {\n\t\tconst listeners = this.listenersMap.get(type) || [];\n\t\tlisteners.push(listener);\n\t\tthis.listenersMap.set(type, listeners);\n\t\treturn {\n\t\t\tdestroy: () => {\n\t\t\t\tconst listeners = this.listenersMap.get(type) || [];\n\t\t\t\tlisteners.splice(listeners.indexOf(listener), 1);\n\t\t\t}\n\t\t};\n\t}\n}\n\nexport default Evented;\n","import Promise from '../shim/Promise';\nimport Map from '../shim/Map';\nimport { Evented, EventObject } from '../core/Evented';\nimport {\n\tConstructor,\n\tInjectorFactory,\n\tInjectorItem,\n\tRegistryLabel,\n\tWidgetBaseConstructor,\n\tWidgetBaseInterface,\n\tESMDefaultWidgetBase,\n\tWidgetBaseConstructorFunction,\n\tESMDefaultWidgetBaseFunction,\n\tCallback,\n\tWNodeFactory,\n\tRenderResult,\n\tWidgetBaseTypes\n} from './interfaces';\n\nexport type RegistryItem =\n\t| WidgetBaseConstructor\n\t| WNodeFactory<any>\n\t| Promise<WidgetBaseConstructor | WNodeFactory<any>>\n\t| WidgetBaseConstructorFunction\n\t| ESMDefaultWidgetBaseFunction;\n\n/**\n * Widget base type\n */\nexport const WIDGET_BASE_TYPE = '__widget_base_type';\n\nexport interface RegistryEventObject extends EventObject<RegistryLabel> {\n\taction: string;\n\titem: WNodeFactory<any> | WidgetBaseConstructor | InjectorItem;\n}\n/**\n * Widget Registry Interface\n */\nexport interface RegistryInterface {\n\t/**\n\t * Define a WidgetRegistryItem against a label\n\t *\n\t * @param label The label of the widget to register\n\t * @param registryItem The registry item to define\n\t */\n\tdefine(label: RegistryLabel, registryItem: RegistryItem): void;\n\n\t/**\n\t * Return a RegistryItem for the given label, null if an entry doesn't exist\n\t *\n\t * @param widgetLabel The label of the widget to return\n\t * @returns The RegistryItem for the widgetLabel, `null` if no entry exists\n\t */\n\tget(label: RegistryLabel): WNodeFactory<any> | Callback<any, any, RenderResult> | Constructor<any> | null;\n\tget<T extends WNodeFactory<any>>(label: RegistryLabel): T | null;\n\tget<T extends Callback<any, any, RenderResult>>(label: RegistryLabel): T | null;\n\tget<T extends WidgetBaseInterface = WidgetBaseInterface>(label: RegistryLabel): Constructor<T> | null;\n\n\t/**\n\t * Returns a boolean if an entry for the label exists\n\t *\n\t * @param widgetLabel The label to search for\n\t * @returns boolean indicating if a widget registry item exists\n\t */\n\thas(label: RegistryLabel): boolean;\n\n\t/**\n\t * Define an Injector against a label\n\t *\n\t * @param label The label of the injector to register\n\t * @param registryItem The injector factory\n\t */\n\tdefineInjector(label: RegistryLabel, injectorFactory: InjectorFactory): void;\n\n\t/**\n\t * Return an Injector registry item for the given label, null if an entry doesn't exist\n\t *\n\t * @param label The label of the injector to return\n\t * @returns The RegistryItem for the widgetLabel, `null` if no entry exists\n\t */\n\tgetInjector<T>(label: RegistryLabel): InjectorItem<T> | null;\n\n\t/**\n\t * Returns a boolean if an injector for the label exists\n\t *\n\t * @param widgetLabel The label to search for\n\t * @returns boolean indicating if a injector registry item exists\n\t */\n\thasInjector(label: RegistryLabel): boolean;\n}\n\n/**\n * Checks is the item is a subclass of WidgetBase (or a WidgetBase)\n *\n * @param item the item to check\n * @returns true/false indicating if the item is a WidgetBaseConstructor\n */\nexport function isWidgetBaseConstructor<T extends WidgetBaseInterface = any>(item: any): item is Constructor<T> {\n\treturn Boolean(item && item._type === WIDGET_BASE_TYPE);\n}\n\nexport function isWidgetFunction(item: any): item is Callback<any, any, RenderResult> {\n\treturn Boolean(item && item.isWidget);\n}\n\nexport function isWNodeFactory<W extends WidgetBaseTypes>(node: any): node is WNodeFactory<W> {\n\tif (typeof node === 'function' && node.isFactory) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nexport function isWidget<T extends WidgetBaseInterface = any>(\n\titem: any\n): item is Constructor<T> | Callback<any, any, RenderResult> {\n\treturn isWidgetBaseConstructor(item) || isWidgetFunction(item);\n}\n\nexport function isWidgetConstructorDefaultExport<T extends WidgetBaseTypes>(\n\titem: any\n): item is ESMDefaultWidgetBase<T> {\n\treturn Boolean(\n\t\titem &&\n\t\t\titem.hasOwnProperty('__esModule') &&\n\t\t\titem.hasOwnProperty('default') &&\n\t\t\t(isWidget(item.default) || isWNodeFactory(item.default))\n\t);\n}\n\n/**\n * The Registry implementation\n */\nexport class Registry extends Evented<{}, RegistryLabel, RegistryEventObject> implements RegistryInterface {\n\t/**\n\t * internal map of labels and RegistryItem\n\t */\n\tprivate _widgetRegistry: Map<RegistryLabel, RegistryItem> | undefined;\n\n\tprivate _injectorRegistry: Map<RegistryLabel, InjectorItem> | undefined;\n\n\t/**\n\t * Emit loaded event for registry label\n\t */\n\tprivate emitLoadedEvent(\n\t\twidgetLabel: RegistryLabel,\n\t\titem: WNodeFactory<any> | WidgetBaseConstructor | InjectorItem\n\t): void {\n\t\tthis.emit({\n\t\t\ttype: widgetLabel,\n\t\t\taction: 'loaded',\n\t\t\titem\n\t\t});\n\t}\n\n\tpublic define(label: RegistryLabel, item: RegistryItem): void {\n\t\tif (this._widgetRegistry === undefined) {\n\t\t\tthis._widgetRegistry = new Map();\n\t\t}\n\n\t\tif (this._widgetRegistry.has(label)) {\n\t\t\tthrow new Error(`widget has already been registered for '${label.toString()}'`);\n\t\t}\n\n\t\tthis._widgetRegistry.set(label, item);\n\n\t\tif (item instanceof Promise) {\n\t\t\titem.then(\n\t\t\t\t(widgetCtor) => {\n\t\t\t\t\tthis._widgetRegistry!.set(label, widgetCtor);\n\t\t\t\t\tthis.emitLoadedEvent(label, widgetCtor);\n\t\t\t\t\treturn widgetCtor;\n\t\t\t\t},\n\t\t\t\t(error) => {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t);\n\t\t} else if (isWidgetBaseConstructor(item)) {\n\t\t\tthis.emitLoadedEvent(label, item);\n\t\t}\n\t}\n\n\tpublic defineInjector(label: RegistryLabel, injectorFactory: InjectorFactory): void {\n\t\tif (this._injectorRegistry === undefined) {\n\t\t\tthis._injectorRegistry = new Map();\n\t\t}\n\n\t\tif (this._injectorRegistry.has(label)) {\n\t\t\tthrow new Error(`injector has already been registered for '${label.toString()}'`);\n\t\t}\n\n\t\tconst invalidator = new Evented();\n\n\t\tconst injectorItem: InjectorItem = {\n\t\t\tinjector: injectorFactory(() => invalidator.emit({ type: 'invalidate' })),\n\t\t\tinvalidator\n\t\t};\n\n\t\tthis._injectorRegistry.set(label, injectorItem);\n\t\tthis.emitLoadedEvent(label, injectorItem);\n\t}\n\n\tpublic get(label: RegistryLabel): WNodeFactory<any> | Callback<any, any, RenderResult> | Constructor<any> | null;\n\tpublic get<T extends WNodeFactory<any>>(label: RegistryLabel): T | null;\n\tpublic get<T extends Callback<any, any, RenderResult>>(label: RegistryLabel): T | null;\n\tpublic get<T extends WidgetBaseInterface = WidgetBaseInterface>(label: RegistryLabel): Constructor<T> | null;\n\tpublic get<T extends WidgetBaseInterface = WidgetBaseInterface>(\n\t\tlabel: RegistryLabel\n\t): WNodeFactory<T> | Callback<any, any, RenderResult> | Constructor<T> | null {\n\t\tif (!this._widgetRegistry || !this.has(label)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst item = this._widgetRegistry.get(label);\n\n\t\tif (isWidget<T>(item) || isWNodeFactory(item)) {\n\t\t\treturn item;\n\t\t}\n\n\t\tif (item instanceof Promise) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst promise = (<WidgetBaseConstructorFunction>item)();\n\t\tthis._widgetRegistry.set(label, promise);\n\n\t\tpromise.then(\n\t\t\t(widgetCtor) => {\n\t\t\t\tif (isWidgetConstructorDefaultExport<T>(widgetCtor)) {\n\t\t\t\t\twidgetCtor = widgetCtor.default;\n\t\t\t\t}\n\n\t\t\t\tthis._widgetRegistry!.set(label, widgetCtor);\n\t\t\t\tthis.emitLoadedEvent(label, widgetCtor);\n\t\t\t\treturn widgetCtor;\n\t\t\t},\n\t\t\t(error) => {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t);\n\n\t\treturn null;\n\t}\n\n\tpublic getInjector<T>(label: RegistryLabel): InjectorItem<T> | null {\n\t\tif (!this._injectorRegistry || !this.hasInjector(label)) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this._injectorRegistry.get(label)!;\n\t}\n\n\tpublic has(label: RegistryLabel): boolean {\n\t\treturn Boolean(this._widgetRegistry && this._widgetRegistry.has(label));\n\t}\n\n\tpublic hasInjector(label: RegistryLabel): boolean {\n\t\treturn Boolean(this._injectorRegistry && this._injectorRegistry.has(label));\n\t}\n}\n\nexport default Registry;\n","import { PropertyChangeRecord } from './interfaces';\nimport { WIDGET_BASE_TYPE } from './Registry';\n\nfunction isObjectOrArray(value: any): boolean {\n\treturn Object.prototype.toString.call(value) === '[object Object]' || Array.isArray(value);\n}\n\nexport function always(previousProperty: any, newProperty: any): PropertyChangeRecord {\n\treturn {\n\t\tchanged: true,\n\t\tvalue: newProperty\n\t};\n}\n\nexport function ignore(previousProperty: any, newProperty: any): PropertyChangeRecord {\n\treturn {\n\t\tchanged: false,\n\t\tvalue: newProperty\n\t};\n}\n\nexport function reference(previousProperty: any, newProperty: any): PropertyChangeRecord {\n\treturn {\n\t\tchanged: previousProperty !== newProperty,\n\t\tvalue: newProperty\n\t};\n}\n\nexport function shallow(previousProperty: any, newProperty: any, depth = 0): PropertyChangeRecord {\n\tlet changed = false;\n\n\tconst validOldProperty = previousProperty && isObjectOrArray(previousProperty);\n\tconst validNewProperty = newProperty && isObjectOrArray(newProperty);\n\n\tif (!validOldProperty || !validNewProperty) {\n\t\treturn {\n\t\t\tchanged: true,\n\t\t\tvalue: newProperty\n\t\t};\n\t}\n\n\tconst previousKeys = Object.keys(previousProperty);\n\tconst newKeys = Object.keys(newProperty);\n\n\tif (previousKeys.length !== newKeys.length) {\n\t\tchanged = true;\n\t} else {\n\t\tchanged = newKeys.some((key) => {\n\t\t\tif (depth > 0) {\n\t\t\t\treturn shallow(newProperty[key], previousProperty[key], depth - 1).changed;\n\t\t\t}\n\t\t\treturn newProperty[key] !== previousProperty[key];\n\t\t});\n\t}\n\treturn {\n\t\tchanged,\n\t\tvalue: newProperty\n\t};\n}\n\nexport function auto(previousProperty: any, newProperty: any): PropertyChangeRecord {\n\tlet result;\n\tif (typeof newProperty === 'function') {\n\t\tif (newProperty._type === WIDGET_BASE_TYPE) {\n\t\t\tresult = reference(previousProperty, newProperty);\n\t\t} else {\n\t\t\tresult = ignore(previousProperty, newProperty);\n\t\t}\n\t} else if (isObjectOrArray(newProperty)) {\n\t\tresult = shallow(previousProperty, newProperty);\n\t} else {\n\t\tresult = reference(previousProperty, newProperty);\n\t}\n\treturn result;\n}\n","import { Map } from '../shim/Map';\nimport { Evented, EventObject } from '../core/Evented';\nimport { Constructor, InjectorFactory, InjectorItem, RegistryLabel, WidgetBaseInterface } from './interfaces';\nimport { Registry, RegistryEventObject, RegistryItem } from './Registry';\n\nexport type RegistryHandlerEventMap = {\n\tinvalidate: EventObject<'invalidate'>;\n};\n\nexport class RegistryHandler extends Evented<RegistryHandlerEventMap> {\n\tprivate _registry = new Registry();\n\tprivate _registryWidgetLabelMap: Map<Registry, RegistryLabel[]> = new Map();\n\tprivate _registryInjectorLabelMap: Map<Registry, RegistryLabel[]> = new Map();\n\tprotected baseRegistry!: Registry;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.own(this._registry);\n\t\tconst destroy = () => {\n\t\t\tif (this.baseRegistry) {\n\t\t\t\tthis._registryWidgetLabelMap.delete(this.baseRegistry);\n\t\t\t\tthis._registryInjectorLabelMap.delete(this.baseRegistry);\n\t\t\t\tthis.baseRegistry = undefined as any;\n\t\t\t}\n\t\t};\n\t\tthis.own({ destroy });\n\t}\n\n\tpublic set base(baseRegistry: Registry) {\n\t\tif (this.baseRegistry) {\n\t\t\tthis._registryWidgetLabelMap.delete(this.baseRegistry);\n\t\t\tthis._registryInjectorLabelMap.delete(this.baseRegistry);\n\t\t}\n\t\tthis.baseRegistry = baseRegistry;\n\t}\n\n\tpublic get base(): Registry {\n\t\treturn this.baseRegistry;\n\t}\n\n\tpublic define(label: RegistryLabel, widget: RegistryItem): void {\n\t\tthis._registry.define(label, widget);\n\t}\n\n\tpublic defineInjector(label: RegistryLabel, injector: InjectorFactory): void {\n\t\tthis._registry.defineInjector(label, injector);\n\t}\n\n\tpublic has(label: RegistryLabel): boolean {\n\t\treturn this._registry.has(label) || Boolean(this.baseRegistry && this.baseRegistry.has(label));\n\t}\n\n\tpublic hasInjector(label: RegistryLabel): boolean {\n\t\treturn this._registry.hasInjector(label) || Boolean(this.baseRegistry && this.baseRegistry.hasInjector(label));\n\t}\n\n\tpublic get<T extends WidgetBaseInterface = WidgetBaseInterface>(\n\t\tlabel: RegistryLabel,\n\t\tglobalPrecedence: boolean = false\n\t): Constructor<T> | null {\n\t\treturn this._get(label, globalPrecedence, 'get', this._registryWidgetLabelMap);\n\t}\n\n\tpublic getInjector<T>(label: RegistryLabel, globalPrecedence: boolean = false): InjectorItem<T> | null {\n\t\treturn this._get(label, globalPrecedence, 'getInjector', this._registryInjectorLabelMap);\n\t}\n\n\tprivate _get(\n\t\tlabel: RegistryLabel,\n\t\tglobalPrecedence: boolean,\n\t\tgetFunctionName: 'getInjector' | 'get',\n\t\tlabelMap: Map<Registry, RegistryLabel[]>\n\t): any {\n\t\tconst registries = globalPrecedence ? [this.baseRegistry, this._registry] : [this._registry, this.baseRegistry];\n\t\tfor (let i = 0; i < registries.length; i++) {\n\t\t\tconst registry: any = registries[i];\n\t\t\tif (!registry) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst item = registry[getFunctionName](label);\n\t\t\tconst registeredLabels = labelMap.get(registry) || [];\n\t\t\tif (item) {\n\t\t\t\treturn item;\n\t\t\t} else if (registeredLabels.indexOf(label) === -1) {\n\t\t\t\tconst handle = registry.on(label, (event: RegistryEventObject) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tevent.action === 'loaded' &&\n\t\t\t\t\t\t(this as any)[getFunctionName](label, globalPrecedence) === event.item\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.emit({ type: 'invalidate' });\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tthis.own(handle);\n\t\t\t\tlabelMap.set(registry, [...registeredLabels, label]);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}\n\nexport default RegistryHandler;\n","import global from '../shim/global';\nimport has from '../core/has';\nimport WeakMap from '../shim/WeakMap';\nimport Set from '../shim/Set';\nimport Map from '../shim/Map';\nimport {\n\tWNode,\n\tVNode,\n\tDNode,\n\tVNodeProperties,\n\tTransitionStrategy,\n\tSupportedClassName,\n\tDomVNode,\n\tLazyDefine,\n\tConstructor,\n\tRenderResult,\n\tWidgetBaseInterface,\n\tCallback,\n\tMiddlewareMap,\n\tWNodeFactory,\n\tUnionToIntersection,\n\tWidgetProperties,\n\tMiddlewareResultFactory,\n\tWidgetBaseTypes,\n\tRegistryLabel,\n\tDeferredVirtualProperties,\n\tDomOptions\n} from './interfaces';\nimport { Registry, isWidget, isWidgetBaseConstructor, isWidgetFunction, isWNodeFactory } from './Registry';\nimport { auto } from './diff';\nimport RegistryHandler from './RegistryHandler';\nimport { NodeHandler } from './NodeHandler';\n\ndeclare global {\n\tnamespace JSX {\n\t\ttype Element = WNode;\n\t\tinterface ElementAttributesProperty {\n\t\t\tproperties: {};\n\t\t}\n\t\tinterface IntrinsicElements {\n\t\t\t[key: string]: VNodeProperties;\n\t\t}\n\t}\n}\n\nexport interface BaseNodeWrapper {\n\tid: string;\n\towningId: string;\n\tnode: WNode<any> | VNode;\n\tdomNode?: Node;\n\tdepth: number;\n\torder: number;\n\trequiresInsertBefore?: boolean;\n\thasPreviousSiblings?: boolean;\n\thasParentWNode?: boolean;\n\tnamespace?: string;\n\thasAnimations?: boolean;\n\tparentId: string;\n\tchildDomWrapperId?: string;\n}\n\nexport interface WNodeWrapper extends BaseNodeWrapper {\n\tnode: WNode<any>;\n\tinstance?: any;\n\tmergeNodes?: Node[];\n\tnodeHandlerCalled?: boolean;\n\tregistryItem?: Callback<any, any, RenderResult> | Constructor<any> | null;\n\tproperties: any;\n}\n\nexport interface WidgetMeta {\n\tdirty: boolean;\n\tinvalidator: () => void;\n\tmiddleware?: any;\n\tregistryHandler?: RegistryHandler;\n\tregistry: Registry;\n\tproperties: any;\n\tchildren?: DNode[];\n\trendering: boolean;\n\tnodeMap?: Map<string | number, HTMLElement>;\n\tdestroyMap?: Map<string, () => void>;\n\tdeferRefs: number;\n\tcustomDiffProperties?: Set<string>;\n\tcustomDiffMap?: Map<string, Map<string, (current: any, next: any) => void>>;\n}\n\nexport interface WidgetData {\n\tonDetach: () => void;\n\tonAttach: () => void;\n\tdirty: boolean;\n\tnodeHandler: NodeHandler;\n\tinvalidate?: Function;\n\trendering: boolean;\n\tinputProperties: any;\n\tregistry: RegistryHandler;\n}\n\nexport interface VNodeWrapper extends BaseNodeWrapper {\n\tnode: VNode | DomVNode;\n\tmerged?: boolean;\n\tinserted?: boolean;\n\tdeferredProperties?: VNodeProperties;\n}\n\nexport type DNodeWrapper = VNodeWrapper | WNodeWrapper;\n\nexport interface MountOptions {\n\tsync: boolean;\n\tmerge: boolean;\n\ttransition?: TransitionStrategy;\n\tdomNode: HTMLElement;\n\tregistry: Registry;\n}\n\nexport interface Renderer {\n\tinvalidate(): void;\n\tmount(mountOptions?: Partial<MountOptions>): void;\n}\n\ninterface ProcessItem {\n\tcurrent?: (WNodeWrapper | VNodeWrapper)[];\n\tnext?: (WNodeWrapper | VNodeWrapper)[];\n\tmeta: ProcessMeta;\n}\n\ninterface ProcessResult {\n\titem?: ProcessItem;\n\twidget?: AttachApplication | DetachApplication;\n\tdom?: ApplicationInstruction;\n}\n\ninterface ProcessMeta {\n\tmergeNodes?: Node[];\n\toldIndex?: number;\n\tnewIndex?: number;\n}\n\ninterface InvalidationQueueItem {\n\tid: string;\n\tdepth: number;\n\torder: number;\n}\n\ninterface Instruction {\n\tcurrent: undefined | DNodeWrapper;\n\tnext: undefined | DNodeWrapper;\n}\n\ninterface CreateWidgetInstruction {\n\tnext: WNodeWrapper;\n}\n\ninterface UpdateWidgetInstruction {\n\tcurrent: WNodeWrapper;\n\tnext: WNodeWrapper;\n}\n\ninterface RemoveWidgetInstruction {\n\tcurrent: WNodeWrapper;\n}\n\ninterface CreateDomInstruction {\n\tnext: VNodeWrapper;\n}\n\ninterface UpdateDomInstruction {\n\tcurrent: VNodeWrapper;\n\tnext: VNodeWrapper;\n}\n\ninterface RemoveDomInstruction {\n\tcurrent: VNodeWrapper;\n}\n\ninterface AttachApplication {\n\ttype: 'attach';\n\tid: string;\n\tinstance?: WidgetBaseInterface;\n\tattached?: boolean;\n}\n\ninterface DetachApplication {\n\ttype: 'detach';\n\tcurrent: WNodeWrapper;\n\tinstance?: WidgetBaseInterface;\n}\n\ninterface CreateDomApplication {\n\ttype: 'create';\n\tcurrent?: VNodeWrapper;\n\tnext: VNodeWrapper;\n\tparentDomNode: Node;\n}\n\ninterface DeleteDomApplication {\n\ttype: 'delete';\n\tcurrent: VNodeWrapper;\n}\n\ninterface UpdateDomApplication {\n\ttype: 'update';\n\tcurrent: VNodeWrapper;\n\tnext: VNodeWrapper;\n}\n\ninterface PreviousProperties {\n\tproperties: any;\n\tattributes?: any;\n\tevents?: any;\n}\n\ntype ApplicationInstruction =\n\t| CreateDomApplication\n\t| UpdateDomApplication\n\t| DeleteDomApplication\n\t| Required<AttachApplication>\n\t| DetachApplication;\n\nconst EMPTY_ARRAY: DNodeWrapper[] = [];\nconst nodeOperations = ['focus', 'blur', 'scrollIntoView', 'click'];\nconst NAMESPACE_W3 = 'http://www.w3.org/';\nconst NAMESPACE_SVG = NAMESPACE_W3 + '2000/svg';\nconst NAMESPACE_XLINK = NAMESPACE_W3 + '1999/xlink';\nconst WNODE = '__WNODE_TYPE';\nconst VNODE = '__VNODE_TYPE';\nconst DOMVNODE = '__DOMVNODE_TYPE';\n\nexport function isTextNode(item: any): item is Text {\n\treturn item && item.nodeType === 3;\n}\n\nfunction isLazyDefine(item: any): item is LazyDefine<any> {\n\treturn Boolean(item && item.label);\n}\n\nfunction isWNodeWrapper(child: DNodeWrapper): child is WNodeWrapper {\n\treturn child && isWNode(child.node);\n}\n\nfunction isVNodeWrapper(child?: DNodeWrapper | null): child is VNodeWrapper {\n\treturn !!child && isVNode(child.node);\n}\n\nfunction isVirtualWrapper(child?: DNodeWrapper | null): boolean {\n\treturn isVNodeWrapper(child) && child.node.tag === 'virtual';\n}\n\nfunction isBodyWrapper(wrapper?: DNodeWrapper): boolean {\n\treturn isVNodeWrapper(wrapper) && wrapper.node.tag === 'body';\n}\n\nfunction isAttachApplication(value: any): value is AttachApplication | DetachApplication {\n\treturn !!value.type;\n}\n\nexport function isWNode<W extends WidgetBaseTypes = any>(child: any): child is WNode<W> {\n\treturn Boolean(child && child !== true && typeof child !== 'string' && child.type === WNODE);\n}\n\nexport function isVNode(child: DNode): child is VNode {\n\treturn Boolean(\n\t\tchild && child !== true && typeof child !== 'string' && (child.type === VNODE || child.type === DOMVNODE)\n\t);\n}\n\nexport function isDomVNode(child: DNode): child is DomVNode {\n\treturn Boolean(child && child !== true && typeof child !== 'string' && child.type === DOMVNODE);\n}\n\nexport function isElementNode(value: any): value is Element {\n\treturn !!value.tagName;\n}\n\nfunction toTextVNode(data: any): VNode {\n\treturn {\n\t\ttag: '',\n\t\tproperties: {},\n\t\tchildren: undefined,\n\t\ttext: `${data}`,\n\t\ttype: VNODE\n\t};\n}\n\nfunction updateAttributes(\n\tdomNode: Element,\n\tpreviousAttributes: { [index: string]: string | undefined },\n\tattributes: { [index: string]: string | undefined },\n\tnamespace?: string\n) {\n\tconst attrNames = Object.keys(attributes);\n\tconst attrCount = attrNames.length;\n\tfor (let i = 0; i < attrCount; i++) {\n\t\tconst attrName = attrNames[i];\n\t\tconst attrValue = attributes[attrName];\n\t\tconst previousAttrValue = previousAttributes[attrName];\n\t\tif (attrValue !== previousAttrValue) {\n\t\t\tupdateAttribute(domNode, attrName, attrValue, namespace);\n\t\t}\n\t}\n}\n\n/**\n * Wrapper function for calls to create a widget.\n */\nexport function w<W extends WidgetBaseTypes>(\n\tnode: WNode<W>,\n\tproperties: Partial<W['properties']>,\n\tchildren?: W['children']\n): WNode<W>;\nexport function w<W extends WidgetBaseTypes>(\n\twidgetConstructor: Constructor<W> | RegistryLabel | WNodeFactory<W> | LazyDefine<W>,\n\tproperties: W['properties'],\n\tchildren?: W['children']\n): WNode<W>;\nexport function w<W extends WidgetBaseTypes>(\n\twidgetConstructorOrNode:\n\t\t| Constructor<W>\n\t\t| RegistryLabel\n\t\t| WNodeFactory<W>\n\t\t| WNode<W>\n\t\t| LazyDefine<W>\n\t\t| Callback<any, any, RenderResult>,\n\tproperties: W['properties'],\n\tchildren?: W['children']\n): WNode<W> {\n\tif (isWNodeFactory<W>(widgetConstructorOrNode)) {\n\t\treturn widgetConstructorOrNode(properties, children);\n\t}\n\n\tif (isWNode<W>(widgetConstructorOrNode)) {\n\t\tproperties = { ...(widgetConstructorOrNode.properties as any), ...(properties as any) };\n\t\tchildren = children ? children : widgetConstructorOrNode.children;\n\t\twidgetConstructorOrNode = widgetConstructorOrNode.widgetConstructor;\n\t}\n\n\treturn {\n\t\tchildren: children || [],\n\t\twidgetConstructor: widgetConstructorOrNode,\n\t\tproperties,\n\t\ttype: WNODE\n\t};\n}\n\n/**\n * Wrapper function for calls to create VNodes.\n */\nexport function v(node: VNode, properties: VNodeProperties, children: undefined | DNode[]): VNode;\nexport function v(node: VNode, properties: VNodeProperties): VNode;\nexport function v(tag: string, children: undefined | DNode[]): VNode;\nexport function v<K extends keyof HTMLElementTagNameMap>(\n\ttag: K,\n\tproperties: DeferredVirtualProperties | VNodeProperties<HTMLElementTagNameMap[K]>,\n\tchildren?: DNode[]\n): VNode;\nexport function v(tag: string, properties: DeferredVirtualProperties | VNodeProperties, children?: DNode[]): VNode;\nexport function v(tag: string): VNode;\nexport function v(\n\ttag: string | VNode,\n\tpropertiesOrChildren: VNodeProperties | DeferredVirtualProperties | DNode[] = {},\n\tchildren: undefined | DNode[] = undefined\n): VNode {\n\tlet properties: VNodeProperties | DeferredVirtualProperties = propertiesOrChildren;\n\tlet deferredPropertiesCallback;\n\n\tif (Array.isArray(propertiesOrChildren)) {\n\t\tchildren = propertiesOrChildren;\n\t\tproperties = {};\n\t}\n\n\tif (typeof properties === 'function') {\n\t\tdeferredPropertiesCallback = properties;\n\t\tproperties = {};\n\t}\n\n\tif (isVNode(tag)) {\n\t\tlet { classes = [], styles = {}, ...newProperties } = properties;\n\t\tlet { classes: nodeClasses = [], styles: nodeStyles = {}, ...nodeProperties } = tag.properties;\n\t\tnodeClasses = Array.isArray(nodeClasses) ? nodeClasses : [nodeClasses];\n\t\tclasses = Array.isArray(classes) ? classes : [classes];\n\t\tstyles = { ...nodeStyles, ...styles };\n\t\tproperties = { ...nodeProperties, ...newProperties, classes: [...nodeClasses, ...classes], styles };\n\t\tchildren = children ? children : tag.children;\n\t\ttag = tag.tag;\n\t}\n\n\treturn {\n\t\ttag,\n\t\tdeferredPropertiesCallback,\n\t\tchildren,\n\t\tproperties,\n\t\ttype: VNODE\n\t};\n}\n\n/**\n * Create a VNode for an existing DOM Node.\n */\nexport function dom(\n\t{ node, attrs = {}, props = {}, on = {}, diffType = 'none', onAttach }: DomOptions,\n\tchildren?: DNode[]\n): DomVNode {\n\treturn {\n\t\ttag: isElementNode(node) ? node.tagName.toLowerCase() : '',\n\t\tproperties: props,\n\t\tattributes: attrs,\n\t\tevents: on,\n\t\tchildren,\n\t\ttype: DOMVNODE,\n\t\tdomNode: node,\n\t\ttext: isElementNode(node) ? undefined : node.data,\n\t\tdiffType,\n\t\tonAttach\n\t};\n}\n\nexport const REGISTRY_ITEM = '__registry_item';\n\nexport class FromRegistry<P> {\n\tstatic type = REGISTRY_ITEM;\n\tproperties: P = {} as P;\n\tname: string | undefined;\n}\n\nexport function fromRegistry<P>(tag: string): Constructor<FromRegistry<P>> {\n\treturn class extends FromRegistry<P> {\n\t\tproperties: P = {} as P;\n\t\tstatic type = REGISTRY_ITEM;\n\t\tname = tag;\n\t};\n}\n\nfunction spreadChildren(children: any[], child: any): any[] {\n\tif (Array.isArray(child)) {\n\t\treturn child.reduce(spreadChildren, children);\n\t} else {\n\t\treturn [...children, child];\n\t}\n}\n\nexport function tsx(tag: any, properties = {}, ...children: any[]): DNode {\n\tchildren = children.reduce(spreadChildren, []);\n\tproperties = properties === null ? {} : properties;\n\tif (typeof tag === 'string') {\n\t\treturn v(tag, properties, children);\n\t} else if (tag.type === 'registry' && (properties as any).__autoRegistryItem) {\n\t\tconst name = (properties as any).__autoRegistryItem;\n\t\tdelete (properties as any).__autoRegistryItem;\n\t\treturn w(name, properties, children);\n\t} else if (tag.type === REGISTRY_ITEM) {\n\t\tconst registryItem = new tag();\n\t\treturn w(registryItem.name, properties, children);\n\t} else {\n\t\treturn w(tag, properties, children);\n\t}\n}\n\nexport function propertiesDiff(current: any, next: any, invalidator: () => void, ignoreProperties: string[]) {\n\tconst propertyNames = [...Object.keys(current), ...Object.keys(next)];\n\tfor (let i = 0; i < propertyNames.length; i++) {\n\t\tif (ignoreProperties.indexOf(propertyNames[i]) > -1) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst result = auto(current[propertyNames[i]], next[propertyNames[i]]);\n\t\tif (result.changed) {\n\t\t\tinvalidator();\n\t\t\tbreak;\n\t\t}\n\t\tignoreProperties.push(propertyNames[i]);\n\t}\n}\n\nfunction buildPreviousProperties(domNode: any, current: VNodeWrapper) {\n\tconst {\n\t\tnode: { diffType, properties, attributes }\n\t} = current;\n\tif (!diffType || diffType === 'vdom') {\n\t\treturn {\n\t\t\tproperties: current.deferredProperties\n\t\t\t\t? { ...current.deferredProperties, ...current.node.properties }\n\t\t\t\t: current.node.properties,\n\t\t\tattributes: current.node.attributes,\n\t\t\tevents: current.node.events\n\t\t};\n\t} else if (diffType === 'none') {\n\t\treturn {\n\t\t\tproperties: {},\n\t\t\tattributes: current.node.attributes ? {} : undefined,\n\t\t\tevents: current.node.events\n\t\t};\n\t}\n\tlet newProperties: any = {\n\t\tproperties: {}\n\t};\n\tif (attributes) {\n\t\tnewProperties.attributes = {};\n\t\tnewProperties.events = current.node.events;\n\t\tObject.keys(properties).forEach((propName) => {\n\t\t\tnewProperties.properties[propName] = domNode[propName];\n\t\t});\n\t\tObject.keys(attributes).forEach((attrName) => {\n\t\t\tnewProperties.attributes[attrName] = domNode.getAttribute(attrName);\n\t\t});\n\t\treturn newProperties;\n\t}\n\tnewProperties.properties = Object.keys(properties).reduce(\n\t\t(props, property) => {\n\t\t\tprops[property] = domNode.getAttribute(property) || domNode[property];\n\t\t\treturn props;\n\t\t},\n\t\t{} as any\n\t);\n\treturn newProperties;\n}\n\nfunction checkDistinguishable(wrappers: DNodeWrapper[], index: number, parentWNodeWrapper?: WNodeWrapper) {\n\tconst wrapperToCheck = wrappers[index];\n\tif (isVNodeWrapper(wrapperToCheck) && !wrapperToCheck.node.tag) {\n\t\treturn;\n\t}\n\tconst { key } = wrapperToCheck.node.properties;\n\tlet parentName = 'unknown';\n\tif (parentWNodeWrapper) {\n\t\tconst {\n\t\t\tnode: { widgetConstructor }\n\t\t} = parentWNodeWrapper;\n\t\tparentName = (widgetConstructor as any).name || 'unknown';\n\t}\n\n\tif (key === undefined || key === null) {\n\t\tfor (let i = 0; i < wrappers.length; i++) {\n\t\t\tif (i !== index) {\n\t\t\t\tconst wrapper = wrappers[i];\n\t\t\t\tif (same(wrapper, wrapperToCheck)) {\n\t\t\t\t\tlet nodeIdentifier: string;\n\t\t\t\t\tif (isWNodeWrapper(wrapper)) {\n\t\t\t\t\t\tnodeIdentifier = (wrapper.node.widgetConstructor as any).name || 'unknown';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnodeIdentifier = wrapper.node.tag;\n\t\t\t\t\t}\n\n\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t`A widget (${parentName}) has had a child added or removed, but they were not able to uniquely identified. It is recommended to provide a unique 'key' property when using the same widget or element (${nodeIdentifier}) multiple times as siblings`\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction same(dnode1: DNodeWrapper, dnode2: DNodeWrapper): boolean {\n\tif (isVNodeWrapper(dnode1) && isVNodeWrapper(dnode2)) {\n\t\tif (isDomVNode(dnode1.node) && isDomVNode(dnode2.node)) {\n\t\t\tif (dnode1.node.domNode !== dnode2.node.domNode) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (dnode1.node.tag !== dnode2.node.tag) {\n\t\t\treturn false;\n\t\t}\n\t\tif (dnode1.node.properties.key !== dnode2.node.properties.key) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t} else if (isWNodeWrapper(dnode1) && isWNodeWrapper(dnode2)) {\n\t\tconst widgetConstructor1 = dnode1.registryItem || dnode1.node.widgetConstructor;\n\t\tconst widgetConstructor2 = dnode2.registryItem || dnode2.node.widgetConstructor;\n\t\tif (dnode1.instance === undefined && typeof widgetConstructor2 === 'string') {\n\t\t\treturn false;\n\t\t}\n\t\tif (widgetConstructor1 !== widgetConstructor2) {\n\t\t\treturn false;\n\t\t}\n\t\tif (dnode1.node.properties.key !== dnode2.node.properties.key) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nfunction findIndexOfChild(children: DNodeWrapper[], sameAs: DNodeWrapper, start: number) {\n\tfor (let i = start; i < children.length; i++) {\n\t\tif (same(children[i], sameAs)) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\nfunction createClassPropValue(classes: SupportedClassName | SupportedClassName[] = []) {\n\tlet classNames = '';\n\tif (Array.isArray(classes)) {\n\t\tfor (let i = 0; i < classes.length; i++) {\n\t\t\tlet className = classes[i];\n\t\t\tif (className && className !== true) {\n\t\t\t\tclassNames = classNames ? `${classNames} ${className}` : className;\n\t\t\t}\n\t\t}\n\t\treturn classNames;\n\t}\n\tif (classes && classes !== true) {\n\t\tclassNames = classes;\n\t}\n\treturn classNames;\n}\n\nfunction updateAttribute(domNode: Element, attrName: string, attrValue: string | undefined, namespace?: string) {\n\tif (namespace === NAMESPACE_SVG && attrName === 'href' && attrValue) {\n\t\tdomNode.setAttributeNS(NAMESPACE_XLINK, attrName, attrValue);\n\t} else if ((attrName === 'role' && attrValue === '') || attrValue === undefined) {\n\t\tdomNode.removeAttribute(attrName);\n\t} else {\n\t\tdomNode.setAttribute(attrName, attrValue);\n\t}\n}\n\nfunction arrayFrom(arr: any) {\n\treturn Array.prototype.slice.call(arr);\n}\n\nfunction createFactory(callback: any, middlewares: any): any {\n\tconst factory = (properties: any, children?: any) => {\n\t\tif (properties) {\n\t\t\tconst result = w(callback, properties, children);\n\t\t\tcallback.isWidget = true;\n\t\t\tcallback.middlewares = middlewares;\n\t\t\treturn result;\n\t\t}\n\t\treturn {\n\t\t\tmiddlewares,\n\t\t\tcallback\n\t\t};\n\t};\n\tfactory.isFactory = true;\n\treturn factory;\n}\n\nexport function create<T extends MiddlewareMap, MiddlewareProps = ReturnType<T[keyof T]>['properties']>(\n\tmiddlewares: T = {} as T\n) {\n\tfunction properties<Props extends {}>() {\n\t\tfunction returns<ReturnValue>(\n\t\t\tcallback: Callback<WidgetProperties & Props & UnionToIntersection<MiddlewareProps>, T, ReturnValue>\n\t\t): ReturnValue extends RenderResult\n\t\t\t? WNodeFactory<{\n\t\t\t\t\tproperties: Props & WidgetProperties & UnionToIntersection<MiddlewareProps>;\n\t\t\t\t\tchildren: DNode[];\n\t\t\t  }>\n\t\t\t: MiddlewareResultFactory<WidgetProperties & Props & UnionToIntersection<MiddlewareProps>, T, ReturnValue> {\n\t\t\treturn createFactory(callback, middlewares);\n\t\t}\n\t\treturn returns;\n\t}\n\n\tfunction returns<ReturnValue>(\n\t\tcallback: Callback<WidgetProperties & UnionToIntersection<MiddlewareProps>, T, ReturnValue>\n\t): ReturnValue extends RenderResult\n\t\t? WNodeFactory<{\n\t\t\t\tproperties: WidgetProperties & UnionToIntersection<MiddlewareProps>;\n\t\t\t\tchildren: DNode[];\n\t\t  }>\n\t\t: MiddlewareResultFactory<WidgetProperties & UnionToIntersection<MiddlewareProps>, T, ReturnValue> {\n\t\treturn createFactory(callback, middlewares);\n\t}\n\treturns.properties = properties;\n\treturn returns;\n}\n\nconst factory = create();\n\nfunction wrapNodes(renderer: () => RenderResult) {\n\tconst result = renderer();\n\tconst isWNodeWrapper = isWNode(result);\n\tconst callback = () => {\n\t\treturn result;\n\t};\n\tcallback.isWNodeWrapper = isWNodeWrapper;\n\treturn factory(callback);\n}\n\nexport const widgetInstanceMap = new WeakMap<WidgetBaseInterface, WidgetData>();\nconst widgetMetaMap = new Map<string, WidgetMeta>();\nconst requestedDomNodes = new Set();\nlet wrapperId = 0;\nlet metaId = 0;\n\nfunction addNodeToMap(id: string, key: string | number, node: HTMLElement) {\n\tconst widgetMeta = widgetMetaMap.get(id);\n\tif (widgetMeta) {\n\t\twidgetMeta.nodeMap = widgetMeta.nodeMap || new Map();\n\t\tconst existingNode = widgetMeta.nodeMap.get(key);\n\t\tif (!existingNode) {\n\t\t\twidgetMeta.nodeMap.set(key, node);\n\t\t}\n\t\tif (requestedDomNodes.has(`${id}-${key}`)) {\n\t\t\twidgetMeta.invalidator();\n\t\t\trequestedDomNodes.delete(`${id}-${key}`);\n\t\t}\n\t}\n}\n\nfunction destroyHandles(destroyMap: Map<string, () => void>) {\n\tdestroyMap.forEach((destroy) => destroy());\n\tdestroyMap.clear();\n}\n\nfunction runDiffs(meta: WidgetMeta, current: any, next: any) {\n\tmeta.customDiffMap = meta.customDiffMap || new Map();\n\tif (meta.customDiffMap.size) {\n\t\tmeta.customDiffMap.forEach((diffMap) => {\n\t\t\tdiffMap.forEach((diff) => diff({ ...current }, { ...next }));\n\t\t});\n\t}\n}\n\nexport const invalidator = factory(({ id }) => {\n\tconst [widgetId] = id.split('-');\n\treturn () => {\n\t\tconst widgetMeta = widgetMetaMap.get(widgetId);\n\t\tif (widgetMeta) {\n\t\t\treturn widgetMeta.invalidator();\n\t\t}\n\t};\n});\n\nexport const node = factory(({ id }) => {\n\treturn {\n\t\tget(key: string | number): HTMLElement | null {\n\t\t\tconst [widgetId] = id.split('-');\n\t\t\tconst widgetMeta = widgetMetaMap.get(widgetId);\n\t\t\tif (widgetMeta) {\n\t\t\t\twidgetMeta.nodeMap = widgetMeta.nodeMap || new Map();\n\t\t\t\tconst node = widgetMeta.nodeMap.get(key);\n\t\t\t\tif (node) {\n\t\t\t\t\treturn node;\n\t\t\t\t}\n\t\t\t\trequestedDomNodes.add(`${widgetId}-${key}`);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t};\n});\n\nexport const diffProperty = factory(({ id }) => {\n\treturn (propertyName: string, diff: (current: any, next: any) => void) => {\n\t\tconst [widgetId] = id.split('-');\n\t\tconst widgetMeta = widgetMetaMap.get(widgetId);\n\t\tif (widgetMeta) {\n\t\t\twidgetMeta.customDiffMap = widgetMeta.customDiffMap || new Map();\n\t\t\twidgetMeta.customDiffProperties = widgetMeta.customDiffProperties || new Set();\n\t\t\tconst propertyDiffMap = widgetMeta.customDiffMap.get(id) || new Map();\n\t\t\tif (!propertyDiffMap.has(propertyName)) {\n\t\t\t\tpropertyDiffMap.set(propertyName, diff);\n\t\t\t\twidgetMeta.customDiffProperties.add(propertyName);\n\t\t\t}\n\t\t\twidgetMeta.customDiffMap.set(id, propertyDiffMap);\n\t\t}\n\t};\n});\n\nexport const destroy = factory(({ id }) => {\n\treturn (destroyFunction: () => void): void => {\n\t\tconst [widgetId] = id.split('-');\n\t\tconst widgetMeta = widgetMetaMap.get(widgetId);\n\t\tif (widgetMeta) {\n\t\t\twidgetMeta.destroyMap = widgetMeta.destroyMap || new Map();\n\t\t\tif (!widgetMeta.destroyMap.has(id)) {\n\t\t\t\twidgetMeta.destroyMap.set(id, destroyFunction);\n\t\t\t}\n\t\t}\n\t};\n});\n\nexport const getRegistry = factory(({ id }) => {\n\tconst [widgetId] = id.split('-');\n\treturn (): RegistryHandler | null => {\n\t\tconst widgetMeta = widgetMetaMap.get(widgetId);\n\t\tif (widgetMeta) {\n\t\t\tif (!widgetMeta.registryHandler) {\n\t\t\t\twidgetMeta.registryHandler = new RegistryHandler();\n\t\t\t\twidgetMeta.registryHandler.base = widgetMeta.registry;\n\t\t\t\twidgetMeta.registryHandler.on('invalidate', widgetMeta.invalidator);\n\t\t\t}\n\t\t\twidgetMeta.registryHandler = widgetMeta.registryHandler || new RegistryHandler();\n\t\t\treturn widgetMeta.registryHandler;\n\t\t}\n\t\treturn null;\n\t};\n});\n\nexport const defer = factory(({ id }) => {\n\tconst [widgetId] = id.split('-');\n\tlet isDeferred = false;\n\treturn {\n\t\tpause() {\n\t\t\tconst widgetMeta = widgetMetaMap.get(widgetId);\n\t\t\tif (!isDeferred && widgetMeta) {\n\t\t\t\twidgetMeta.deferRefs = widgetMeta.deferRefs + 1;\n\t\t\t\tisDeferred = true;\n\t\t\t}\n\t\t},\n\t\tresume() {\n\t\t\tconst widgetMeta = widgetMetaMap.get(widgetId);\n\t\t\tif (isDeferred && widgetMeta) {\n\t\t\t\twidgetMeta.deferRefs = widgetMeta.deferRefs - 1;\n\t\t\t\tisDeferred = false;\n\t\t\t}\n\t\t}\n\t};\n});\n\nexport function renderer(renderer: () => RenderResult): Renderer {\n\tlet _mountOptions: MountOptions = {\n\t\tsync: false,\n\t\tmerge: true,\n\t\ttransition: undefined,\n\t\tdomNode: global.document.body,\n\t\tregistry: new Registry()\n\t};\n\tlet _invalidationQueue: InvalidationQueueItem[] = [];\n\tlet _processQueue: (ProcessItem | DetachApplication | AttachApplication)[] = [];\n\tlet _deferredProcessQueue: (ProcessItem | DetachApplication | AttachApplication)[] = [];\n\tlet _applicationQueue: ApplicationInstruction[] = [];\n\tlet _eventMap = new WeakMap<Function, EventListener>();\n\tlet _idToWrapperMap = new Map<string, DNodeWrapper>();\n\tlet _wrapperSiblingMap = new WeakMap<DNodeWrapper, DNodeWrapper>();\n\tlet _idToChildrenWrappers = new Map<string, DNodeWrapper[]>();\n\tlet _insertBeforeMap: undefined | WeakMap<DNodeWrapper, Node> = new WeakMap<DNodeWrapper, Node>();\n\tlet _nodeToWrapperMap = new WeakMap<VNode | WNode<any>, WNodeWrapper>();\n\tlet _renderScheduled: number | undefined;\n\tlet _idleCallbacks: Function[] = [];\n\tlet _deferredRenderCallbacks: Function[] = [];\n\tlet parentInvalidate: () => void;\n\tlet _allMergedNodes: Node[] = [];\n\n\tfunction nodeOperation(\n\t\tpropName: string,\n\t\tpropValue: (() => boolean) | boolean,\n\t\tpreviousValue: boolean,\n\t\tdomNode: HTMLElement & { [index: string]: any }\n\t): void {\n\t\tlet result = propValue && !previousValue;\n\t\tif (typeof propValue === 'function') {\n\t\t\tresult = propValue();\n\t\t}\n\t\tif (result === true) {\n\t\t\t_deferredRenderCallbacks.push(() => {\n\t\t\t\tdomNode[propName]();\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction updateEvent(\n\t\tdomNode: Node,\n\t\teventName: string,\n\t\tcurrentValue: (event: Event) => void,\n\t\tpreviousValue?: Function\n\t) {\n\t\tif (previousValue) {\n\t\t\tconst previousEvent = _eventMap.get(previousValue);\n\t\t\tpreviousEvent && domNode.removeEventListener(eventName, previousEvent);\n\t\t}\n\n\t\tlet callback = currentValue;\n\n\t\tif (eventName === 'input') {\n\t\t\tcallback = function(this: any, evt: Event) {\n\t\t\t\tcurrentValue.call(this, evt);\n\t\t\t\t(evt.target as any)['oninput-value'] = (evt.target as HTMLInputElement).value;\n\t\t\t};\n\t\t}\n\n\t\tdomNode.addEventListener(eventName, callback);\n\t\t_eventMap.set(currentValue, callback);\n\t}\n\n\tfunction removeOrphanedEvents(\n\t\tdomNode: Element,\n\t\tpreviousProperties: VNodeProperties,\n\t\tproperties: VNodeProperties,\n\t\tonlyEvents: boolean = false\n\t) {\n\t\tObject.keys(previousProperties).forEach((propName) => {\n\t\t\tconst isEvent = propName.substr(0, 2) === 'on' || onlyEvents;\n\t\t\tconst eventName = onlyEvents ? propName : propName.substr(2);\n\t\t\tif (isEvent && !properties[propName]) {\n\t\t\t\tconst eventCallback = _eventMap.get(previousProperties[propName]);\n\t\t\t\tif (eventCallback) {\n\t\t\t\t\tdomNode.removeEventListener(eventName, eventCallback);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction resolveRegistryItem(wrapper: WNodeWrapper, instance?: any, id?: string) {\n\t\tif (!isWidget(wrapper.node.widgetConstructor)) {\n\t\t\tconst owningNode = _nodeToWrapperMap.get(wrapper.node);\n\t\t\tif (owningNode) {\n\t\t\t\tif (owningNode.instance) {\n\t\t\t\t\tinstance = owningNode.instance;\n\t\t\t\t} else {\n\t\t\t\t\tid = owningNode.id;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet registry: RegistryHandler | undefined;\n\t\t\tif (instance) {\n\t\t\t\tconst instanceData = widgetInstanceMap.get(instance);\n\t\t\t\tif (instanceData) {\n\t\t\t\t\tregistry = instanceData.registry;\n\t\t\t\t}\n\t\t\t} else if (id !== undefined) {\n\t\t\t\tconst widgetMeta = widgetMetaMap.get(id);\n\t\t\t\tif (widgetMeta) {\n\t\t\t\t\tif (!widgetMeta.registryHandler) {\n\t\t\t\t\t\twidgetMeta.registryHandler = new RegistryHandler();\n\t\t\t\t\t\twidgetMeta.registryHandler.base = widgetMeta.registry;\n\t\t\t\t\t\twidgetMeta.registryHandler.on('invalidate', widgetMeta.invalidator);\n\t\t\t\t\t}\n\t\t\t\t\tregistry = widgetMeta.registryHandler;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (registry) {\n\t\t\t\tlet registryLabel: symbol | string;\n\t\t\t\tif (isLazyDefine(wrapper.node.widgetConstructor)) {\n\t\t\t\t\tconst { label, registryItem } = wrapper.node.widgetConstructor;\n\t\t\t\t\tif (!registry.has(label)) {\n\t\t\t\t\t\tregistry.define(label, registryItem);\n\t\t\t\t\t}\n\t\t\t\t\tregistryLabel = label;\n\t\t\t\t} else {\n\t\t\t\t\tregistryLabel = wrapper.node.widgetConstructor as any;\n\t\t\t\t}\n\t\t\t\tlet item = registry.get(registryLabel) as any;\n\t\t\t\tif (isWNodeFactory(item)) {\n\t\t\t\t\tconst node = item(wrapper.node.properties, wrapper.node.children);\n\t\t\t\t\tif (isWidgetFunction(node.widgetConstructor)) {\n\t\t\t\t\t\twrapper.registryItem = node.widgetConstructor;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\twrapper.registryItem = item;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction mapNodeToInstance(nodes: DNode[], wrapper: WNodeWrapper) {\n\t\twhile (nodes.length) {\n\t\t\tlet node = nodes.pop();\n\t\t\tif (isWNode(node) || isVNode(node)) {\n\t\t\t\tif (!_nodeToWrapperMap.has(node)) {\n\t\t\t\t\t_nodeToWrapperMap.set(node, wrapper);\n\t\t\t\t\tif (node.children && node.children.length) {\n\t\t\t\t\t\tnodes = [...nodes, ...node.children];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction renderedToWrapper(\n\t\trendered: DNode[],\n\t\tparent: DNodeWrapper,\n\t\tcurrentParent: DNodeWrapper | null\n\t): DNodeWrapper[] {\n\t\tconst { requiresInsertBefore, hasPreviousSiblings, namespace, depth } = parent;\n\t\tconst wrappedRendered: DNodeWrapper[] = [];\n\t\tconst hasParentWNode = isWNodeWrapper(parent);\n\t\tconst hasVirtualParentNode = isVirtualWrapper(parent);\n\t\tconst currentParentChildren =\n\t\t\t(isVNodeWrapper(currentParent) && _idToChildrenWrappers.get(currentParent.id)) || [];\n\t\tconst hasCurrentParentChildren = currentParentChildren.length > 0;\n\t\tconst insertBefore =\n\t\t\t((requiresInsertBefore || hasPreviousSiblings !== false) && (hasParentWNode || hasVirtualParentNode)) ||\n\t\t\t(hasCurrentParentChildren && rendered.length > 1);\n\t\tlet previousItem: DNodeWrapper | undefined;\n\t\tif (isWNodeWrapper(parent) && rendered.length) {\n\t\t\tmapNodeToInstance([...rendered], parent);\n\t\t}\n\t\tfor (let i = 0; i < rendered.length; i++) {\n\t\t\tlet renderedItem = rendered[i];\n\t\t\tif (!renderedItem || renderedItem === true) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (typeof renderedItem === 'string') {\n\t\t\t\trenderedItem = toTextVNode(renderedItem);\n\t\t\t}\n\t\t\tconst owningNode = _nodeToWrapperMap.get(renderedItem);\n\t\t\tconst wrapper: DNodeWrapper = {\n\t\t\t\tnode: renderedItem,\n\t\t\t\tdepth: depth + 1,\n\t\t\t\torder: i,\n\t\t\t\tparentId: parent.id,\n\t\t\t\trequiresInsertBefore: insertBefore,\n\t\t\t\thasParentWNode,\n\t\t\t\tnamespace: namespace\n\t\t\t} as DNodeWrapper;\n\t\t\tif (isVNode(renderedItem)) {\n\t\t\t\tif (renderedItem.deferredPropertiesCallback) {\n\t\t\t\t\t(wrapper as VNodeWrapper).deferredProperties = renderedItem.deferredPropertiesCallback(false);\n\t\t\t\t}\n\t\t\t\tif (renderedItem.properties.exitAnimation) {\n\t\t\t\t\tparent.hasAnimations = true;\n\t\t\t\t\tlet nextParent = _idToWrapperMap.get(parent.parentId);\n\t\t\t\t\twhile (nextParent) {\n\t\t\t\t\t\tif (nextParent.hasAnimations) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnextParent.hasAnimations = true;\n\t\t\t\t\t\tnextParent = _idToWrapperMap.get(nextParent.parentId);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (owningNode) {\n\t\t\t\twrapper.owningId = owningNode.id;\n\t\t\t}\n\t\t\tif (isWNode(renderedItem)) {\n\t\t\t\tresolveRegistryItem(wrapper as WNodeWrapper, (parent as any).instance, (parent as any).id);\n\t\t\t}\n\t\t\tif (previousItem) {\n\t\t\t\t_wrapperSiblingMap.set(previousItem, wrapper);\n\t\t\t}\n\t\t\twrappedRendered.push(wrapper);\n\t\t\tpreviousItem = wrapper;\n\t\t}\n\t\treturn wrappedRendered;\n\t}\n\n\tfunction findParentDomNode(currentNode: DNodeWrapper): Node | undefined {\n\t\tlet parentDomNode: Node | undefined;\n\t\tlet parentWrapper = _idToWrapperMap.get(currentNode.parentId);\n\n\t\twhile (!parentDomNode && parentWrapper) {\n\t\t\tif (\n\t\t\t\t!parentDomNode &&\n\t\t\t\tisVNodeWrapper(parentWrapper) &&\n\t\t\t\t!isVirtualWrapper(parentWrapper) &&\n\t\t\t\tparentWrapper.domNode\n\t\t\t) {\n\t\t\t\tparentDomNode = parentWrapper.domNode;\n\t\t\t}\n\t\t\tparentWrapper = _idToWrapperMap.get(parentWrapper.parentId);\n\t\t}\n\t\treturn parentDomNode;\n\t}\n\n\tfunction runDeferredProperties(next: VNodeWrapper) {\n\t\tconst { deferredPropertiesCallback } = next.node;\n\t\tif (deferredPropertiesCallback) {\n\t\t\tconst properties = next.node.properties;\n\t\t\t_deferredRenderCallbacks.push(() => {\n\t\t\t\tif (_idToWrapperMap.has(next.owningId)) {\n\t\t\t\t\tconst deferredProperties = next.deferredProperties;\n\t\t\t\t\tnext.deferredProperties = deferredPropertiesCallback(true);\n\t\t\t\t\tprocessProperties(next, {\n\t\t\t\t\t\tproperties: { ...deferredProperties, ...properties }\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction findInsertBefore(next: DNodeWrapper) {\n\t\tlet insertBefore: Node | null = null;\n\t\tlet searchNode: DNodeWrapper | undefined = next;\n\t\twhile (!insertBefore) {\n\t\t\tconst nextSibling = _wrapperSiblingMap.get(searchNode);\n\t\t\tif (nextSibling) {\n\t\t\t\tlet domNode = nextSibling.domNode;\n\t\t\t\tif ((isWNodeWrapper(nextSibling) || isVirtualWrapper(nextSibling)) && nextSibling.childDomWrapperId) {\n\t\t\t\t\tconst childWrapper = _idToWrapperMap.get(nextSibling.childDomWrapperId);\n\t\t\t\t\tif (childWrapper) {\n\t\t\t\t\t\tdomNode = childWrapper.domNode;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (domNode && domNode.parentNode) {\n\t\t\t\t\tinsertBefore = domNode;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tsearchNode = nextSibling;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tsearchNode = searchNode && _idToWrapperMap.get(searchNode.parentId);\n\t\t\tif (!searchNode || (isVNodeWrapper(searchNode) && !isVirtualWrapper(searchNode))) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn insertBefore;\n\t}\n\n\tfunction setValue(domNode: any, propValue?: any, previousValue?: any) {\n\t\tconst domValue = domNode.value;\n\t\tconst onInputValue = domNode['oninput-value'];\n\t\tconst onSelectValue = domNode['select-value'];\n\n\t\tif (onSelectValue && domValue !== onSelectValue) {\n\t\t\tdomNode.value = onSelectValue;\n\t\t\tif (domNode.value === onSelectValue) {\n\t\t\t\tdomNode['select-value'] = undefined;\n\t\t\t}\n\t\t} else if ((onInputValue && domValue === onInputValue) || propValue !== previousValue) {\n\t\t\tdomNode.value = propValue;\n\t\t\tdomNode['oninput-value'] = undefined;\n\t\t}\n\t}\n\n\tfunction setProperties(\n\t\tdomNode: HTMLElement,\n\t\tcurrentProperties: VNodeProperties = {},\n\t\tnextWrapper: VNodeWrapper,\n\t\tincludesEventsAndAttributes = true\n\t): void {\n\t\tconst properties = nextWrapper.deferredProperties\n\t\t\t? { ...nextWrapper.deferredProperties, ...nextWrapper.node.properties }\n\t\t\t: nextWrapper.node.properties;\n\t\tconst propNames = Object.keys(properties);\n\t\tconst propCount = propNames.length;\n\t\tif (propNames.indexOf('classes') === -1 && currentProperties.classes) {\n\t\t\tdomNode.removeAttribute('class');\n\t\t}\n\n\t\tincludesEventsAndAttributes && removeOrphanedEvents(domNode, currentProperties, properties);\n\n\t\tfor (let i = 0; i < propCount; i++) {\n\t\t\tconst propName = propNames[i];\n\t\t\tlet propValue = properties[propName];\n\t\t\tconst previousValue = currentProperties[propName];\n\t\t\tif (propName === 'classes') {\n\t\t\t\tconst previousClassString = createClassPropValue(previousValue);\n\t\t\t\tlet currentClassString = createClassPropValue(propValue);\n\t\t\t\tif (previousClassString !== currentClassString) {\n\t\t\t\t\tif (currentClassString) {\n\t\t\t\t\t\tif (nextWrapper.merged) {\n\t\t\t\t\t\t\tconst domClasses = (domNode.getAttribute('class') || '').split(' ');\n\t\t\t\t\t\t\tfor (let i = 0; i < domClasses.length; i++) {\n\t\t\t\t\t\t\t\tif (currentClassString.indexOf(domClasses[i]) === -1) {\n\t\t\t\t\t\t\t\t\tcurrentClassString = `${domClasses[i]} ${currentClassString}`;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdomNode.setAttribute('class', currentClassString);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdomNode.removeAttribute('class');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (nodeOperations.indexOf(propName) !== -1) {\n\t\t\t\tnodeOperation(propName, propValue, previousValue, domNode);\n\t\t\t} else if (propName === 'styles') {\n\t\t\t\tconst styleNames = Object.keys(propValue);\n\t\t\t\tconst styleCount = styleNames.length;\n\t\t\t\tfor (let j = 0; j < styleCount; j++) {\n\t\t\t\t\tconst styleName = styleNames[j];\n\t\t\t\t\tconst newStyleValue = propValue[styleName];\n\t\t\t\t\tconst oldStyleValue = previousValue && previousValue[styleName];\n\t\t\t\t\tif (newStyleValue === oldStyleValue) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t(domNode.style as any)[styleName] = newStyleValue || '';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!propValue && typeof previousValue === 'string') {\n\t\t\t\t\tpropValue = '';\n\t\t\t\t}\n\t\t\t\tif (propName === 'value') {\n\t\t\t\t\tif ((domNode as HTMLElement).tagName === 'SELECT') {\n\t\t\t\t\t\t(domNode as any)['select-value'] = propValue;\n\t\t\t\t\t}\n\t\t\t\t\tsetValue(domNode, propValue, previousValue);\n\t\t\t\t} else if (propName !== 'key' && propValue !== previousValue) {\n\t\t\t\t\tconst type = typeof propValue;\n\t\t\t\t\tif (type === 'function' && propName.lastIndexOf('on', 0) === 0 && includesEventsAndAttributes) {\n\t\t\t\t\t\tupdateEvent(domNode, propName.substr(2), propValue, previousValue);\n\t\t\t\t\t} else if (type === 'string' && propName !== 'innerHTML' && includesEventsAndAttributes) {\n\t\t\t\t\t\tupdateAttribute(domNode, propName, propValue, nextWrapper.namespace);\n\t\t\t\t\t} else if (propName === 'scrollLeft' || propName === 'scrollTop') {\n\t\t\t\t\t\tif ((domNode as any)[propName] !== propValue) {\n\t\t\t\t\t\t\t(domNode as any)[propName] = propValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t(domNode as any)[propName] = propValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction runDeferredRenderCallbacks() {\n\t\tconst { sync } = _mountOptions;\n\t\tconst callbacks = _deferredRenderCallbacks;\n\t\t_deferredRenderCallbacks = [];\n\t\tif (callbacks.length) {\n\t\t\tconst run = () => {\n\t\t\t\tlet callback: Function | undefined;\n\t\t\t\twhile ((callback = callbacks.shift())) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (sync) {\n\t\t\t\trun();\n\t\t\t} else {\n\t\t\t\tglobal.requestAnimationFrame(run);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction runAfterRenderCallbacks() {\n\t\tconst { sync } = _mountOptions;\n\t\tconst callbacks = _idleCallbacks;\n\t\t_idleCallbacks = [];\n\t\tif (callbacks.length) {\n\t\t\tconst run = () => {\n\t\t\t\tlet callback: Function | undefined;\n\t\t\t\twhile ((callback = callbacks.shift())) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (sync) {\n\t\t\t\trun();\n\t\t\t} else {\n\t\t\t\tif (global.requestIdleCallback) {\n\t\t\t\t\tglobal.requestIdleCallback(run);\n\t\t\t\t} else {\n\t\t\t\t\tsetTimeout(run);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction processProperties(next: VNodeWrapper, previousProperties: PreviousProperties) {\n\t\tif (next.node.attributes && next.node.events) {\n\t\t\tupdateAttributes(\n\t\t\t\tnext.domNode as HTMLElement,\n\t\t\t\tpreviousProperties.attributes || {},\n\t\t\t\tnext.node.attributes,\n\t\t\t\tnext.namespace\n\t\t\t);\n\t\t\tsetProperties(next.domNode as HTMLElement, previousProperties.properties, next, false);\n\t\t\tconst events = next.node.events || {};\n\t\t\tif (previousProperties.events) {\n\t\t\t\tremoveOrphanedEvents(\n\t\t\t\t\tnext.domNode as HTMLElement,\n\t\t\t\t\tpreviousProperties.events || {},\n\t\t\t\t\tnext.node.events,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t}\n\t\t\tpreviousProperties.events = previousProperties.events || {};\n\t\t\tObject.keys(events).forEach((event) => {\n\t\t\t\tupdateEvent(next.domNode as HTMLElement, event, events[event], previousProperties.events[event]);\n\t\t\t});\n\t\t} else {\n\t\t\tsetProperties(next.domNode as HTMLElement, previousProperties.properties, next);\n\t\t}\n\t}\n\n\tfunction mount(mountOptions: Partial<MountOptions> = {}) {\n\t\t_mountOptions = { ..._mountOptions, ...mountOptions };\n\t\tconst { domNode } = _mountOptions;\n\t\tconst renderResult = wrapNodes(renderer)({});\n\t\tconst nextWrapper = {\n\t\t\tid: `${wrapperId++}`,\n\t\t\tnode: renderResult,\n\t\t\torder: 0,\n\t\t\tdepth: 1,\n\t\t\towningId: '-1',\n\t\t\tparentId: '-1',\n\t\t\tsiblingId: '-1',\n\t\t\tproperties: {}\n\t\t};\n\t\t_idToWrapperMap.set('-1', {\n\t\t\tid: `-1`,\n\t\t\tdepth: 0,\n\t\t\torder: 0,\n\t\t\towningId: '',\n\t\t\tdomNode,\n\t\t\tnode: v('fake'),\n\t\t\tparentId: '-1'\n\t\t});\n\t\t_processQueue.push({\n\t\t\tcurrent: [],\n\t\t\tnext: [nextWrapper],\n\t\t\tmeta: { mergeNodes: arrayFrom(domNode.childNodes) }\n\t\t});\n\t\t_runProcessQueue();\n\t\t_runDomInstructionQueue();\n\t\t_cleanUpMergedNodes();\n\t\t_insertBeforeMap = undefined;\n\t\t_runCallbacks();\n\t}\n\n\tfunction invalidate() {\n\t\tparentInvalidate && parentInvalidate();\n\t}\n\n\tfunction _schedule(): void {\n\t\tconst { sync } = _mountOptions;\n\t\tif (sync) {\n\t\t\t_runInvalidationQueue();\n\t\t} else if (!_renderScheduled) {\n\t\t\t_renderScheduled = global.requestAnimationFrame(() => {\n\t\t\t\t_runInvalidationQueue();\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction getWNodeWrapper(id: string) {\n\t\tconst wrapper = _idToWrapperMap.get(id);\n\t\tif (wrapper && isWNodeWrapper(wrapper)) {\n\t\t\treturn wrapper;\n\t\t}\n\t}\n\n\tfunction _runInvalidationQueue() {\n\t\t_renderScheduled = undefined;\n\t\tlet invalidationQueue = [..._invalidationQueue];\n\t\tconst previouslyRendered = [];\n\t\t_invalidationQueue = [];\n\t\tinvalidationQueue.sort((a, b) => {\n\t\t\tlet result = b.depth - a.depth;\n\t\t\tif (result === 0) {\n\t\t\t\tresult = b.order - a.order;\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\t\tif (_deferredProcessQueue.length) {\n\t\t\t_processQueue = [..._deferredProcessQueue];\n\t\t\t_deferredProcessQueue = [];\n\t\t\t_runProcessQueue();\n\t\t\tif (_deferredProcessQueue.length) {\n\t\t\t\t_invalidationQueue = [...invalidationQueue];\n\t\t\t\tinvalidationQueue = [];\n\t\t\t}\n\t\t}\n\t\tlet item: InvalidationQueueItem | undefined;\n\t\twhile ((item = invalidationQueue.pop())) {\n\t\t\tlet { id } = item;\n\t\t\tconst current = getWNodeWrapper(id);\n\t\t\tif (!current || previouslyRendered.indexOf(id) !== -1 || !_idToWrapperMap.has(current.parentId)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tpreviouslyRendered.push(id);\n\t\t\tconst sibling = _wrapperSiblingMap.get(current);\n\t\t\tconst next = {\n\t\t\t\tnode: {\n\t\t\t\t\ttype: WNODE,\n\t\t\t\t\twidgetConstructor: current.node.widgetConstructor,\n\t\t\t\t\tproperties: current.properties || {},\n\t\t\t\t\tchildren: current.node.children || []\n\t\t\t\t},\n\t\t\t\tinstance: current.instance,\n\t\t\t\tid: current.id,\n\t\t\t\tproperties: current.properties,\n\t\t\t\tdepth: current.depth,\n\t\t\t\torder: current.order,\n\t\t\t\towningId: current.owningId,\n\t\t\t\tparentId: current.parentId,\n\t\t\t\tregistryItem: current.registryItem\n\t\t\t};\n\n\t\t\tsibling && _wrapperSiblingMap.set(next, sibling);\n\t\t\tconst result = _updateWidget({ current, next });\n\t\t\tif (result && result.item) {\n\t\t\t\t_processQueue.push(result.item);\n\t\t\t\t_idToWrapperMap.set(id, next);\n\t\t\t\t_runProcessQueue();\n\t\t\t}\n\t\t}\n\t\t_runDomInstructionQueue();\n\t\t_cleanUpMergedNodes();\n\t\t_runCallbacks();\n\t}\n\n\tfunction _cleanUpMergedNodes() {\n\t\tif (_deferredProcessQueue.length === 0) {\n\t\t\tlet mergedNode: Node | undefined;\n\t\t\twhile ((mergedNode = _allMergedNodes.pop())) {\n\t\t\t\tmergedNode.parentNode && mergedNode.parentNode.removeChild(mergedNode);\n\t\t\t}\n\t\t\t_mountOptions.merge = false;\n\t\t}\n\t}\n\n\tfunction _runProcessQueue() {\n\t\tlet item: DetachApplication | AttachApplication | ProcessItem | undefined;\n\t\twhile ((item = _processQueue.pop())) {\n\t\t\tif (isAttachApplication(item)) {\n\t\t\t\titem.type === 'attach' && setDomNodeOnParentWrapper(item.id);\n\t\t\t\tif (item.instance) {\n\t\t\t\t\t_applicationQueue.push(item as any);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst { current, next, meta } = item;\n\t\t\t\t_process(current || EMPTY_ARRAY, next || EMPTY_ARRAY, meta);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction _runDomInstructionQueue(): void {\n\t\t_applicationQueue.reverse();\n\t\tlet item: ApplicationInstruction | undefined;\n\t\twhile ((item = _applicationQueue.pop())) {\n\t\t\tif (item.type === 'create') {\n\t\t\t\tconst {\n\t\t\t\t\tparentDomNode,\n\t\t\t\t\tnext,\n\t\t\t\t\tnext: { domNode, merged, requiresInsertBefore, node }\n\t\t\t\t} = item;\n\n\t\t\t\tprocessProperties(next, { properties: {} });\n\t\t\t\trunDeferredProperties(next);\n\t\t\t\tif (!merged) {\n\t\t\t\t\tlet insertBefore: any;\n\t\t\t\t\tif (requiresInsertBefore) {\n\t\t\t\t\t\tinsertBefore = findInsertBefore(next);\n\t\t\t\t\t} else if (_insertBeforeMap) {\n\t\t\t\t\t\tinsertBefore = _insertBeforeMap.get(next);\n\t\t\t\t\t}\n\t\t\t\t\tparentDomNode.insertBefore(domNode!, insertBefore);\n\t\t\t\t\tif (isDomVNode(next.node) && next.node.onAttach) {\n\t\t\t\t\t\tnext.node.onAttach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ((domNode as HTMLElement).tagName === 'OPTION' && domNode!.parentElement) {\n\t\t\t\t\tsetValue(domNode!.parentElement);\n\t\t\t\t}\n\t\t\t\tconst { enterAnimation, enterAnimationActive } = node.properties;\n\t\t\t\tif (_mountOptions.transition && enterAnimation && enterAnimation !== true) {\n\t\t\t\t\t_mountOptions.transition.enter(domNode as HTMLElement, enterAnimation, enterAnimationActive);\n\t\t\t\t}\n\t\t\t\tconst owningWrapper = _nodeToWrapperMap.get(next.node);\n\t\t\t\tif (owningWrapper && node.properties.key != null) {\n\t\t\t\t\tif (owningWrapper.instance) {\n\t\t\t\t\t\tconst instanceData = widgetInstanceMap.get(owningWrapper.instance);\n\t\t\t\t\t\tinstanceData && instanceData.nodeHandler.add(domNode as HTMLElement, `${node.properties.key}`);\n\t\t\t\t\t} else {\n\t\t\t\t\t\taddNodeToMap(owningWrapper.id, node.properties.key, domNode as HTMLElement);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\titem.next.inserted = true;\n\t\t\t} else if (item.type === 'update') {\n\t\t\t\tconst {\n\t\t\t\t\tnext,\n\t\t\t\t\tnext: { domNode },\n\t\t\t\t\tcurrent,\n\t\t\t\t\tcurrent: { domNode: currentDomNode }\n\t\t\t\t} = item;\n\t\t\t\tif (isTextNode(domNode) && isTextNode(currentDomNode) && domNode !== currentDomNode) {\n\t\t\t\t\tcurrentDomNode.parentNode && currentDomNode.parentNode.replaceChild(domNode, currentDomNode);\n\t\t\t\t} else {\n\t\t\t\t\tconst previousProperties = buildPreviousProperties(domNode, current);\n\t\t\t\t\tprocessProperties(next, previousProperties);\n\t\t\t\t\trunDeferredProperties(next);\n\t\t\t\t}\n\t\t\t} else if (item.type === 'delete') {\n\t\t\t\tconst { current } = item;\n\t\t\t\tconst { exitAnimation, exitAnimationActive } = current.node.properties;\n\t\t\t\tif (_mountOptions.transition && exitAnimation && exitAnimation !== true) {\n\t\t\t\t\t_mountOptions.transition.exit(current.domNode as HTMLElement, exitAnimation, exitAnimationActive);\n\t\t\t\t} else {\n\t\t\t\t\tcurrent.domNode!.parentNode!.removeChild(current.domNode!);\n\t\t\t\t}\n\t\t\t} else if (item.type === 'attach') {\n\t\t\t\tconst { instance, attached } = item;\n\t\t\t\tconst instanceData = widgetInstanceMap.get(instance);\n\t\t\t\tif (instanceData) {\n\t\t\t\t\tinstanceData.nodeHandler.addRoot();\n\t\t\t\t\tattached && instanceData.onAttach();\n\t\t\t\t}\n\t\t\t} else if (item.type === 'detach') {\n\t\t\t\tif (item.current.instance) {\n\t\t\t\t\tconst instanceData = widgetInstanceMap.get(item.current.instance);\n\t\t\t\t\tinstanceData && instanceData.onDetach();\n\t\t\t\t}\n\t\t\t\titem.current.instance = undefined;\n\t\t\t}\n\t\t}\n\t\tif (_deferredProcessQueue.length === 0) {\n\t\t\t_nodeToWrapperMap = new WeakMap();\n\t\t}\n\t}\n\n\tfunction _runCallbacks() {\n\t\trunAfterRenderCallbacks();\n\t\trunDeferredRenderCallbacks();\n\t}\n\n\tfunction _processMergeNodes(next: DNodeWrapper, mergeNodes: Node[]) {\n\t\tconst { merge } = _mountOptions;\n\t\tif (merge && mergeNodes.length) {\n\t\t\tif (isVNodeWrapper(next)) {\n\t\t\t\tlet {\n\t\t\t\t\tnode: { tag }\n\t\t\t\t} = next;\n\t\t\t\tfor (let i = 0; i < mergeNodes.length; i++) {\n\t\t\t\t\tconst domElement = mergeNodes[i] as Element;\n\t\t\t\t\tconst tagName = domElement.tagName || '';\n\t\t\t\t\tif (tag.toUpperCase() === tagName.toUpperCase()) {\n\t\t\t\t\t\tconst mergeNodeIndex = _allMergedNodes.indexOf(domElement);\n\t\t\t\t\t\tif (mergeNodeIndex !== -1) {\n\t\t\t\t\t\t\t_allMergedNodes.splice(mergeNodeIndex, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmergeNodes.splice(i, 1);\n\t\t\t\t\t\tnext.domNode = domElement;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnext.mergeNodes = mergeNodes;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction registerDistinguishableCallback(childNodes: DNodeWrapper[], index: number) {\n\t\t_idleCallbacks.push(() => {\n\t\t\tconst parentWNodeWrapper = getWNodeWrapper(childNodes[index].owningId);\n\t\t\tcheckDistinguishable(childNodes, index, parentWNodeWrapper);\n\t\t});\n\t}\n\n\tfunction createKeyMap(wrappers: DNodeWrapper[]): (string | number)[] | false {\n\t\tconst keys: (string | number)[] = [];\n\t\tfor (let i = 0; i < wrappers.length; i++) {\n\t\t\tconst wrapper = wrappers[i];\n\t\t\tif (wrapper.node.properties.key != null) {\n\t\t\t\tkeys.push(wrapper.node.properties.key);\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn keys;\n\t}\n\n\tfunction _process(current: DNodeWrapper[], next: DNodeWrapper[], meta: ProcessMeta = {}): void {\n\t\tlet { mergeNodes = [], oldIndex = 0, newIndex = 0 } = meta;\n\t\tconst currentLength = current.length;\n\t\tconst nextLength = next.length;\n\t\tconst hasPreviousSiblings = currentLength > 1 || (currentLength > 0 && currentLength < nextLength);\n\t\tlet instructions: Instruction[] = [];\n\t\tlet replace = false;\n\t\tif (oldIndex === 0 && newIndex === 0 && currentLength) {\n\t\t\tconst currentKeys = createKeyMap(current);\n\t\t\tif (currentKeys) {\n\t\t\t\tconst nextKeys = createKeyMap(next);\n\t\t\t\tif (nextKeys) {\n\t\t\t\t\tfor (let i = 0; i < currentKeys.length; i++) {\n\t\t\t\t\t\tif (nextKeys.indexOf(currentKeys[i]) !== -1) {\n\t\t\t\t\t\t\tinstructions = [];\n\t\t\t\t\t\t\treplace = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treplace = true;\n\t\t\t\t\t\tinstructions.push({ current: current[i], next: undefined });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (replace || (currentLength === 0 && !_mountOptions.merge)) {\n\t\t\tfor (let i = 0; i < next.length; i++) {\n\t\t\t\tinstructions.push({ current: undefined, next: next[i] });\n\t\t\t}\n\t\t} else {\n\t\t\tif (newIndex < nextLength) {\n\t\t\t\tlet currentWrapper = oldIndex < currentLength ? current[oldIndex] : undefined;\n\t\t\t\tconst nextWrapper = next[newIndex];\n\t\t\t\tnextWrapper.hasPreviousSiblings = hasPreviousSiblings;\n\n\t\t\t\t_processMergeNodes(nextWrapper, mergeNodes);\n\n\t\t\t\tif (currentWrapper && same(currentWrapper, nextWrapper)) {\n\t\t\t\t\toldIndex++;\n\t\t\t\t\tnewIndex++;\n\t\t\t\t\tif (isVNodeWrapper(currentWrapper) && isVNodeWrapper(nextWrapper)) {\n\t\t\t\t\t\tnextWrapper.inserted = currentWrapper.inserted;\n\t\t\t\t\t}\n\t\t\t\t\tinstructions.push({ current: currentWrapper, next: nextWrapper });\n\t\t\t\t} else if (!currentWrapper || findIndexOfChild(current, nextWrapper, oldIndex + 1) === -1) {\n\t\t\t\t\thas('dojo-debug') && current.length && registerDistinguishableCallback(next, newIndex);\n\t\t\t\t\tinstructions.push({ current: undefined, next: nextWrapper });\n\t\t\t\t\tnewIndex++;\n\t\t\t\t} else if (findIndexOfChild(next, currentWrapper, newIndex + 1) === -1) {\n\t\t\t\t\thas('dojo-debug') && registerDistinguishableCallback(current, oldIndex);\n\t\t\t\t\tinstructions.push({ current: currentWrapper, next: undefined });\n\t\t\t\t\toldIndex++;\n\t\t\t\t} else {\n\t\t\t\t\thas('dojo-debug') && registerDistinguishableCallback(next, newIndex);\n\t\t\t\t\thas('dojo-debug') && registerDistinguishableCallback(current, oldIndex);\n\t\t\t\t\tinstructions.push({ current: currentWrapper, next: undefined });\n\t\t\t\t\tinstructions.push({ current: undefined, next: nextWrapper });\n\t\t\t\t\toldIndex++;\n\t\t\t\t\tnewIndex++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (newIndex < nextLength) {\n\t\t\t\t_processQueue.push({ current, next, meta: { mergeNodes, oldIndex, newIndex } });\n\t\t\t}\n\t\t\tif (currentLength > oldIndex && newIndex >= nextLength) {\n\t\t\t\tfor (let i = oldIndex; i < currentLength; i++) {\n\t\t\t\t\thas('dojo-debug') && registerDistinguishableCallback(current, i);\n\t\t\t\t\tinstructions.push({ current: current[i], next: undefined });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0; i < instructions.length; i++) {\n\t\t\tconst result = _processOne(instructions[i]);\n\t\t\tif (result === false) {\n\t\t\t\tif (_mountOptions.merge && mergeNodes.length) {\n\t\t\t\t\tif (newIndex < nextLength) {\n\t\t\t\t\t\t_processQueue.pop();\n\t\t\t\t\t}\n\t\t\t\t\t_processQueue.push({ next, current, meta });\n\t\t\t\t\t_deferredProcessQueue = _processQueue;\n\t\t\t\t\t_processQueue = [];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst { widget, item, dom } = result;\n\t\t\twidget && _processQueue.push(widget);\n\t\t\titem && _processQueue.push(item);\n\t\t\tdom && _applicationQueue.push(dom);\n\t\t}\n\t}\n\n\tfunction _processOne({ current, next }: Instruction): ProcessResult | false {\n\t\tif (current !== next) {\n\t\t\tif (!current && next) {\n\t\t\t\tif (isVNodeWrapper(next)) {\n\t\t\t\t\treturn _createDom({ next });\n\t\t\t\t} else {\n\t\t\t\t\treturn _createWidget({ next });\n\t\t\t\t}\n\t\t\t} else if (current && next) {\n\t\t\t\tif (isVNodeWrapper(current) && isVNodeWrapper(next)) {\n\t\t\t\t\treturn _updateDom({ current, next });\n\t\t\t\t} else if (isWNodeWrapper(current) && isWNodeWrapper(next)) {\n\t\t\t\t\treturn _updateWidget({ current, next });\n\t\t\t\t}\n\t\t\t} else if (current && !next) {\n\t\t\t\tif (isVNodeWrapper(current)) {\n\t\t\t\t\treturn _removeDom({ current });\n\t\t\t\t} else if (isWNodeWrapper(current)) {\n\t\t\t\t\treturn _removeWidget({ current });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn {};\n\t}\n\n\tfunction resolveMiddleware(middlewares: any, id: string): any {\n\t\tconst keys = Object.keys(middlewares);\n\t\tconst results: any = {};\n\t\tconst uniqueId = `${id}-${metaId++}`;\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tconst middleware = middlewares[keys[i]]();\n\t\t\tconst payload: any = {\n\t\t\t\tid: uniqueId,\n\t\t\t\tproperties: () => {\n\t\t\t\t\tconst widgetMeta = widgetMetaMap.get(id);\n\t\t\t\t\tif (widgetMeta) {\n\t\t\t\t\t\treturn { ...widgetMeta.properties };\n\t\t\t\t\t}\n\t\t\t\t\treturn {};\n\t\t\t\t},\n\t\t\t\tchildren: () => {\n\t\t\t\t\tconst widgetMeta = widgetMetaMap.get(id);\n\t\t\t\t\tif (widgetMeta) {\n\t\t\t\t\t\treturn widgetMeta.children;\n\t\t\t\t\t}\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (middleware.middlewares) {\n\t\t\t\tconst resolvedMiddleware = resolveMiddleware(middleware.middlewares, id);\n\t\t\t\tpayload.middleware = resolvedMiddleware;\n\t\t\t\tresults[keys[i]] = middleware.callback(payload);\n\t\t\t} else {\n\t\t\t\tresults[keys[i]] = middleware.callback(payload);\n\t\t\t}\n\t\t}\n\t\treturn results;\n\t}\n\n\tfunction _createWidget({ next }: CreateWidgetInstruction): ProcessResult | false {\n\t\tlet {\n\t\t\tnode: { widgetConstructor }\n\t\t} = next;\n\t\tlet { registry } = _mountOptions;\n\t\tlet Constructor = next.registryItem || widgetConstructor;\n\t\tif (!isWidget(Constructor)) {\n\t\t\tresolveRegistryItem(next);\n\t\t\tif (!next.registryItem) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tConstructor = next.registryItem;\n\t\t}\n\n\t\tlet rendered: RenderResult;\n\t\tlet invalidate: () => void;\n\t\tnext.properties = next.node.properties;\n\t\tnext.id = next.id || `${wrapperId++}`;\n\t\t_idToWrapperMap.set(next.id, next);\n\t\tconst { id, depth, order } = next;\n\t\tif (!isWidgetBaseConstructor(Constructor)) {\n\t\t\tlet widgetMeta = widgetMetaMap.get(id);\n\t\t\tif (!widgetMeta) {\n\t\t\t\tinvalidate = () => {\n\t\t\t\t\tconst widgetMeta = widgetMetaMap.get(id);\n\t\t\t\t\tif (widgetMeta) {\n\t\t\t\t\t\twidgetMeta.dirty = true;\n\t\t\t\t\t\tif (!widgetMeta.rendering && _idToWrapperMap.has(id)) {\n\t\t\t\t\t\t\t_invalidationQueue.push({ id, depth, order });\n\t\t\t\t\t\t\t_schedule();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\twidgetMeta = {\n\t\t\t\t\tdirty: false,\n\t\t\t\t\tinvalidator: invalidate,\n\t\t\t\t\tproperties: next.node.properties,\n\t\t\t\t\tchildren: next.node.children,\n\t\t\t\t\tdeferRefs: 0,\n\t\t\t\t\trendering: true,\n\t\t\t\t\tregistry: _mountOptions.registry\n\t\t\t\t};\n\n\t\t\t\twidgetMetaMap.set(next.id, widgetMeta);\n\t\t\t\twidgetMeta.middleware = (Constructor as any).middlewares\n\t\t\t\t\t? resolveMiddleware((Constructor as any).middlewares, id)\n\t\t\t\t\t: {};\n\t\t\t} else {\n\t\t\t\tinvalidate = widgetMeta.invalidator;\n\t\t\t}\n\n\t\t\trendered = Constructor({\n\t\t\t\tid,\n\t\t\t\tproperties: () => next.node.properties,\n\t\t\t\tchildren: () => next.node.children,\n\t\t\t\tmiddleware: widgetMeta.middleware\n\t\t\t});\n\t\t\twidgetMeta.rendering = false;\n\t\t\tif (widgetMeta.deferRefs > 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tlet instance = new Constructor() as WidgetBaseInterface & {\n\t\t\t\tinvalidate: any;\n\t\t\t\tregistry: any;\n\t\t\t};\n\t\t\tinstance.registry.base = registry;\n\t\t\tconst instanceData = widgetInstanceMap.get(instance)!;\n\t\t\tinvalidate = () => {\n\t\t\t\tinstanceData.dirty = true;\n\t\t\t\tif (!instanceData.rendering && _idToWrapperMap.has(id)) {\n\t\t\t\t\t_invalidationQueue.push({ id, depth, order });\n\t\t\t\t\t_schedule();\n\t\t\t\t}\n\t\t\t};\n\t\t\tinstanceData.invalidate = invalidate;\n\t\t\tinstanceData.rendering = true;\n\t\t\tinstance.__setProperties__(next.node.properties);\n\t\t\tinstance.__setChildren__(next.node.children);\n\t\t\tnext.instance = instance;\n\t\t\trendered = instance.__render__();\n\t\t\tinstanceData.rendering = false;\n\t\t}\n\n\t\tlet children: DNodeWrapper[] | undefined;\n\t\tif (rendered) {\n\t\t\trendered = Array.isArray(rendered) ? rendered : [rendered];\n\t\t\tchildren = renderedToWrapper(rendered, next, null);\n\t\t\t_idToChildrenWrappers.set(id, children);\n\t\t}\n\n\t\tif (!parentInvalidate && !(Constructor as any).isWNodeWrapper) {\n\t\t\tparentInvalidate = invalidate;\n\t\t}\n\n\t\treturn {\n\t\t\titem: {\n\t\t\t\tnext: children,\n\t\t\t\tmeta: { mergeNodes: next.mergeNodes }\n\t\t\t},\n\t\t\twidget: { type: 'attach', instance: next.instance, id, attached: true }\n\t\t};\n\t}\n\n\tfunction _updateWidget({ current, next }: UpdateWidgetInstruction): ProcessResult {\n\t\tcurrent = getWNodeWrapper(current.id) || current;\n\t\tconst { instance, domNode, hasAnimations } = current;\n\t\tlet {\n\t\t\tnode: { widgetConstructor }\n\t\t} = next;\n\t\tconst Constructor = next.registryItem || widgetConstructor;\n\n\t\tif (!isWidget(Constructor)) {\n\t\t\treturn {};\n\t\t}\n\t\tlet rendered: RenderResult;\n\t\tlet processResult: ProcessResult = {};\n\t\tlet didRender = false;\n\t\tlet currentChildren = _idToChildrenWrappers.get(current.id);\n\t\tnext.hasAnimations = hasAnimations;\n\t\tnext.id = current.id;\n\t\tnext.childDomWrapperId = current.childDomWrapperId;\n\t\tnext.properties = next.node.properties;\n\t\t_wrapperSiblingMap.delete(current);\n\t\tif (domNode && domNode.parentNode) {\n\t\t\tnext.domNode = domNode;\n\t\t}\n\n\t\tif (!isWidgetBaseConstructor(Constructor)) {\n\t\t\tconst widgetMeta = widgetMetaMap.get(next.id);\n\t\t\tif (widgetMeta) {\n\t\t\t\twidgetMeta.properties = next.properties;\n\t\t\t\twidgetMeta.rendering = true;\n\t\t\t\trunDiffs(widgetMeta, current.properties, next.properties);\n\t\t\t\tif (current.node.children.length > 0 || next.node.children.length > 0) {\n\t\t\t\t\twidgetMeta.dirty = true;\n\t\t\t\t}\n\t\t\t\tif (!widgetMeta.dirty) {\n\t\t\t\t\tpropertiesDiff(\n\t\t\t\t\t\tcurrent.properties,\n\t\t\t\t\t\tnext.properties,\n\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\twidgetMeta.dirty = true;\n\t\t\t\t\t\t},\n\t\t\t\t\t\twidgetMeta.customDiffProperties ? [...widgetMeta.customDiffProperties.values()] : []\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (widgetMeta.dirty) {\n\t\t\t\t\t_idToChildrenWrappers.delete(next.id);\n\t\t\t\t\tdidRender = true;\n\t\t\t\t\twidgetMeta.dirty = false;\n\t\t\t\t\trendered = Constructor({\n\t\t\t\t\t\tid: next.id,\n\t\t\t\t\t\tproperties: () => next.node.properties,\n\t\t\t\t\t\tchildren: () => next.node.children,\n\t\t\t\t\t\tmiddleware: widgetMeta.middleware\n\t\t\t\t\t});\n\t\t\t\t\tif (widgetMeta.deferRefs > 0) {\n\t\t\t\t\t\trendered = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twidgetMeta.rendering = false;\n\t\t\t}\n\t\t} else {\n\t\t\tconst instanceData = widgetInstanceMap.get(instance!)!;\n\t\t\tnext.instance = instance;\n\t\t\tinstanceData.rendering = true;\n\t\t\tinstance!.__setProperties__(next.node.properties);\n\t\t\tinstance!.__setChildren__(next.node.children);\n\t\t\tif (instanceData.dirty) {\n\t\t\t\tdidRender = true;\n\t\t\t\t_idToChildrenWrappers.delete(next.id);\n\t\t\t\trendered = instance!.__render__();\n\t\t\t}\n\t\t\tinstanceData.rendering = false;\n\t\t}\n\t\t_idToWrapperMap.set(next.id, next);\n\t\tprocessResult.widget = { type: 'attach', instance, id: next.id, attached: false };\n\n\t\tlet children: DNodeWrapper[] | undefined;\n\t\tif (rendered) {\n\t\t\trendered = Array.isArray(rendered) ? rendered : [rendered];\n\t\t\tchildren = renderedToWrapper(rendered, next, current);\n\t\t\t_idToChildrenWrappers.set(next.id, children);\n\t\t}\n\n\t\tif (didRender) {\n\t\t\tprocessResult.item = {\n\t\t\t\tcurrent: currentChildren,\n\t\t\t\tnext: children,\n\t\t\t\tmeta: {}\n\t\t\t};\n\t\t}\n\t\treturn processResult;\n\t}\n\n\tfunction _removeWidget({ current }: RemoveWidgetInstruction): ProcessResult {\n\t\tcurrent = getWNodeWrapper(current.id) || current;\n\t\t_idToWrapperMap.delete(current.id);\n\t\tconst meta = widgetMetaMap.get(current.id);\n\t\tlet currentChildren = _idToChildrenWrappers.get(current.id);\n\t\t_idToChildrenWrappers.delete(current.id);\n\t\t_wrapperSiblingMap.delete(current);\n\t\tlet processResult: ProcessResult = {\n\t\t\titem: {\n\t\t\t\tcurrent: currentChildren,\n\t\t\t\tmeta: {}\n\t\t\t}\n\t\t};\n\t\tif (meta) {\n\t\t\tmeta.registryHandler && meta.registryHandler.destroy();\n\t\t\tmeta.destroyMap && destroyHandles(meta.destroyMap);\n\t\t\twidgetMetaMap.delete(current.id);\n\t\t} else {\n\t\t\tprocessResult.widget = { type: 'detach', current, instance: current.instance };\n\t\t}\n\n\t\treturn processResult;\n\t}\n\n\tfunction setDomNodeOnParentWrapper(id: string) {\n\t\tlet wrapper = _idToWrapperMap.get(id)!;\n\t\tlet children = [...(_idToChildrenWrappers.get(id) || [])];\n\t\tlet child: DNodeWrapper | undefined;\n\t\twhile (children.length && !wrapper.domNode) {\n\t\t\tchild = children.shift();\n\t\t\tif (child) {\n\t\t\t\tif (child.domNode) {\n\t\t\t\t\twrapper.childDomWrapperId = child.id;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tlet nextChildren = _idToChildrenWrappers.get(child.id);\n\t\t\t\tif (nextChildren) {\n\t\t\t\t\tchildren = [...nextChildren, ...children];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction _createDom({ next }: CreateDomInstruction): ProcessResult {\n\t\tconst parentDomNode = findParentDomNode(next)!;\n\t\tconst isVirtual = isVirtualWrapper(next);\n\t\tconst isBody = isBodyWrapper(next);\n\t\tlet mergeNodes: Node[] = [];\n\t\tnext.id = `${wrapperId++}`;\n\t\t_idToWrapperMap.set(next.id, next);\n\t\tif (!next.domNode) {\n\t\t\tif ((next.node as any).domNode) {\n\t\t\t\tnext.domNode = (next.node as any).domNode;\n\t\t\t} else {\n\t\t\t\tif (next.node.tag === 'svg') {\n\t\t\t\t\tnext.namespace = NAMESPACE_SVG;\n\t\t\t\t}\n\t\t\t\tif (isBody) {\n\t\t\t\t\tnext.domNode = global.document.body;\n\t\t\t\t} else if (next.node.tag && !isVirtual) {\n\t\t\t\t\tif (next.namespace) {\n\t\t\t\t\t\tnext.domNode = global.document.createElementNS(next.namespace, next.node.tag);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnext.domNode = global.document.createElement(next.node.tag);\n\t\t\t\t\t}\n\t\t\t\t} else if (next.node.text != null) {\n\t\t\t\t\tnext.domNode = global.document.createTextNode(next.node.text);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (_insertBeforeMap && _allMergedNodes.length) {\n\t\t\t\tif (parentDomNode === _allMergedNodes[0].parentNode) {\n\t\t\t\t\t_insertBeforeMap.set(next, _allMergedNodes[0]);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (_mountOptions.merge) {\n\t\t\tnext.merged = true;\n\t\t\tif (isTextNode(next.domNode)) {\n\t\t\t\tif (next.domNode.data !== next.node.text) {\n\t\t\t\t\t_allMergedNodes = [next.domNode, ..._allMergedNodes];\n\t\t\t\t\tnext.domNode = global.document.createTextNode(next.node.text);\n\t\t\t\t\tnext.merged = false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmergeNodes = arrayFrom(next.domNode.childNodes);\n\t\t\t\t_allMergedNodes = [..._allMergedNodes, ...mergeNodes];\n\t\t\t}\n\t\t}\n\t\tlet children: DNodeWrapper[] | undefined;\n\t\tif (next.domNode || isVirtual) {\n\t\t\tif (next.node.children && next.node.children.length) {\n\t\t\t\tchildren = renderedToWrapper(next.node.children, next, null);\n\t\t\t\t_idToChildrenWrappers.set(next.id, children);\n\t\t\t}\n\t\t}\n\t\tconst dom: ApplicationInstruction | undefined =\n\t\t\tisVirtual || isBody\n\t\t\t\t? undefined\n\t\t\t\t: {\n\t\t\t\t\t\tnext: next!,\n\t\t\t\t\t\tparentDomNode: parentDomNode,\n\t\t\t\t\t\ttype: 'create'\n\t\t\t\t  };\n\t\tif (children) {\n\t\t\treturn {\n\t\t\t\titem: {\n\t\t\t\t\tcurrent: [],\n\t\t\t\t\tnext: children,\n\t\t\t\t\tmeta: { mergeNodes }\n\t\t\t\t},\n\t\t\t\tdom,\n\t\t\t\twidget: isVirtual ? { type: 'attach', id: (next as any).id, attached: false } : undefined\n\t\t\t};\n\t\t}\n\t\treturn { dom };\n\t}\n\n\tfunction _updateDom({ current, next }: UpdateDomInstruction): ProcessResult {\n\t\tnext.domNode = current.domNode;\n\t\tnext.namespace = current.namespace;\n\t\tnext.id = current.id;\n\t\tnext.childDomWrapperId = current.childDomWrapperId;\n\t\tlet children: DNodeWrapper[] | undefined;\n\t\tlet currentChildren = _idToChildrenWrappers.get(next.id);\n\t\tif (next.node.text != null && next.node.text !== current.node.text) {\n\t\t\tnext.domNode = global.document.createTextNode(next.node.text);\n\t\t} else if (next.node.children) {\n\t\t\tchildren = renderedToWrapper(next.node.children, next, current);\n\t\t\t_idToChildrenWrappers.set(next.id, children);\n\t\t}\n\t\t_wrapperSiblingMap.delete(current);\n\t\t_idToWrapperMap.set(next.id, next);\n\t\treturn {\n\t\t\titem: {\n\t\t\t\tcurrent: currentChildren,\n\t\t\t\tnext: children,\n\t\t\t\tmeta: {}\n\t\t\t},\n\t\t\tdom: { type: 'update', next, current }\n\t\t};\n\t}\n\n\tfunction _removeDom({ current }: RemoveDomInstruction): ProcessResult {\n\t\tconst isVirtual = isVirtualWrapper(current);\n\t\tconst isBody = isBodyWrapper(current);\n\t\tconst children = _idToChildrenWrappers.get(current.id);\n\t\t_idToChildrenWrappers.delete(current.id);\n\t\t_idToWrapperMap.delete(current.id);\n\t\t_wrapperSiblingMap.delete(current);\n\t\tif (current.node.properties.key) {\n\t\t\tconst widgetMeta = widgetMetaMap.get(current.owningId);\n\t\t\tconst parentWrapper = getWNodeWrapper(current.owningId);\n\t\t\tif (widgetMeta) {\n\t\t\t\twidgetMeta.nodeMap && widgetMeta.nodeMap.delete(current.node.properties.key);\n\t\t\t} else if (parentWrapper && parentWrapper.instance) {\n\t\t\t\tconst instanceData = widgetInstanceMap.get(parentWrapper.instance);\n\t\t\t\tinstanceData && instanceData.nodeHandler.remove(current.node.properties.key);\n\t\t\t}\n\t\t}\n\t\tif (current.hasAnimations || isVirtual || isBody) {\n\t\t\treturn {\n\t\t\t\titem: { current: children, meta: {} },\n\t\t\t\tdom: isVirtual || isBody ? undefined : { type: 'delete', current }\n\t\t\t};\n\t\t}\n\n\t\tif (children) {\n\t\t\t_deferredRenderCallbacks.push(() => {\n\t\t\t\tlet wrappers = children || [];\n\t\t\t\tlet wrapper: DNodeWrapper | undefined;\n\t\t\t\tlet bodyIds = [];\n\t\t\t\twhile ((wrapper = wrappers.pop())) {\n\t\t\t\t\tif (isWNodeWrapper(wrapper)) {\n\t\t\t\t\t\twrapper = getWNodeWrapper(wrapper.id) || wrapper;\n\t\t\t\t\t\tif (wrapper.instance) {\n\t\t\t\t\t\t\tconst instanceData = widgetInstanceMap.get(wrapper.instance);\n\t\t\t\t\t\t\tinstanceData && instanceData.onDetach();\n\t\t\t\t\t\t\twrapper.instance = undefined;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst meta = widgetMetaMap.get(wrapper.id);\n\t\t\t\t\t\t\tif (meta) {\n\t\t\t\t\t\t\t\tmeta.registryHandler && meta.registryHandler.destroy();\n\t\t\t\t\t\t\t\tmeta.destroyMap && destroyHandles(meta.destroyMap);\n\t\t\t\t\t\t\t\twidgetMetaMap.delete(wrapper.id);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlet wrapperChildren = _idToChildrenWrappers.get(wrapper.id);\n\t\t\t\t\tif (wrapperChildren) {\n\t\t\t\t\t\twrappers.push(...wrapperChildren);\n\t\t\t\t\t}\n\t\t\t\t\tif (isBodyWrapper(wrapper)) {\n\t\t\t\t\t\tbodyIds.push(wrapper.id);\n\t\t\t\t\t} else if (bodyIds.indexOf(wrapper.parentId) !== -1) {\n\t\t\t\t\t\tif (isWNodeWrapper(wrapper) || isVirtualWrapper(wrapper)) {\n\t\t\t\t\t\t\tbodyIds.push(wrapper.id);\n\t\t\t\t\t\t} else if (wrapper.domNode && wrapper.domNode.parentNode) {\n\t\t\t\t\t\t\twrapper.domNode.parentNode.removeChild(wrapper.domNode);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t_idToChildrenWrappers.delete(wrapper.id);\n\t\t\t\t\t_idToWrapperMap.delete(wrapper.id);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\tdom: { type: 'delete', current }\n\t\t};\n\t}\n\n\treturn {\n\t\tmount,\n\t\tinvalidate\n\t};\n}\n\nexport default renderer;\n","import { create, destroy } from '../vdom';\nimport Map from '../../shim/Map';\n\nconst factory = create({ destroy });\n\nexport const cache = factory(({ middleware: { destroy } }) => {\n\tconst cacheMap = new Map<string, any>();\n\tdestroy(() => {\n\t\tcacheMap.clear();\n\t});\n\treturn {\n\t\tget<T = any>(key: any): T | undefined {\n\t\t\treturn cacheMap.get(key);\n\t\t},\n\t\tset<T = any>(key: any, value: T): void {\n\t\t\tcacheMap.set(key, value);\n\t\t},\n\t\tclear(): void {\n\t\t\tcacheMap.clear();\n\t\t}\n\t};\n});\n\nexport default cache;\n","import { create, invalidator } from '../vdom';\nimport cache from './cache';\n\nconst factory = create({ cache, invalidator });\n\ninterface CacheWrapper<T = any> {\n\tstatus: 'pending' | 'resolved';\n\tvalue: T;\n}\n\nexport interface IcacheResult {\n\tgetOrSet: {\n\t\t<T>(key: any, value: () => Promise<T>): undefined | T;\n\t\t<T>(key: any, value: () => T): T;\n\t\t<T>(key: any, value: T): T;\n\t};\n\tget<T = any>(key: any): T | undefined;\n\tset(key: any, value: any): void;\n\tclear(): void;\n}\n\nexport const icache = factory(\n\t({ middleware: { invalidator, cache } }): IcacheResult => {\n\t\treturn {\n\t\t\tgetOrSet<T = any>(key: any, value: any): T | undefined {\n\t\t\t\tlet cachedValue = cache.get<CacheWrapper<T>>(key);\n\t\t\t\tif (!cachedValue) {\n\t\t\t\t\tthis.set(key, value);\n\t\t\t\t}\n\t\t\t\tcachedValue = cache.get<CacheWrapper<T>>(key);\n\t\t\t\tif (!cachedValue || cachedValue.status === 'pending') {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn cachedValue.value;\n\t\t\t},\n\t\t\tget<T = any>(key: any): T | undefined {\n\t\t\t\tconst cachedValue = cache.get<CacheWrapper<T>>(key);\n\t\t\t\tif (!cachedValue || cachedValue.status === 'pending') {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn cachedValue.value;\n\t\t\t},\n\t\t\tset(key: any, value: any): void {\n\t\t\t\tif (typeof value === 'function') {\n\t\t\t\t\tvalue = value();\n\t\t\t\t\tif (value && typeof value.then === 'function') {\n\t\t\t\t\t\tcache.set(key, {\n\t\t\t\t\t\t\tstatus: 'pending',\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t});\n\t\t\t\t\t\tvalue.then((result: any) => {\n\t\t\t\t\t\t\tconst cachedValue = cache.get<CacheWrapper<any>>(key);\n\t\t\t\t\t\t\tif (cachedValue && cachedValue.value === value) {\n\t\t\t\t\t\t\t\tcache.set(key, {\n\t\t\t\t\t\t\t\t\tstatus: 'resolved',\n\t\t\t\t\t\t\t\t\tvalue: result\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tinvalidator();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcache.set(key, {\n\t\t\t\t\tstatus: 'resolved',\n\t\t\t\t\tvalue\n\t\t\t\t});\n\t\t\t\tinvalidator();\n\t\t\t},\n\t\t\tclear(): void {\n\t\t\t\tcache.clear();\n\t\t\t}\n\t\t};\n\t}\n);\n\nexport default icache;\n","/*\n * Nonsense content generation to keep our infinite list interesting.\n */\n\nconst titles = [\n\t'Double Your Profit with These [number] tips on [subject]',\n\t'[number] Easy Ways You Can Turn [subject] Into Success',\n\t'Can You Pass The [subject] Test?',\n\t'Why Ignoring [subject] Will Cost You Time And Sales',\n\t'[number] Methods Of [subject] [goal]',\n\t'What [organization] Doesn\\'t Want You To Know About [subject]',\n\t'The Aliens Are Sneaking [subject] Into America. What You Need To Know For [better]',\n\t'Clear And Unbiased Facts About [subject] (Without All The Hype)',\n\t'[subject] Is Bound To Make An Impact On Your [location]',\n\t'At Last, The Secret To [subject] Revealed',\n\t'Take The Stress Out Of [subject]',\n\t'[number] Easy Ways To Make [subject] [better]',\n\t'Lies About [subject]',\n\t'Top [number] Ways To Buy Used [subject]',\n\t'Improve Your [subject] In [number] Days',\n\t'[better] [subject] In [number] Easy Steps',\n\t'Proof That [subject] Are Exactly What You Are Looking For',\n\t'[subject] Becoming A Challenge? [number] Tips for [subject] [better]',\n\t'The [organization]\\'s Secret Campaign Against [subject]',\n\t'Drone Overhead? Why [organization] Can\\'t Have You Panic'\n];\n\nconst subjects = [\n\t'Waning Gibbous',\n\t'Government Test Sites',\n\t'Tin Foil Hats',\n\t'Cats'\n];\n\nconst goals = [\n\t'Success',\n\t'Domination',\n\t'Happiness'\n];\n\nconst locations = [\n\t'Life',\n\t'Business',\n\t'Mother\\'s Basement',\n\t'Cat'\n];\n\nconst betters = [\n\t'Faster',\n\t'Stronger',\n\t'Successful'\n];\n\nconst organizations = [\n\t'The Government',\n\t'The CIA',\n\t'The FBI',\n\t'Math Teachers'\n];\n\nfunction generateArticleTitle() {\n\tlet template = titles[Math.floor(Math.random() * titles.length)];\n\n\treturn template.replace(/\\[[^\\]]+\\]/g, (match) => {\n\t\tswitch (match) {\n\t\t\tcase '[number]':\n\t\t\t\treturn String(Math.round(Math.random() * 14) + 1);\n\t\t\tcase '[subject]':\n\t\t\t\treturn subjects[Math.floor(Math.random() * subjects.length)];\n\t\t\tcase '[goal]':\n\t\t\t\treturn goals[Math.floor(Math.random() * goals.length)];\n\t\t\tcase '[location]':\n\t\t\t\treturn locations[Math.floor(Math.random() * locations.length)];\n\t\t\tcase '[better]':\n\t\t\t\treturn betters[Math.floor(Math.random() * betters.length)];\n\t\t\tcase '[organization]':\n\t\t\t\treturn organizations[Math.floor(Math.random() * organizations.length)];\n\t\t}\n\n\t\treturn match;\n\t});\n}\n\n/**\n * Grabs content for our list. This is async because it could be pulling data from a server.\n */\nexport function getListItems(count = 10): Promise<{ title: string; summary: string }[]> {\n\tconst articles: any[] = [];\n\n\tfor (let i = 0; i < count; i++) {\n\t\tconst sentences = Math.round(Math.random() * 3);\n\n\t\tlet summary = generateArticleTitle();\n\t\tfor (let j = 0; j < sentences; j++) {\n\t\t\tsummary += '. ' + generateArticleTitle();\n\t\t}\n\n\t\tarticles.push({\n\t\t\ttitle: generateArticleTitle(),\n\t\t\tsummary\n\t\t});\n\t}\n\n\treturn new Promise<{ title: string; summary: string }[]>((resolve) => {\n\t\tsetTimeout(() => {\n\t\t\tresolve(articles);\n\t\t}, 300);\n\t});\n}\n","`!has('build-elide')`;\nimport 'intersection-observer';\nimport wrapper from './util/wrapper';\n\nexport default wrapper('IntersectionObserver', true) as typeof IntersectionObserver;\n","import WeakMap from '../../shim/WeakMap';\nimport IntersectionObserver from '../../shim/IntersectionObserver';\nimport { create, node, invalidator, destroy } from '../vdom';\nimport cache from './cache';\nimport {\n\tIntersectionResult,\n\tIntersectionGetOptions,\n\tIntersectionDetail,\n\tExtendedIntersectionObserverEntry\n} from '../meta/Intersection';\n\nconst defaultIntersection: IntersectionResult = Object.freeze({\n\tintersectionRatio: 0,\n\tisIntersecting: false\n});\n\nconst factory = create({ cache, node, invalidator, destroy });\n\nexport const intersection = factory(({ middleware: { cache, node, invalidator, destroy } }) => {\n\tconst handles: Function[] = [];\n\tdestroy(() => {\n\t\tlet handle: any;\n\t\twhile ((handle = handles.pop())) {\n\t\t\thandle && handle();\n\t\t}\n\t});\n\n\tfunction _createDetails(options: IntersectionGetOptions, rootNode?: HTMLElement): IntersectionDetail {\n\t\tconst entries = new WeakMap<HTMLElement, ExtendedIntersectionObserverEntry>();\n\t\tconst observer = new IntersectionObserver(_onIntersect(entries), {\n\t\t\t...options,\n\t\t\troot: rootNode\n\t\t});\n\t\tconst details = { observer, entries, ...options };\n\t\tcache.set(JSON.stringify(options), details);\n\t\thandles.push(() => observer.disconnect());\n\t\treturn details;\n\t}\n\n\tfunction _getDetails(options: IntersectionGetOptions = {}): IntersectionDetail | undefined {\n\t\treturn cache.get(JSON.stringify(options));\n\t}\n\n\tfunction _onIntersect(detailEntries: WeakMap<Element, IntersectionResult>) {\n\t\treturn (entries: ExtendedIntersectionObserverEntry[]) => {\n\t\t\tfor (const { intersectionRatio, isIntersecting, target } of entries) {\n\t\t\t\tdetailEntries.set(target, { intersectionRatio, isIntersecting });\n\t\t\t}\n\t\t\tinvalidator();\n\t\t};\n\t}\n\n\treturn {\n\t\tget(key: string | number, options: IntersectionGetOptions = {}): IntersectionResult {\n\t\t\tlet rootNode: HTMLElement | undefined;\n\t\t\tif (options.root) {\n\t\t\t\trootNode = node.get(options.root) as HTMLElement;\n\t\t\t\tif (!rootNode) {\n\t\t\t\t\treturn defaultIntersection;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst domNode = node.get(key) as HTMLElement | null;\n\t\t\tif (!domNode) {\n\t\t\t\treturn defaultIntersection;\n\t\t\t}\n\n\t\t\tlet details = _getDetails(options) || _createDetails(options, rootNode);\n\t\t\tif (!details.entries.get(domNode)) {\n\t\t\t\tdetails.entries.set(domNode, defaultIntersection);\n\t\t\t\tdetails.observer.observe(domNode);\n\t\t\t}\n\n\t\t\treturn details.entries.get(domNode) || defaultIntersection;\n\t\t}\n\t};\n});\n\nexport default intersection;\n","import { create, v } from '@dojo/framework/core/vdom';\n\nimport * as css from './styles/Item.m.css';\n\ninterface ItemProperties {\n\ttitle: string;\n\tsummary: string;\n}\n\nconst factory = create().properties<ItemProperties>();\n\nexport default factory(function Item({ properties }) {\n\tconst { title, summary } = properties();\n\treturn v('div', { classes: css.root }, [\n\t\tv('h2', { classes: css.title }, [title]),\n\t\tv('p', { classes: css.summary }, [summary])\n\t])\n});\n\n","import { create, v, w } from \"@dojo/framework/core/vdom\";\nimport intersection from \"@dojo/framework/core/middleware/intersection\";\n\nimport Item from \"./Item\";\nimport * as css from \"./styles/infiniteList.m.css\";\n\nexport interface InfiniteListProperties {\n\tonRequestItems(): Promise<void>;\n\tdata: any[];\n\tisLoading: boolean;\n}\n\nconst factory = create({ intersection }).properties<InfiniteListProperties>();\n\nexport default factory(function InfiniteList({\n\tmiddleware: { intersection },\n\tproperties\n}) {\n\tconst { onRequestItems, data, isLoading } = properties();\n\tconst { isIntersecting } = intersection.get(\"bottom\");\n\n\tif (isIntersecting && !isLoading) {\n\t\tonRequestItems();\n\t}\n\n\treturn v(\"div\", {}, [\n\t\tv(\n\t\t\t\"div\",\n\t\t\t{ key: \"data\" },\n\t\t\tdata.map(({ title, summary }) => w(Item, { title, summary }))\n\t\t),\n\t\tv(\"div\", { key: \"bottom\", classes: css.bottom })\n\t]);\n});\n","import { create, w, v } from '@dojo/framework/core/vdom';\nimport icache from '@dojo/framework/core/middleware/icache';\nimport { getListItems } from '../listItemGenerator';\nimport InfiniteList from './InfiniteList';\n\nimport * as css from './styles/app.m.css';\n\nconst factory = create({ icache });\n\nexport default factory(function App({ middleware: { icache }}) {\n\tconst data = icache.getOrSet<{ title: string; summary: string }[]>('data', getListItems);\n\tconst isLoading = icache.get('loading') || false;\n\n\treturn v('div', { classes: css.root }, [\n\t\tv('h1', { classes: css.title }, ['Infinite Scrolling List']),\n\t\tdata && w(InfiniteList, { isLoading, data, onRequestItems: async () => {\n\t\t\ticache.set('loading', true);\n\t\t\tconst newData = await getListItems();\n\t\t\tconst data = icache.get('data');\n\t\t\ticache.set('loading', false);\n\t\t\ticache.set('data', [ ...data, ...newData ]);\n\t\t}})\n\t]);\n});\n","import renderer, { w } from '@dojo/framework/core/vdom';\nimport App from './widgets/App';\n\nconst r = renderer(() => w(App, {}));\nr.mount();\n","import global from '../global';\nimport has from '../../core/has';\n\nexport default function wrapper(nameOnGlobal: string, constructor = false, bind = false): any {\n\tif (has('test')) {\n\t\tif (constructor) {\n\t\t\treturn function(...args: any[]) {\n\t\t\t\treturn new global[nameOnGlobal](...args);\n\t\t\t};\n\t\t} else {\n\t\t\treturn function(...args: any[]) {\n\t\t\t\treturn global[nameOnGlobal](...args);\n\t\t\t};\n\t\t}\n\t}\n\n\treturn bind ? global[nameOnGlobal].bind(global) : global[nameOnGlobal];\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\" _key\":\"intersection-observer/Item\",\"root\":\"Item-m__root__3rZ7z\",\"title\":\"Item-m__title__ybj5d\",\"summary\":\"Item-m__summary__1lztW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\" _key\":\"intersection-observer/infiniteList\",\"bottom\":\"infiniteList-m__bottom__3a6TF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\" _key\":\"intersection-observer/app\",\"root\":\"app-m__root__2lj42\",\"title\":\"app-m__title__1xQid\"};"],"sourceRoot":""}